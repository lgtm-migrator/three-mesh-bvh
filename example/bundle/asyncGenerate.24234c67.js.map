{"mappings":"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","sources":["node_modules/three/build/three.module.js","src/core/MeshBVH.js","src/core/Constants.js","src/core/buildFunctions.js","src/core/MeshBVHNode.js","src/utils/ArrayBoxUtilities.js","src/core/castFunctions.js","src/math/OrientedBox.js","src/math/SeparatingAxisBounds.js","src/math/ExtendedTriangle.js","src/math/MathUtilities.js","src/utils/GeometryRayIntersectUtilities.js","src/utils/ThreeRayIntersectUtilities.js","src/utils/TriangleUtilities.js","src/utils/PrimitivePool.js","src/core/nodeBufferFunctions.js","src/objects/MeshBVHVisualizer.js","src/debug/Debug.js","src/utils/ExtensionUtilities.js","src/gpu/MeshBVHUniformStruct.js","src/gpu/VertexAttributeTexture.js","src/gpu/shaderFunctions.js","src/utils/StaticGeometryGenerator.js"],"sourcesContent":["/**\n * @license\n * Copyright 2010-2022 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '145';\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\nconst CullFaceNone = 0;\nconst CullFaceBack = 1;\nconst CullFaceFront = 2;\nconst CullFaceFrontBack = 3;\nconst BasicShadowMap = 0;\nconst PCFShadowMap = 1;\nconst PCFSoftShadowMap = 2;\nconst VSMShadowMap = 3;\nconst FrontSide = 0;\nconst BackSide = 1;\nconst DoubleSide = 2;\nconst NoBlending = 0;\nconst NormalBlending = 1;\nconst AdditiveBlending = 2;\nconst SubtractiveBlending = 3;\nconst MultiplyBlending = 4;\nconst CustomBlending = 5;\nconst AddEquation = 100;\nconst SubtractEquation = 101;\nconst ReverseSubtractEquation = 102;\nconst MinEquation = 103;\nconst MaxEquation = 104;\nconst ZeroFactor = 200;\nconst OneFactor = 201;\nconst SrcColorFactor = 202;\nconst OneMinusSrcColorFactor = 203;\nconst SrcAlphaFactor = 204;\nconst OneMinusSrcAlphaFactor = 205;\nconst DstAlphaFactor = 206;\nconst OneMinusDstAlphaFactor = 207;\nconst DstColorFactor = 208;\nconst OneMinusDstColorFactor = 209;\nconst SrcAlphaSaturateFactor = 210;\nconst NeverDepth = 0;\nconst AlwaysDepth = 1;\nconst LessDepth = 2;\nconst LessEqualDepth = 3;\nconst EqualDepth = 4;\nconst GreaterEqualDepth = 5;\nconst GreaterDepth = 6;\nconst NotEqualDepth = 7;\nconst MultiplyOperation = 0;\nconst MixOperation = 1;\nconst AddOperation = 2;\nconst NoToneMapping = 0;\nconst LinearToneMapping = 1;\nconst ReinhardToneMapping = 2;\nconst CineonToneMapping = 3;\nconst ACESFilmicToneMapping = 4;\nconst CustomToneMapping = 5;\n\nconst UVMapping = 300;\nconst CubeReflectionMapping = 301;\nconst CubeRefractionMapping = 302;\nconst EquirectangularReflectionMapping = 303;\nconst EquirectangularRefractionMapping = 304;\nconst CubeUVReflectionMapping = 306;\nconst RepeatWrapping = 1000;\nconst ClampToEdgeWrapping = 1001;\nconst MirroredRepeatWrapping = 1002;\nconst NearestFilter = 1003;\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004;\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005;\nconst LinearFilter = 1006;\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007;\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008;\nconst UnsignedByteType = 1009;\nconst ByteType = 1010;\nconst ShortType = 1011;\nconst UnsignedShortType = 1012;\nconst IntType = 1013;\nconst UnsignedIntType = 1014;\nconst FloatType = 1015;\nconst HalfFloatType = 1016;\nconst UnsignedShort4444Type = 1017;\nconst UnsignedShort5551Type = 1018;\nconst UnsignedInt248Type = 1020;\nconst AlphaFormat = 1021;\nconst RGBFormat = 1022; // @deprecated since r137\nconst RGBAFormat = 1023;\nconst LuminanceFormat = 1024;\nconst LuminanceAlphaFormat = 1025;\nconst DepthFormat = 1026;\nconst DepthStencilFormat = 1027;\nconst RedFormat = 1028;\nconst RedIntegerFormat = 1029;\nconst RGFormat = 1030;\nconst RGIntegerFormat = 1031;\nconst RGBAIntegerFormat = 1033;\n\nconst RGB_S3TC_DXT1_Format = 33776;\nconst RGBA_S3TC_DXT1_Format = 33777;\nconst RGBA_S3TC_DXT3_Format = 33778;\nconst RGBA_S3TC_DXT5_Format = 33779;\nconst RGB_PVRTC_4BPPV1_Format = 35840;\nconst RGB_PVRTC_2BPPV1_Format = 35841;\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\nconst RGB_ETC1_Format = 36196;\nconst RGB_ETC2_Format = 37492;\nconst RGBA_ETC2_EAC_Format = 37496;\nconst RGBA_ASTC_4x4_Format = 37808;\nconst RGBA_ASTC_5x4_Format = 37809;\nconst RGBA_ASTC_5x5_Format = 37810;\nconst RGBA_ASTC_6x5_Format = 37811;\nconst RGBA_ASTC_6x6_Format = 37812;\nconst RGBA_ASTC_8x5_Format = 37813;\nconst RGBA_ASTC_8x6_Format = 37814;\nconst RGBA_ASTC_8x8_Format = 37815;\nconst RGBA_ASTC_10x5_Format = 37816;\nconst RGBA_ASTC_10x6_Format = 37817;\nconst RGBA_ASTC_10x8_Format = 37818;\nconst RGBA_ASTC_10x10_Format = 37819;\nconst RGBA_ASTC_12x10_Format = 37820;\nconst RGBA_ASTC_12x12_Format = 37821;\nconst RGBA_BPTC_Format = 36492;\nconst LoopOnce = 2200;\nconst LoopRepeat = 2201;\nconst LoopPingPong = 2202;\nconst InterpolateDiscrete = 2300;\nconst InterpolateLinear = 2301;\nconst InterpolateSmooth = 2302;\nconst ZeroCurvatureEnding = 2400;\nconst ZeroSlopeEnding = 2401;\nconst WrapAroundEnding = 2402;\nconst NormalAnimationBlendMode = 2500;\nconst AdditiveAnimationBlendMode = 2501;\nconst TrianglesDrawMode = 0;\nconst TriangleStripDrawMode = 1;\nconst TriangleFanDrawMode = 2;\nconst LinearEncoding = 3000;\nconst sRGBEncoding = 3001;\nconst BasicDepthPacking = 3200;\nconst RGBADepthPacking = 3201;\nconst TangentSpaceNormalMap = 0;\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\nconst NoColorSpace = '';\nconst SRGBColorSpace = 'srgb';\nconst LinearSRGBColorSpace = 'srgb-linear';\n\nconst ZeroStencilOp = 0;\nconst KeepStencilOp = 7680;\nconst ReplaceStencilOp = 7681;\nconst IncrementStencilOp = 7682;\nconst DecrementStencilOp = 7683;\nconst IncrementWrapStencilOp = 34055;\nconst DecrementWrapStencilOp = 34056;\nconst InvertStencilOp = 5386;\n\nconst NeverStencilFunc = 512;\nconst LessStencilFunc = 513;\nconst EqualStencilFunc = 514;\nconst LessEqualStencilFunc = 515;\nconst GreaterStencilFunc = 516;\nconst NotEqualStencilFunc = 517;\nconst GreaterEqualStencilFunc = 518;\nconst AlwaysStencilFunc = 519;\n\nconst StaticDrawUsage = 35044;\nconst DynamicDrawUsage = 35048;\nconst StreamDrawUsage = 35040;\nconst StaticReadUsage = 35045;\nconst DynamicReadUsage = 35049;\nconst StreamReadUsage = 35041;\nconst StaticCopyUsage = 35046;\nconst DynamicCopyUsage = 35050;\nconst StreamCopyUsage = 35042;\n\nconst GLSL1 = '100';\nconst GLSL3 = '300 es';\n\nconst _SRGBAFormat = 1035; // fallback for WebGL 1\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nclass EventDispatcher {\n\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\thasEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\tremoveEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidean modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nvar MathUtils = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\tgenerateUUID: generateUUID,\n\tclamp: clamp,\n\teuclideanModulo: euclideanModulo,\n\tmapLinear: mapLinear,\n\tinverseLerp: inverseLerp,\n\tlerp: lerp,\n\tdamp: damp,\n\tpingpong: pingpong,\n\tsmoothstep: smoothstep,\n\tsmootherstep: smootherstep,\n\trandInt: randInt,\n\trandFloat: randFloat,\n\trandFloatSpread: randFloatSpread,\n\tseededRandom: seededRandom,\n\tdegToRad: degToRad,\n\tradToDeg: radToDeg,\n\tisPowerOfTwo: isPowerOfTwo,\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\tnormalize: normalize,\n\tdenormalize: denormalize\n});\n\nclass Vector2 {\n\n\tconstructor( x = 0, y = 0 ) {\n\n\t\tVector2.prototype.isVector2 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tangle() {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nclass Matrix3 {\n\n\tconstructor() {\n\n\t\tMatrix3.prototype.isMatrix3 = true;\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t}\n\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tscale( sx, sy ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t}\n\n\trotate( theta ) {\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tconst te = this.elements;\n\n\t\tconst a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tconst a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( tx, ty ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\n// JavaScript RGB-to-RGB transforms, defined as\n// FN[InputColorSpace][OutputColorSpace] callback functions.\nconst FN = {\n\t[ SRGBColorSpace ]: { [ LinearSRGBColorSpace ]: SRGBToLinear },\n\t[ LinearSRGBColorSpace ]: { [ SRGBColorSpace ]: LinearToSRGB },\n};\n\nconst ColorManagement = {\n\n\tlegacyMode: true,\n\n\tget workingColorSpace() {\n\n\t\treturn LinearSRGBColorSpace;\n\n\t},\n\n\tset workingColorSpace( colorSpace ) {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );\n\n\t},\n\n\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\n\n\t\tif ( this.legacyMode || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tif ( FN[ sourceColorSpace ] && FN[ sourceColorSpace ][ targetColorSpace ] !== undefined ) {\n\n\t\t\tconst fn = FN[ sourceColorSpace ][ targetColorSpace ];\n\n\t\t\tcolor.r = fn( color.r );\n\t\t\tcolor.g = fn( color.g );\n\t\t\tcolor.b = fn( color.b );\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tthrow new Error( 'Unsupported color space conversion.' );\n\n\t},\n\n\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\n\n\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\n\n\t},\n\n\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\n\n\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\n\n\t},\n\n};\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _rgb = { r: 0, g: 0, b: 0 };\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\nfunction toComponents( source, target ) {\n\n\ttarget.r = source.r;\n\ttarget.g = source.g;\n\ttarget.b = source.b;\n\n\treturn target;\n\n}\n\nclass Color {\n\n\tconstructor( r, g, b ) {\n\n\t\tthis.isColor = true;\n\n\t\tthis.r = 1;\n\t\tthis.g = 1;\n\t\tthis.b = 1;\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tset( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetRGB( r, g, b, colorSpace = LinearSRGBColorSpace ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetHSL( h, s, l, colorSpace = LinearSRGBColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tconst h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tconst s = parseFloat( color[ 2 ] ) / 100;\n\t\t\t\t\t\tconst l = parseFloat( color[ 3 ] ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l, colorSpace );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style, colorSpace );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex, colorSpace );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\tgetHex( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\n\n\t\treturn clamp( _rgb.r * 255, 0, 255 ) << 16 ^ clamp( _rgb.g * 255, 0, 255 ) << 8 ^ clamp( _rgb.b * 255, 0, 255 ) << 0;\n\n\t}\n\n\tgetHexString( colorSpace = SRGBColorSpace ) {\n\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\n\n\t}\n\n\tgetHSL( target, colorSpace = LinearSRGBColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\n\n\t\tconst r = _rgb.r, g = _rgb.g, b = _rgb.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\tgetRGB( target, colorSpace = LinearSRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\n\n\t\ttarget.r = _rgb.r;\n\t\ttarget.g = _rgb.g;\n\t\ttarget.b = _rgb.b;\n\n\t\treturn target;\n\n\t}\n\n\tgetStyle( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\n\n\t\tif ( colorSpace !== SRGBColorSpace ) {\n\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n\t\t\treturn `color(${ colorSpace } ${ _rgb.r } ${ _rgb.g } ${ _rgb.b })`;\n\n\t\t}\n\n\t\treturn `rgb(${( _rgb.r * 255 ) | 0},${( _rgb.g * 255 ) | 0},${( _rgb.b * 255 ) | 0})`;\n\n\t}\n\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\treturn this;\n\n\t}\n\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.r;\n\t\tyield this.g;\n\t\tyield this.b;\n\n\t}\n\n}\n\nColor.NAMES = _colorKeywords;\n\nlet _canvas;\n\nclass ImageUtils {\n\n\tstatic getDataURL( image ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\n\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t} else {\n\n\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t}\n\n\t}\n\n\tstatic sRGBToLinear( image ) {\n\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\tconst canvas = createElementNS( 'canvas' );\n\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\n\t\t\tconst data = imageData.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\t\treturn canvas;\n\n\t\t} else if ( image.data ) {\n\n\t\t\tconst data = image.data.slice( 0 );\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\n\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assuming float\n\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\n\t\t\treturn image;\n\n\t\t}\n\n\t}\n\n}\n\nclass Source {\n\n\tconstructor( data = null ) {\n\n\t\tthis.isSource = true;\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.data = data;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.images[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\t\t\tuuid: this.uuid,\n\t\t\turl: ''\n\t\t};\n\n\t\tconst data = this.data;\n\n\t\tif ( data !== null ) {\n\n\t\t\tlet url;\n\n\t\t\tif ( Array.isArray( data ) ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\turl = [];\n\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// texture\n\n\t\t\t\turl = serializeImage( data );\n\n\t\t\t}\n\n\t\t\toutput.url = url;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.images[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.from( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nlet textureId = 0;\n\nclass Texture extends EventDispatcher {\n\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {\n\n\t\tsuper();\n\n\t\tthis.isTexture = true;\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.source = new Source( image );\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping;\n\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.anisotropy = anisotropy;\n\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t\tthis.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not\n\t\tthis.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)\n\n\t}\n\n\tget image() {\n\n\t\treturn this.source.data;\n\n\t}\n\n\tset image( value ) {\n\n\t\tthis.source.data = value;\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.source = source.source;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\timage: this.source.toJSON( meta ).uuid,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\ttype: this.type,\n\t\t\tencoding: this.encoding,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.source.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nTexture.DEFAULT_IMAGE = null;\nTexture.DEFAULT_MAPPING = UVMapping;\n\nclass Vector4 {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tVector4.prototype.isVector4 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass WebGLRenderTarget extends EventDispatcher {\n\n\tconstructor( width, height, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.isWebGLRenderTarget = true;\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tconst image = { width: width, height: height, depth: 1 };\n\n\t\tthis.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.flipY = false;\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t\tthis.samples = options.samples !== undefined ? options.samples : 0;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = depth;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\t// ensure image object is not shared, see #20328\n\n\t\tconst image = Object.assign( {}, source.texture.image );\n\t\tthis.texture.source = new Source( image );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nclass DataArrayTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\tthis.isDataArrayTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, depth ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.isWebGLArrayRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass Data3DTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\tthis.isData3DTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, depth ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.isWebGL3DRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\n\tconstructor( width, height, count, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isWebGLMultipleRenderTargets = true;\n\n\t\tconst texture = this.texture;\n\n\t\tthis.texture = [];\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.texture[ i ] = texture.clone();\n\t\t\tthis.texture[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.texture.length; i < il; i ++ ) {\n\n\t\t\t\tthis.texture[ i ].image.width = width;\n\t\t\t\tthis.texture[ i ].image.height = height;\n\t\t\t\tthis.texture[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.dispose();\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.set( 0, 0, this.width, this.height );\n\t\tthis.scissor.set( 0, 0, this.width, this.height );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.texture.length = 0;\n\n\t\tfor ( let i = 0, il = source.texture.length; i < il; i ++ ) {\n\n\t\t\tthis.texture[ i ] = source.texture[ i ].clone();\n\t\t\tthis.texture[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.isQuaternion = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\nclass Vector3 {\n\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\tVector3.prototype.isVector3 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyEuler( euler ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t}\n\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$c.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$c );\n\n\t}\n\n\treflect( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\trandomDirection() {\n\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\n\t\tconst t = Math.random() * Math.PI * 2;\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\n\n\t\tthis.x = f * Math.cos( t );\n\t\tthis.y = f * Math.sin( t );\n\t\tthis.z = u;\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nconst _vector$c = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox3 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( precise && geometry.attributes != undefined && geometry.attributes.position !== undefined ) {\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tfor ( let i = 0, l = position.count; i < l; i ++ ) {\n\n\t\t\t\t\t_vector$b.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector$b );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy( geometry.boundingBox );\n\t\t\t\t_box$3.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box$3 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$b );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$3.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$3, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$3 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector$b ).length() * 0.5;\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\n\nconst _box$3 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _toFarthestPoint = /*@__PURE__*/ new Vector3();\nconst _toPoint = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$2.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.center.copy( point );\n\t\t\tthis.radius = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\n\t\t_toPoint.subVectors( point, this.center );\n\n\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\t\t\tconst missingRadiusHalf = ( length - this.radius ) * 0.5;\n\n\t\t\t// Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\tthis.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\n\t\t\tthis.radius += missingRadiusHalf;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\t// handle empty sphere cases\n\t\tif ( sphere.isEmpty() ) {\n\n\t\t\treturn this;\n\n\t\t} else if ( this.isEmpty() ) {\n\n\t\t\tthis.copy( sphere );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\n\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\n\t\t if ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t _toFarthestPoint.set( 0, 0, 1 ).multiplyScalar( sphere.radius );\n\n\n\t\t} else {\n\n\t\t\t_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\n\n\t\t}\n\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$a ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\treturn _vector$a.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$a.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$a.dot( this.direction );\n\t\tconst d2 = _vector$a.dot( _vector$a ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$a ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass Matrix4 {\n\n\tconstructor() {\n\n\t\tMatrix4.prototype.isMatrix4 = true;\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t}\n\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractRotation( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromEuler( euler ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\tmakeTranslation( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tmakePerspective( left, right, top, bottom, near, far ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\t\tconst c = - ( far + near ) / ( far - near );\n\t\tconst d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\tmakeOrthographic( left, right, top, bottom, near, far ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\t\tconst z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix$1 = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\nclass Euler {\n\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {\n\n\t\tthis.isEuler = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix$1.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix$1, order, update );\n\n\t}\n\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\treorder( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._order;\n\n\t}\n\n\t// @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53\n\n\ttoVector3() {\n\n\t\tconsole.error( 'THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead' );\n\n\t}\n\n}\n\nEuler.DefaultOrder = 'XYZ';\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nclass Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\tisEnabled( channel ) {\n\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\nconst _addedEvent = { type: 'added' };\nconst _removedEvent = { type: 'removed' };\n\nclass Object3D extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isObject3D = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.matrixWorldAutoUpdate = Object3D.DefaultMatrixWorldAutoUpdate; // checked by the renderer\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.animations = [];\n\n\t\tthis.userData = {};\n\n\t}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\tlocalToWorld( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\tworldToLocal( vector ) {\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclear() {\n\n\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\tconst object = this.children[ i ];\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\tthis.children.length = 0;\n\n\t\treturn this;\n\n\n\t}\n\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tthis.add( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\treturn this;\n\n\t}\n\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\traycast( /* raycaster, intersects */ ) {}\n\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tif ( child.matrixWorldAutoUpdate === true || force === true ) {\n\n\t\t\t\tchild.updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.parent === null ) {\n\n\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t} else {\n\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t}\n\n\t\t// update children\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tif ( child.matrixWorldAutoUpdate === true ) {\n\n\t\t\t\t\tchild.updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nObject3D.DefaultUp = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nObject3D.DefaultMatrixAutoUpdate = true;\nObject3D.DefaultMatrixWorldAutoUpdate = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$1 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3$1 );\n\n\t\treturn ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3$1 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3$1.x );\n\t\ttarget.addScaledVector( uv2, _v3$1.y );\n\t\ttarget.addScaledVector( uv3, _v3$1.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isMaterial = true;\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\n\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\n\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\t\tdata.colorWrite = this.colorWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshBasicMaterial = true;\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nclass BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.isBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$9.fromBufferAttribute( this, i );\n\t\t\t\t_vector$9.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.array[ index * this.itemSize ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.from( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\t\tif ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;\n\n\t\treturn data;\n\n\t}\n\n\t// @deprecated\n\n\tcopyColorsArray() {\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyColorsArray() was removed in r144.' );\n\n\t}\n\n\tcopyVector2sArray() {\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyVector2sArray() was removed in r144.' );\n\n\t}\n\n\tcopyVector3sArray() {\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyVector3sArray() was removed in r144.' );\n\n\t}\n\n\tcopyVector4sArray() {\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyVector4sArray() was removed in r144.' );\n\n\t}\n\n}\n\n//\n\nclass Int8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t\tthis.isFloat16BufferAttribute = true;\n\n\t}\n\n}\n\n\nclass Float32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float64BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id$1 = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$8 = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBufferGeometry = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _id$1 ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst position = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$1.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.min, _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.max, _box$1.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$1.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$1.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$8.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$8.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst indices = index.array;\n\t\tconst positions = attributes.position.array;\n\t\tconst normals = attributes.normal.array;\n\t\tconst uvs = attributes.uv.array;\n\n\t\tconst nVertices = positions.length / 3;\n\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tconst tangents = this.getAttribute( 'tangent' ).array;\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t// @deprecated since r144\n\n\tmerge() {\n\n\t\tconsole.error( 'THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead.' );\n\t\treturn this;\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$8.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\t return new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\t// geometry generator parameters\n\n\t\tif ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _tempB = /*@__PURE__*/ new Vector3();\nconst _tempC = /*@__PURE__*/ new Vector3();\n\nconst _morphA = /*@__PURE__*/ new Vector3();\nconst _morphB = /*@__PURE__*/ new Vector3();\nconst _morphC = /*@__PURE__*/ new Vector3();\n\nconst _uvA$1 = /*@__PURE__*/ new Vector2();\nconst _uvB$1 = /*@__PURE__*/ new Vector2();\nconst _uvC$1 = /*@__PURE__*/ new Vector2();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isMesh = true;\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t_sphere$3.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tlet intersection;\n\n\t\tconst index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\tconst uv = geometry.attributes.uv;\n\t\tconst uv2 = geometry.attributes.uv2;\n\t\tconst groups = geometry.groups;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\tif ( index !== null ) {\n\n\t\t\t// indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\t// non-indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = i;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t_vA$1.fromBufferAttribute( position, a );\n\t_vB$1.fromBufferAttribute( position, b );\n\t_vC$1.fromBufferAttribute( position, c );\n\n\tconst morphInfluences = object.morphTargetInfluences;\n\n\tif ( morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tconst influence = morphInfluences[ i ];\n\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );\n\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );\n\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_vA$1.add( _morphA );\n\t\t_vB$1.add( _morphB );\n\t\t_vC$1.add( _morphC );\n\n\t}\n\n\tif ( object.isSkinnedMesh ) {\n\n\t\tobject.boneTransform( a, _vA$1 );\n\t\tobject.boneTransform( b, _vB$1 );\n\t\tobject.boneTransform( c, _vC$1 );\n\n\t}\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv2, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv2, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nclass BoxGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\nfunction cloneUniformsGroups( src ) {\n\n\tconst dst = [];\n\n\tfor ( let u = 0; u < src.length; u ++ ) {\n\n\t\tdst.push( src[ u ].clone() );\n\n\t}\n\n\treturn dst;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShaderMaterial = true;\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.uniformsGroups = [];\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isCamera = true;\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass PerspectiveCamera extends Camera {\n\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isPerspectiveCamera = true;\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = - 0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst fov = 90, aspect = 1;\n\nclass CubeCamera extends Object3D {\n\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst renderTarget = this.renderTarget;\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst currentToneMapping = renderer.toneMapping;\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\trenderer.toneMapping = currentToneMapping;\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\trenderTarget.texture.needsPMREMUpdate = true;\n\n\t}\n\n}\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size, options = {} ) {\n\n\t\tsuper( size, size, options );\n\n\t\tthis.isWebGLCubeRenderTarget = true;\n\n\t\tconst image = { width: size, height: size, depth: 1 };\n\t\tconst images = [ image, image, image, image, image, image ];\n\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\tthis.isPlane = true;\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$2.center.set( 0, 0, 0 );\n\t\t_sphere$2.radius = 0.7071067811865476;\n\t\t_sphere$2.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$7 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nfunction WebGLAnimation() {\n\n\tlet context = null;\n\tlet isAnimating = false;\n\tlet animationLoop = null;\n\tlet requestId = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tanimationLoop( time, frame );\n\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLAttributes( gl, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tconst buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tlet type;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = 5126;\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\ttype = 5131;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = 5122;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = 5125;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = 5124;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = 5120;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = 5121;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = 5121;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t}\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\tconst cached = buffers.get( attribute );\n\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\tversion: attribute.version\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\nclass PlaneGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\\n    float x2 = x * x;\\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\n#ifdef USE_IRIDESCENCE\\n\\tvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\\n\\t\\tfloat alpha = pow2( roughness );\\n\\t\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\t\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\t\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\t\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\t\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\t\\tvec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t\\treturn F * ( V * D );\\n\\t}\\n#endif\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\";\n\nvar iridescence_fragment = \"#ifdef USE_IRIDESCENCE\\n\\tconst mat3 XYZ_TO_REC709 = mat3(\\n\\t\\t 3.2404542, -0.9692660,  0.0556434,\\n\\t\\t-1.5371385,  1.8760108, -0.2040259,\\n\\t\\t-0.4985314,  0.0415560,  1.0572252\\n\\t);\\n\\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\\n\\t\\tvec3 sqrtF0 = sqrt( fresnel0 );\\n\\t\\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\\n\\t}\\n\\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\\n\\t}\\n\\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\\n\\t}\\n\\tvec3 evalSensitivity( float OPD, vec3 shift ) {\\n\\t\\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\\n\\t\\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\\n\\t\\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\\n\\t\\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\\n\\t\\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\\n\\t\\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\\n\\t\\txyz /= 1.0685e-7;\\n\\t\\tvec3 rgb = XYZ_TO_REC709 * xyz;\\n\\t\\treturn rgb;\\n\\t}\\n\\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\\n\\t\\tvec3 I;\\n\\t\\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\\n\\t\\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\\n\\t\\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\\n\\t\\tif ( cosTheta2Sq < 0.0 ) {\\n\\t\\t\\t return vec3( 1.0 );\\n\\t\\t}\\n\\t\\tfloat cosTheta2 = sqrt( cosTheta2Sq );\\n\\t\\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\\n\\t\\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\\n\\t\\tfloat R21 = R12;\\n\\t\\tfloat T121 = 1.0 - R12;\\n\\t\\tfloat phi12 = 0.0;\\n\\t\\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\\n\\t\\tfloat phi21 = PI - phi12;\\n\\t\\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\\t\\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\\n\\t\\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\\n\\t\\tvec3 phi23 = vec3( 0.0 );\\n\\t\\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\\n\\t\\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\\n\\t\\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\\n\\t\\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\\n\\t\\tvec3 phi = vec3( phi21 ) + phi23;\\n\\t\\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\\n\\t\\tvec3 r123 = sqrt( R123 );\\n\\t\\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\\n\\t\\tvec3 C0 = R12 + Rs;\\n\\t\\tI = C0;\\n\\t\\tvec3 Cm = Rs - T121;\\n\\t\\tfor ( int m = 1; m <= 2; ++ m ) {\\n\\t\\t\\tCm *= r123;\\n\\t\\t\\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\\n\\t\\t\\tI += Cm * Sm;\\n\\t\\t}\\n\\t\\treturn max( I, vec3( 0.0 ) );\\n\\t}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos.xyz );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos.xyz );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nvec3 pow2( const in vec3 x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat luminance( const in vec3 rgb ) {\\n\\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\\n\\treturn dot( weights, rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\\n\\t\\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\\n\\t\\tuv.x *= CUBEUV_TEXEL_WIDTH;\\n\\t\\tuv.y *= CUBEUV_TEXEL_HEIGHT;\\n\\t\\t#ifdef texture2DGradEXT\\n\\t\\t\\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( envMap, uv ).rgb;\\n\\t\\t#endif\\n\\t}\\n\\t#define cubeUV_r0 1.0\\n\\t#define cubeUV_v0 0.339\\n\\t#define cubeUV_m0 - 2.0\\n\\t#define cubeUV_r1 0.8\\n\\t#define cubeUV_v1 0.276\\n\\t#define cubeUV_m1 - 1.0\\n\\t#define cubeUV_r4 0.4\\n\\t#define cubeUV_v4 0.046\\n\\t#define cubeUV_m4 2.0\\n\\t#define cubeUV_r5 0.305\\n\\t#define cubeUV_v5 0.016\\n\\t#define cubeUV_m5 3.0\\n\\t#define cubeUV_r6 0.21\\n\\t#define cubeUV_v6 0.0038\\n\\t#define cubeUV_m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= cubeUV_r1 ) {\\n\\t\\t\\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\\n\\t\\t} else if ( roughness >= cubeUV_r4 ) {\\n\\t\\t\\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\\n\\t\\t} else if ( roughness >= cubeUV_r5 ) {\\n\\t\\t\\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\\n\\t\\t} else if ( roughness >= cubeUV_r6 ) {\\n\\t\\t\\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar encodings_pars_fragment = \"vec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn vec3( texture2D( gradientMap, coord ).r );\\n\\t#else\\n\\t\\tvec2 fw = fwidth( coord ) * 0.5;\\n\\t\\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\\n\\t#endif\\n}\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_fragment = \"LambertMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_lambert_pars_fragment = \"varying vec3 vViewPosition;\\nstruct LambertMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Lambert\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Lambert\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec = reflect( - viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\tmaterial.ior = ior;\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\t\\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tmaterial.iridescence = iridescence;\\n\\tmaterial.iridescenceIOR = iridescenceIOR;\\n\\t#ifdef USE_IRIDESCENCEMAP\\n\\t\\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\t\\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\\n\\t#else\\n\\t\\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\\n\\t#endif\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\\n\\t#endif\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tfloat iridescence;\\n\\t\\tfloat iridescenceIOR;\\n\\t\\tfloat iridescenceThickness;\\n\\t\\tvec3 iridescenceFresnel;\\n\\t\\tvec3 iridescenceF0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n\\t#ifdef IOR\\n\\t\\tfloat ior;\\n\\t#endif\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat transmission;\\n\\t\\tfloat transmissionAlpha;\\n\\t\\tfloat thickness;\\n\\t\\tfloat attenuationDistance;\\n\\t\\tvec3 attenuationColor;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec3 sheenSpecular = vec3( 0.0 );\\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat r2 = roughness * roughness;\\n\\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\\n\\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\\n\\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\\n\\treturn saturate( DG * RECIPROCAL_PI );\\n}\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\n#ifdef USE_IRIDESCENCE\\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#else\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#endif\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\\n\\t#else\\n\\t\\tvec3 Fr = specularColor;\\n\\t#endif\\n\\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\\n\\t#else\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\\n\\t#else\\n\\t\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\t#endif\\n\\tvec3 totalScattering = singleScattering + multiScattering;\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\\n\\tif ( material.iridescenceThickness == 0.0 ) {\\n\\t\\tmaterial.iridescence = 0.0;\\n\\t} else {\\n\\t\\tmaterial.iridescence = saturate( material.iridescence );\\n\\t}\\n\\tif ( material.iridescence > 0.0 ) {\\n\\t\\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\\n\\t\\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\\n\\t}\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tvec4 spotColor;\\n\\tvec3 spotLightCoord;\\n\\tbool inSpotLightMap;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\\n\\t\\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\\n\\t\\t#else\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#endif\\n\\t\\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\\n\\t\\t\\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\\n\\t\\t\\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\\n\\t\\t\\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\\n\\t\\t\\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\\n\\t\\t#endif\\n\\t\\t#undef SPOT_LIGHT_MAP_INDEX\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 sampledDiffuseColor = texture2D( map, vUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\\n\\t#endif\\n\\tdiffuseColor *= sampledDiffuseColor;\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tdiffuseColor *= texture2D( map, uv );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\nvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphcolor_vertex = \"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\\n\\tvColor *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t#if defined( USE_COLOR_ALPHA )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t#elif defined( USE_COLOR )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform ivec2 morphTargetsTextureSize;\\n\\t\\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\\n\\t\\t\\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\\n\\t\\t\\tint y = texelIndex / morphTargetsTextureSize.x;\\n\\t\\t\\tint x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\\n\\t\\t\\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = dFdx( vViewPosition );\\n\\tvec3 fdy = dFdy( vViewPosition );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\nvar iridescence_pars_fragment = \"#ifdef USE_IRIDESCENCEMAP\\n\\tuniform sampler2D iridescenceMap;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform sampler2D iridescenceThicknessMap;\\n#endif\";\n\nvar output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#if NUM_SPOT_LIGHT_MAPS > 0\\n  uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n  uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\\n  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_COORDS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition;\\n\\t\\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t\\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\\n\\t\\t#endif\\n\\t\\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\tuniform highp sampler2D boneTexture;\\n\\tuniform int boneTextureSize;\\n\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\tfloat j = i * 4.0;\\n\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\ty = dy * ( y + 0.5 );\\n\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\treturn bone;\\n\\t}\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tmaterial.transmission = transmission;\\n\\tmaterial.transmissionAlpha = 1.0;\\n\\tmaterial.thickness = thickness;\\n\\tmaterial.attenuationDistance = attenuationDistance;\\n\\tmaterial.attenuationColor = attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tmaterial.transmission *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tmaterial.thickness *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\\n\\t\\tmaterial.attenuationColor, material.attenuationDistance );\\n\\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\\n#endif\";\n\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef texture2DLodEXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tif ( isinf( attenuationDistance ) ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\\n\\t\\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\\n\\t\\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\\n\\t\\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n\nvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\nvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nconst vertex$g = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nconst fragment$g = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tgl_FragColor = texture2D( t2D, vUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\\n\\t#endif\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$f = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$9 = \"#define LAMBERT\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_lambert_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_lambert_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n\\t#ifdef OPAQUE\\n\\t\\tgl_FragColor.a = 1.0;\\n\\t#endif\\n}\";\n\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tuniform float iridescence;\\n\\tuniform float iridescenceIOR;\\n\\tuniform float iridescenceThicknessMinimum;\\n\\tuniform float iridescenceThicknessMaximum;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <iridescence_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <iridescence_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_SHEEN\\n\\t\\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\\n\\t\\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\talphatest_pars_fragment: alphatest_pars_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tiridescence_fragment: iridescence_fragment,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_fragment: lights_lambert_fragment,\n\tlights_lambert_pars_fragment: lights_lambert_pars_fragment,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_toon_fragment: lights_toon_fragment,\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphcolor_vertex: morphcolor_vertex,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormal_pars_fragment: normal_pars_fragment,\n\tnormal_pars_vertex: normal_pars_vertex,\n\tnormal_vertex: normal_vertex,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\tiridescence_pars_fragment: iridescence_pars_fragment,\n\toutput_fragment: output_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\ttransmission_fragment: transmission_fragment,\n\ttransmission_pars_fragment: transmission_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_vert: vertex$g,\n\tbackground_frag: fragment$g,\n\tcube_vert: vertex$f,\n\tcube_frag: fragment$f,\n\tdepth_vert: vertex$e,\n\tdepth_frag: fragment$e,\n\tdistanceRGBA_vert: vertex$d,\n\tdistanceRGBA_frag: fragment$d,\n\tequirect_vert: vertex$c,\n\tequirect_frag: fragment$c,\n\tlinedashed_vert: vertex$b,\n\tlinedashed_frag: fragment$b,\n\tmeshbasic_vert: vertex$a,\n\tmeshbasic_frag: fragment$a,\n\tmeshlambert_vert: vertex$9,\n\tmeshlambert_frag: fragment$9,\n\tmeshmatcap_vert: vertex$8,\n\tmeshmatcap_frag: fragment$8,\n\tmeshnormal_vert: vertex$7,\n\tmeshnormal_frag: fragment$7,\n\tmeshphong_vert: vertex$6,\n\tmeshphong_frag: fragment$6,\n\tmeshphysical_vert: vertex$5,\n\tmeshphysical_frag: fragment$5,\n\tmeshtoon_vert: vertex$4,\n\tmeshtoon_frag: fragment$4,\n\tpoints_vert: vertex$3,\n\tpoints_frag: fragment$3,\n\tshadow_vert: vertex$2,\n\tshadow_frag: fragment$2,\n\tsprite_vert: vertex$1,\n\tsprite_frag: fragment$1\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tuv2Transform: { value: /*@__PURE__*/ new Matrix3() },\n\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 }\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\n\t\tior: { value: 1.5 }, // physical\n\t\trefractionRatio: { value: 0.98 } // basic, lambert, phong\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {}\n\t\t} },\n\n\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {}\n\t\t} },\n\n\t\tspotLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotLightMap: { value: [] },\n\t\tspotShadowMap: { value: [] },\n\t\tspotLightMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {}\n\t\t} },\n\n\t\tpointLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} },\n\n\t\tltc_1: { value: null },\n\t\tltc_2: { value: null }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t}\n\n};\n\nconst ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: /*@__PURE__*/ new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 1.0 },\n\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\ttoon: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\n\tcube: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.envmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: /*@__PURE__*/ new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: /*@__PURE__*/ new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatMap: { value: null },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\tclearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t\tiridescence: { value: 0 },\n\t\t\tiridescenceMap: { value: null },\n\t\t\tiridescenceIOR: { value: 1.3 },\n\t\t\tiridescenceThicknessMinimum: { value: 100 },\n\t\t\tiridescenceThicknessMaximum: { value: 400 },\n\t\t\tiridescenceThicknessMap: { value: null },\n\t\t\tsheen: { value: 0 },\n\t\t\tsheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tsheenColorMap: { value: null },\n\t\t\tsheenRoughness: { value: 1 },\n\t\t\tsheenRoughnessMap: { value: null },\n\t\t\ttransmission: { value: 0 },\n\t\t\ttransmissionMap: { value: null },\n\t\t\ttransmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },\n\t\t\ttransmissionSamplerMap: { value: null },\n\t\t\tthickness: { value: 0 },\n\t\t\tthicknessMap: { value: null },\n\t\t\tattenuationDistance: { value: 0 },\n\t\t\tattenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tspecularIntensity: { value: 1 },\n\t\t\tspecularIntensityMap: { value: null },\n\t\t\tspecularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },\n\t\t\tspecularColorMap: { value: null },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nfunction WebGLBackground( renderer, cubemaps, state, objects, alpha, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = alpha === true ? 0 : 1;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction render( renderList, scene ) {\n\n\t\tlet forceClear = false;\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tbackground = cubemaps.get( background );\n\n\t\t}\n\n\t\t// Ignore background in AR\n\t\t// TODO: Reconsider this.\n\n\t\tconst xr = renderer.xr;\n\t\tconst session = xr.getSession && xr.getSession();\n\n\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\tbackground = null;\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// add \"envMap\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tboxMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// add \"map\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tplaneMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha = 1 ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\nfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\tconst maxVertexAttributes = gl.getParameter( 34921 );\n\n\tconst extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\tconst bindingStates = {};\n\n\tconst defaultState = createBindingState( null );\n\tlet currentState = defaultState;\n\tlet forceUpdate = false;\n\n\tfunction setup( object, material, program, geometry, index ) {\n\n\t\tlet updateBuffers = false;\n\n\t\tif ( vaoAvailable ) {\n\n\t\t\tconst state = getBindingState( geometry, program, material );\n\n\t\t\tif ( currentState !== state ) {\n\n\t\t\t\tcurrentState = state;\n\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t}\n\n\t\t\tupdateBuffers = needsUpdate( object, geometry, program, index );\n\n\t\t\tif ( updateBuffers ) saveCache( object, geometry, program, index );\n\n\t\t} else {\n\n\t\t\tconst wireframe = ( material.wireframe === true );\n\n\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\tcurrentState.program = program.id;\n\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, 34963 );\n\n\t\t}\n\n\t\tif ( updateBuffers || forceUpdate ) {\n\n\t\t\tforceUpdate = false;\n\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tgl.bindBuffer( 34963, attributes.get( index ).buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVertexArrayObject() {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.createVertexArray();\n\n\t\treturn extension.createVertexArrayOES();\n\n\t}\n\n\tfunction bindVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );\n\n\t\treturn extension.bindVertexArrayOES( vao );\n\n\t}\n\n\tfunction deleteVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );\n\n\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t}\n\n\tfunction getBindingState( geometry, program, material ) {\n\n\t\tconst wireframe = ( material.wireframe === true );\n\n\t\tlet programMap = bindingStates[ geometry.id ];\n\n\t\tif ( programMap === undefined ) {\n\n\t\t\tprogramMap = {};\n\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t}\n\n\t\tlet stateMap = programMap[ program.id ];\n\n\t\tif ( stateMap === undefined ) {\n\n\t\t\tstateMap = {};\n\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t}\n\n\t\tlet state = stateMap[ wireframe ];\n\n\t\tif ( state === undefined ) {\n\n\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\tstateMap[ wireframe ] = state;\n\n\t\t}\n\n\t\treturn state;\n\n\t}\n\n\tfunction createBindingState( vao ) {\n\n\t\tconst newAttributes = [];\n\t\tconst enabledAttributes = [];\n\t\tconst attributeDivisors = [];\n\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\t\t\tenabledAttributes[ i ] = 0;\n\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false,\n\n\t\t\tnewAttributes: newAttributes,\n\t\t\tenabledAttributes: enabledAttributes,\n\t\t\tattributeDivisors: attributeDivisors,\n\t\t\tobject: vao,\n\t\t\tattributes: {},\n\t\t\tindex: null\n\n\t\t};\n\n\t}\n\n\tfunction needsUpdate( object, geometry, program, index ) {\n\n\t\tconst cachedAttributes = currentState.attributes;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tconst cachedAttribute = cachedAttributes[ name ];\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( cachedAttribute === undefined ) return true;\n\n\t\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\n\n\t\t\t\tif ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\n\n\t\tif ( currentState.index !== index ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction saveCache( object, geometry, program, index ) {\n\n\t\tconst cache = {};\n\t\tconst attributes = geometry.attributes;\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet attribute = attributes[ name ];\n\n\t\t\t\tif ( attribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif ( attribute && attribute.data ) {\n\n\t\t\t\t\tdata.data = attribute.data;\n\n\t\t\t\t}\n\n\t\t\t\tcache[ name ] = data;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentState.attributes = cache;\n\t\tcurrentState.attributesNum = attributesNum;\n\n\t\tcurrentState.index = index;\n\n\t}\n\n\tfunction initAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\tconst attributeDivisors = currentState.attributeDivisors;\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n\n\t\tif ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t} else {\n\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t}\n\n\t}\n\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tinitAttributes();\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tfunction dispose() {\n\n\t\treset();\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tfor ( const programId in programMap ) {\n\n\t\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t}\n\n\t}\n\n\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\n\n\t\tconst programMap = bindingStates[ geometry.id ];\n\n\t\tfor ( const programId in programMap ) {\n\n\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ programId ];\n\n\t\t}\n\n\t\tdelete bindingStates[ geometry.id ];\n\n\t}\n\n\tfunction releaseStatesOfProgram( program ) {\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\n\n\t\t\tconst stateMap = programMap[ program.id ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ program.id ];\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\tresetDefaultState();\n\t\tforceUpdate = true;\n\n\t\tif ( currentState === defaultState ) return;\n\n\t\tcurrentState = defaultState;\n\t\tbindVertexArrayObject( currentState.object );\n\n\t}\n\n\t// for backward-compatibility\n\n\tfunction resetDefaultState() {\n\n\t\tdefaultState.geometry = null;\n\t\tdefaultState.program = null;\n\t\tdefaultState.wireframe = false;\n\n\t}\n\n\treturn {\n\n\t\tsetup: setup,\n\t\treset: reset,\n\t\tresetDefaultState: resetDefaultState,\n\t\tdispose: dispose,\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t};\n\n}\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tlet maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tconst isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tconst maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tconst drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tconst maxTextures = gl.getParameter( 34930 );\n\tconst maxVertexTextures = gl.getParameter( 35660 );\n\tconst maxTextureSize = gl.getParameter( 3379 );\n\tconst maxCubemapSize = gl.getParameter( 34076 );\n\n\tconst maxAttributes = gl.getParameter( 34921 );\n\tconst maxVertexUniforms = gl.getParameter( 36347 );\n\tconst maxVaryings = gl.getParameter( 36348 );\n\tconst maxFragmentUniforms = gl.getParameter( 36349 );\n\n\tconst vertexTextures = maxVertexTextures > 0;\n\tconst floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\tconst maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\treturn {\n\n\t\tisWebGL2: isWebGL2,\n\n\t\tdrawBuffers: drawBuffers,\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\nfunction WebGLClipping( properties ) {\n\n\tconst scope = this;\n\n\tlet globalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false;\n\n\tconst plane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\tconst enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function ( material, camera, useCache ) {\n\n\t\tconst planes = material.clippingPlanes,\n\t\t\tclipIntersection = material.clipIntersection,\n\t\t\tclipShadows = material.clipShadows;\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\tlet dstArray = materialProperties.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\tlet dstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\tscope.numIntersection = 0;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemap = cubemaps.get( texture );\n\n\t\tif ( cubemap !== undefined ) {\n\n\t\t\tcubemaps.delete( texture );\n\t\t\tcubemap.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass OrthographicCamera extends Camera {\n\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isOrthographicCamera = true;\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst LOD_MIN = 4;\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._lodMax = 0;\n\t\tthis._cubeSize = 0;\n\t\tthis._lodPlanes = [];\n\t\tthis._sizeLods = [];\n\t\tthis._sigmas = [];\n\n\t\tthis._blurMaterial = null;\n\t\tthis._cubemapMaterial = null;\n\t\tthis._equirectMaterial = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\tthis._setSize( 256 );\n\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\t\tcubeUVRenderTarget.depthBuffer = true;\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\n\n\t\treturn this._fromTexture( equirectangular, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * or HDR. The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromCubemap( cubemap, renderTarget = null ) {\n\n\t\treturn this._fromTexture( cubemap, renderTarget );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileCubemapShader() {\n\n\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\t\t\tthis._compileMaterial( this._cubemapMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileEquirectangularShader() {\n\n\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\t\t\tthis._compileMaterial( this._equirectMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._dispose();\n\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\n\n\t}\n\n\t// private interface\n\n\t_setSize( cubeSize ) {\n\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\n\n\t}\n\n\t_dispose() {\n\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\n\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\n\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tthis._lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture, renderTarget ) {\n\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\n\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\n\n\t\t} else { // Equirectangular\n\n\t\t\tthis._setSize( texture.image.width / 4 );\n\n\t\t}\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets() {\n\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\n\t\tconst height = 4 * this._cubeSize;\n\n\t\tconst params = {\n\t\t\tmagFilter: LinearFilter,\n\t\t\tminFilter: LinearFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: HalfFloatType,\n\t\t\tformat: RGBAFormat,\n\t\t\tencoding: LinearEncoding,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\n\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width ) {\n\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\n\n\t\t\t\tthis._dispose();\n\n\t\t\t}\n\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\n\n\t\t\tconst { _lodMax } = this;\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );\n\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\n\n\t\t}\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tconst fov = 90;\n\t\tconst aspect = 1;\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tconst upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst toneMapping = renderer.toneMapping;\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.autoClear = false;\n\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\tname: 'PMREM.Background',\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false,\n\t\t\tdepthTest: false,\n\t\t} );\n\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundMaterial.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\n\t\t\tif ( col === 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col === 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\tconst size = this._cubeSize;\n\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\n\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\t\tif ( useSolidColor ) {\n\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\tbackgroundBox.geometry.dispose();\n\t\tbackgroundBox.material.dispose();\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\n\t\t\t}\n\n\t\t\tthis._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t} else {\n\n\t\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n\t\tconst mesh = new Mesh( this._lodPlanes[ 0 ], material );\n\n\t\tconst uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tconst size = this._cubeSize;\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tfor ( let i = 1; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tconst { _lodMax } = this;\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = _lodMax - lodIn;\n\n\t\tconst outputSize = this._sizeLods[ lodOut ];\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\n\n\nfunction _createPlanes( lodMax ) {\n\n\tconst lodPlanes = [];\n\tconst sizeLods = [];\n\tconst sigmas = [];\n\n\tlet lod = lodMax;\n\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\tfor ( let i = 0; i < totalLods; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\tsizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > lodMax - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\n\n\t\t} else if ( i === 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\tsigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\n\t\tconst min = - texelSize;\n\t\tconst max = 1 + texelSize;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : - 1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\tconst fill = [ face, face, face, face, face, face ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\tlodPlanes.push( planes );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { lodPlanes, sizeLods, sigmas };\n\n}\n\nfunction _createRenderTarget( width, height, params ) {\n\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getBlurShader( lodMax, width, height ) {\n\n\tconst weights = new Float32Array( MAX_SAMPLES );\n\tconst poleAxis = new Vector3( 0, 1, 0 );\n\tconst shaderMaterial = new ShaderMaterial( {\n\n\t\tname: 'SphericalGaussianBlur',\n\n\t\tdefines: {\n\t\t\t'n': MAX_SAMPLES,\n\t\t\t'CUBEUV_TEXEL_WIDTH': 1.0 / width,\n\t\t\t'CUBEUV_TEXEL_HEIGHT': 1.0 / height,\n\t\t\t'CUBEUV_MAX_MIP': `${lodMax}.0`,\n\t\t},\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'samples': { value: 1 },\n\t\t\t'weights': { value: weights },\n\t\t\t'latitudinal': { value: false },\n\t\t\t'dTheta': { value: 0 },\n\t\t\t'mipInt': { value: 0 },\n\t\t\t'poleAxis': { value: poleAxis }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getEquirectMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'EquirectangularToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCubemapMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'CubemapToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'flipEnvMap': { value: - 1 }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCommonVertexShader() {\n\n\treturn /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n\n}\n\nfunction WebGLCubeUVMaps( renderer ) {\n\n\tlet cubeUVmaps = new WeakMap();\n\n\tlet pmremGenerator = null;\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t\t\t// equirect/cube map to cubeUV conversion\n\n\t\t\tif ( isEquirectMap || isCubeMap ) {\n\n\t\t\t\tif ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {\n\n\t\t\t\t\ttexture.needsPMREMUpdate = false;\n\n\t\t\t\t\tlet renderTarget = cubeUVmaps.get( texture );\n\n\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\trenderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );\n\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( cubeUVmaps.has( texture ) ) {\n\n\t\t\t\t\t\treturn cubeUVmaps.get( texture ).texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n\n\t\t\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n\t\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction isCubeTextureComplete( image ) {\n\n\t\tlet count = 0;\n\t\tconst length = 6;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t\t}\n\n\t\treturn count === length;\n\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\n\n\t\tif ( cubemapUV !== undefined ) {\n\n\t\t\tcubeUVmaps.delete( texture );\n\t\t\tcubemapUV.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubeUVmaps = new WeakMap();\n\n\t\tif ( pmremGenerator !== null ) {\n\n\t\t\tpmremGenerator.dispose();\n\t\t\tpmremGenerator = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLExtensions( gl ) {\n\n\tconst extensions = {};\n\n\tfunction getExtension( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tlet extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t}\n\n\treturn {\n\n\t\thas: function ( name ) {\n\n\t\t\treturn getExtension( name ) !== null;\n\n\t\t},\n\n\t\tinit: function ( capabilities ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgetExtension( 'EXT_color_buffer_float' );\n\n\t\t\t} else {\n\n\t\t\t\tgetExtension( 'WEBGL_depth_texture' );\n\t\t\t\tgetExtension( 'OES_texture_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float_linear' );\n\t\t\t\tgetExtension( 'OES_standard_derivatives' );\n\t\t\t\tgetExtension( 'OES_element_index_uint' );\n\t\t\t\tgetExtension( 'OES_vertex_array_object' );\n\t\t\t\tgetExtension( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\tgetExtension( 'OES_texture_float_linear' );\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\n\t\t\tgetExtension( 'WEBGL_multisampled_render_to_texture' );\n\n\t\t},\n\n\t\tget: function ( name ) {\n\n\t\t\tconst extension = getExtension( name );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\tconst geometries = {};\n\tconst wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tconst geometry = event.target;\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tattributes.remove( geometry.index );\n\n\t\t}\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tattributes.remove( geometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tconst attribute = wireframeAttributes.get( geometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( geometry );\n\n\t\t}\n\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries[ geometry.id ] = true;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tconst indices = [];\n\n\t\tconst geometryIndex = geometry.index;\n\t\tconst geometryPosition = geometry.attributes.position;\n\t\tlet version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tconst array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = array[ i + 0 ];\n\t\t\t\tconst b = array[ i + 1 ];\n\t\t\t\tconst c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tconst a = i + 0;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t//\n\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tlet type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLInfo( gl ) {\n\n\tconst memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tconst render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 4:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase 0:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.frame ++;\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\nfunction numericalSort( a, b ) {\n\n\treturn a[ 0 ] - b[ 0 ];\n\n}\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\n\n\tconst influencesList = {};\n\tconst morphInfluences = new Float32Array( 8 );\n\tconst morphTextures = new WeakMap();\n\tconst morph = new Vector4();\n\n\tconst workInfluences = [];\n\n\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t}\n\n\tfunction update( object, geometry, material, program ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tif ( capabilities.isWebGL2 === true ) {\n\n\t\t\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t\t\t// into an array of data textures. Each layer represents a single morph target.\n\n\t\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t\tlet entry = morphTextures.get( geometry );\n\n\t\t\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\n\n\t\t\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\t\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\t\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\t\t\t\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n\t\t\t\tconst morphTargets = geometry.morphAttributes.position || [];\n\t\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\t\t\t\tconst morphColors = geometry.morphAttributes.color || [];\n\n\t\t\t\tlet vertexDataCount = 0;\n\n\t\t\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\n\t\t\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\n\t\t\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\n\n\t\t\t\tlet width = geometry.attributes.position.count * vertexDataCount;\n\t\t\t\tlet height = 1;\n\n\t\t\t\tif ( width > capabilities.maxTextureSize ) {\n\n\t\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\n\t\t\t\t\twidth = capabilities.maxTextureSize;\n\n\t\t\t\t}\n\n\t\t\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\n\n\t\t\t\tconst texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\n\t\t\t\ttexture.type = FloatType;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t// fill buffer\n\n\t\t\t\tconst vertexDataStride = vertexDataCount * 4;\n\n\t\t\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\n\n\t\t\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\t\t\tconst morphNormal = morphNormals[ i ];\n\t\t\t\t\tconst morphColor = morphColors[ i ];\n\n\t\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphColors === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphColor, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 8 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 9 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 10 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentry = {\n\t\t\t\t\tcount: morphTargetsCount,\n\t\t\t\t\ttexture: texture,\n\t\t\t\t\tsize: new Vector2( width, height )\n\t\t\t\t};\n\n\t\t\t\tmorphTextures.set( geometry, entry );\n\n\t\t\t\tfunction disposeTexture() {\n\n\t\t\t\t\ttexture.dispose();\n\n\t\t\t\t\tmorphTextures.delete( geometry );\n\n\t\t\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addEventListener( 'dispose', disposeTexture );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n\n\n\t\t} else {\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tlet influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined || influences.length !== length ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tif ( i < length && influences[ i ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = influences[ i ][ 0 ];\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = influences[ i ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tconst influence = workInfluences[ i ];\n\t\t\t\tconst index = influence[ 0 ];\n\t\t\t\tconst value = influence[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tlet updateMap = new WeakMap();\n\n\tfunction update( object ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\tconst geometry = object.geometry;\n\t\tconst buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\t\t}\n\n\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\tattributes.update( object.instanceColor, 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateMap = new WeakMap();\n\n\t}\n\n\tfunction onInstancedMeshDispose( event ) {\n\n\t\tconst instancedMesh = event.target;\n\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\tattributes.remove( instancedMesh.instanceMatrix );\n\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nconst emptyTexture = /*@__PURE__*/ new Texture();\nconst emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();\nconst empty3dTexture = /*@__PURE__*/ new Data3DTexture();\nconst emptyCubeTexture = /*@__PURE__*/ new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array( 16 );\nconst mat3array = new Float32Array( 9 );\nconst mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tconst firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tconst n = nBlocks * blockSize;\n\tlet r = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tlet r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t}\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single integer / boolean\n\nfunction setValueV1i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single integer / boolean vector (from flat array)\n\nfunction setValueV2i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1ui( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single unsigned integer vector (from flat array)\n\nfunction setValueV2ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || empty3dTexture, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTextureCube( v || emptyCubeTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyArrayTexture, unit );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\tcase 0x1405: return setValueV1ui; // UINT\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3D1;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArray1;\n\n\t}\n\n}\n\n\n// Array of scalars\n\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray( gl, v ) {\n\n\tgl.uniform1uiv( this.addr, v );\n\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray( gl, v ) {\n\n\tgl.uniform2uiv( this.addr, v );\n\n}\n\nfunction setValueV3uiArray( gl, v ) {\n\n\tgl.uniform3uiv( this.addr, v );\n\n}\n\nfunction setValueV4uiArray( gl, v ) {\n\n\tgl.uniform4uiv( this.addr, v );\n\n}\n\n\n// Array of textures (2D / 3D / Cube / 2DArray)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT3DArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT2DArrayArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );\n\n\t}\n\n}\n\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1Array;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3DArray;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6Array;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArrayArray;\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nclass SingleUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass PureArrayUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass StructuredUniform {\n\n\tconstructor( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tsetValue( gl, value, textures ) {\n\n\t\tconst seq = this.seq;\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t}\n\n}\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tconst path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tconst match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\tlet id = match[ 1 ];\n\t\tconst idIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tconst map = container.map;\n\t\t\tlet next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nclass WebGLUniforms {\n\n\tconstructor( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tconst n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( let i = 0; i < n; ++ i ) {\n\n\t\t\tconst info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tsetValue( gl, name, value, textures ) {\n\n\t\tconst u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n\t}\n\n\tsetOptional( gl, object, name ) {\n\n\t\tconst v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t}\n\n\tstatic upload( gl, seq, values, textures ) {\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic seqWithValue( seq, values ) {\n\n\t\tconst r = [];\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n}\n\nfunction WebGLShader( gl, type, string ) {\n\n\tconst shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\nlet programIdCount = 0;\n\nfunction handleSource( string, errorLine ) {\n\n\tconst lines = string.split( '\\n' );\n\tconst lines2 = [];\n\n\tconst from = Math.max( errorLine - 6, 0 );\n\tconst to = Math.min( errorLine + 6, lines.length );\n\n\tfor ( let i = from; i < to; i ++ ) {\n\n\t\tconst line = i + 1;\n\t\tlines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );\n\n\t}\n\n\treturn lines2.join( '\\n' );\n\n}\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n\t\t\treturn [ 'Linear', '( value )' ];\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tconst status = gl.getShaderParameter( shader, 35713 );\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && errors === '' ) return '';\n\n\tconst errorMatches = /ERROR: 0:(\\d+)/.exec( errors );\n\tif ( errorMatches ) {\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst errorLine = parseInt( errorMatches[ 1 ] );\n\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + handleSource( gl.getShaderSource( shader ), errorLine );\n\n\t} else {\n\n\t\treturn errors;\n\n\t}\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tconst components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tlet toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tcase CustomToneMapping:\n\t\t\ttoneMappingName = 'Custom';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\ttoneMappingName = 'Linear';\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( parameters ) {\n\n\tconst chunks = [\n\t\t( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tconst chunks = [];\n\n\tfor ( const name in defines ) {\n\n\t\tconst value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tconst attributes = {};\n\n\tconst n = gl.getProgramParameter( program, 35721 );\n\n\tfor ( let i = 0; i < n; i ++ ) {\n\n\t\tconst info = gl.getActiveAttrib( program, i );\n\t\tconst name = info.name;\n\n\t\tlet locationSize = 1;\n\t\tif ( info.type === 35674 ) locationSize = 2;\n\t\tif ( info.type === 35675 ) locationSize = 3;\n\t\tif ( info.type === 35676 ) locationSize = 4;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = {\n\t\t\ttype: info.type,\n\t\t\tlocation: gl.getAttribLocation( program, name ),\n\t\t\tlocationSize: locationSize\n\t\t};\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\tconst numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nfunction includeReplacer( match, include ) {\n\n\tconst string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string.replace( unrollLoopPattern, loopReplacer );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tlet string = '';\n\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\tif ( parameters.precision === 'highp' ) {\n\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\n\t} else if ( parameters.precision === 'mediump' ) {\n\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\n\t} else if ( parameters.precision === 'lowp' ) {\n\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters ) {\n\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters ) {\n\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeRefractionMapping:\n\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters ) {\n\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction generateCubeUVSize( parameters ) {\n\n\tconst imageHeight = parameters.envMapCubeUVHeight;\n\n\tif ( imageHeight === null ) return null;\n\n\tconst maxMip = Math.log2( imageHeight ) - 2;\n\n\tconst texelHeight = 1.0 / imageHeight;\n\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\n\n\treturn { texelWidth, texelHeight, maxMip };\n\n}\n\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t// TODO Send this event to Three.js DevTools\n\t// console.log( 'WebGLProgram', cacheKey );\n\n\tconst gl = renderer.getContext();\n\n\tconst defines = parameters.defines;\n\n\tlet vertexShader = parameters.vertexShader;\n\tlet fragmentShader = parameters.fragmentShader;\n\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\tconst envMapCubeUVSize = generateCubeUVSize( parameters );\n\n\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\tconst customDefines = generateDefines( defines );\n\n\tconst program = gl.createProgram();\n\n\tlet prefixVertex, prefixFragment;\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\tif ( parameters.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\n\n\t\t\t'\tattribute vec4 color;',\n\n\t\t\t'#elif defined( USE_COLOR )',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.iridescence ? '#define USE_IRIDESCENCE' : '',\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\t\t\tparameters.opaque ? '#define OPAQUE' : '',\n\n\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n\n\t\t\tparameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\tversionString = '#version 300 es\\n';\n\n\t\tprefixVertex = [\n\t\t\t'precision mediump sampler2DArray;',\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'#define varying in',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t}\n\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tconst glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\tconst glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\t// check for link errors\n\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\n\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tlet runnable = true;\n\t\tlet haveDiagnostics = true;\n\n\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\tconsole.error(\n\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\\n\\n' +\n\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\tfragmentErrors\n\t\t\t);\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// Clean up\n\n\t// Crashes in iOS9 and iOS10. #18402\n\t// gl.detachShader( program, glVertexShader );\n\t// gl.detachShader( program, glFragmentShader );\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tlet cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tlet cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.name = parameters.shaderName;\n\tthis.id = programIdCount ++;\n\tthis.cacheKey = cacheKey;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\nlet _id = 0;\n\nclass WebGLShaderCache {\n\n\tconstructor() {\n\n\t\tthis.shaderCache = new Map();\n\t\tthis.materialCache = new Map();\n\n\t}\n\n\tupdate( material ) {\n\n\t\tconst vertexShader = material.vertexShader;\n\t\tconst fragmentShader = material.fragmentShader;\n\n\t\tconst vertexShaderStage = this._getShaderStage( vertexShader );\n\t\tconst fragmentShaderStage = this._getShaderStage( fragmentShader );\n\n\t\tconst materialShaders = this._getShaderCacheForMaterial( material );\n\n\t\tif ( materialShaders.has( vertexShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( vertexShaderStage );\n\t\t\tvertexShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\tif ( materialShaders.has( fragmentShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( fragmentShaderStage );\n\t\t\tfragmentShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( material ) {\n\n\t\tconst materialShaders = this.materialCache.get( material );\n\n\t\tfor ( const shaderStage of materialShaders ) {\n\n\t\t\tshaderStage.usedTimes --;\n\n\t\t\tif ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );\n\n\t\t}\n\n\t\tthis.materialCache.delete( material );\n\n\t\treturn this;\n\n\t}\n\n\tgetVertexShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.vertexShader ).id;\n\n\t}\n\n\tgetFragmentShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.fragmentShader ).id;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shaderCache.clear();\n\t\tthis.materialCache.clear();\n\n\t}\n\n\t_getShaderCacheForMaterial( material ) {\n\n\t\tconst cache = this.materialCache;\n\t\tlet set = cache.get( material );\n\n\t\tif ( set === undefined ) {\n\n\t\t\tset = new Set();\n\t\t\tcache.set( material, set );\n\n\t\t}\n\n\t\treturn set;\n\n\t}\n\n\t_getShaderStage( code ) {\n\n\t\tconst cache = this.shaderCache;\n\t\tlet stage = cache.get( code );\n\n\t\tif ( stage === undefined ) {\n\n\t\t\tstage = new WebGLShaderStage( code );\n\t\t\tcache.set( code, stage );\n\n\t\t}\n\n\t\treturn stage;\n\n\t}\n\n}\n\nclass WebGLShaderStage {\n\n\tconstructor( code ) {\n\n\t\tthis.id = _id ++;\n\n\t\tthis.code = code;\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst _programLayers = new Layers();\n\tconst _customShaders = new WebGLShaderCache();\n\tconst programs = [];\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst vertexTextures = capabilities.vertexTextures;\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst geometry = object.geometry;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tlet morphTextureStride = 0;\n\n\t\tif ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;\n\t\tif ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;\n\t\tif ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;\n\n\t\t//\n\n\t\tlet vertexShader, fragmentShader;\n\t\tlet customVertexShaderID, customFragmentShaderID;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t\t_customShaders.update( material );\n\n\t\t\tcustomVertexShaderID = _customShaders.getVertexShaderID( material );\n\t\t\tcustomFragmentShaderID = _customShaders.getFragmentShaderID( material );\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst useAlphaTest = material.alphaTest > 0;\n\t\tconst useClearcoat = material.clearcoat > 0;\n\t\tconst useIridescence = material.iridescence > 0;\n\n\t\tconst parameters = {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderName: material.type,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tcustomVertexShaderID: customVertexShaderID,\n\t\t\tcustomFragmentShaderID: customFragmentShaderID,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\n\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\toutputEncoding: ( currentRenderTarget === null ) ? renderer.outputEncoding : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding ),\n\t\t\tmap: !! material.map,\n\t\t\tmatcap: !! material.matcap,\n\t\t\tenvMap: !! envMap,\n\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\tenvMapCubeUVHeight: envMapCubeUVHeight,\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\n\t\t\tdecodeVideoTexture: !! material.map && ( material.map.isVideoTexture === true ) && ( material.map.encoding === sRGBEncoding ),\n\n\t\t\tclearcoat: useClearcoat,\n\t\t\tclearcoatMap: useClearcoat && !! material.clearcoatMap,\n\t\t\tclearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,\n\t\t\tclearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,\n\n\t\t\tiridescence: useIridescence,\n\t\t\tiridescenceMap: useIridescence && !! material.iridescenceMap,\n\t\t\tiridescenceThicknessMap: useIridescence && !! material.iridescenceThicknessMap,\n\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\tspecularIntensityMap: !! material.specularIntensityMap,\n\t\t\tspecularColorMap: !! material.specularColorMap,\n\n\t\t\topaque: material.transparent === false && material.blending === NormalBlending,\n\n\t\t\talphaMap: !! material.alphaMap,\n\t\t\talphaTest: useAlphaTest,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: material.sheen > 0,\n\t\t\tsheenColorMap: !! material.sheenColorMap,\n\t\t\tsheenRoughnessMap: !! material.sheenRoughnessMap,\n\n\t\t\ttransmission: material.transmission > 0,\n\t\t\ttransmissionMap: !! material.transmissionMap,\n\t\t\tthicknessMap: !! material.thicknessMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( !! material.normalMap && !! geometry.attributes.tangent ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || !! material.sheenRoughnessMap,\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog === true,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: !! material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: object.isSkinnedMesh === true,\n\n\t\t\tmorphTargets: geometry.morphAttributes.position !== undefined,\n\t\t\tmorphNormals: geometry.morphAttributes.normal !== undefined,\n\t\t\tmorphColors: geometry.morphAttributes.color !== undefined,\n\t\t\tmorphTargetsCount: morphTargetsCount,\n\t\t\tmorphTextureStride: morphTextureStride,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumSpotLightMaps: lights.spotLightMap.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\tnumSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tuseDepthPacking: !! material.depthPacking,\n\t\t\tdepthPacking: material.depthPacking || 0,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( parameters.customVertexShaderID );\n\t\t\tarray.push( parameters.customFragmentShaderID );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tgetProgramCacheKeyParameters( array, parameters );\n\t\t\tgetProgramCacheKeyBooleans( array, parameters );\n\t\t\tarray.push( renderer.outputEncoding );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getProgramCacheKeyParameters( array, parameters ) {\n\n\t\tarray.push( parameters.precision );\n\t\tarray.push( parameters.outputEncoding );\n\t\tarray.push( parameters.envMapMode );\n\t\tarray.push( parameters.envMapCubeUVHeight );\n\t\tarray.push( parameters.combine );\n\t\tarray.push( parameters.vertexUvs );\n\t\tarray.push( parameters.fogExp2 );\n\t\tarray.push( parameters.sizeAttenuation );\n\t\tarray.push( parameters.morphTargetsCount );\n\t\tarray.push( parameters.morphAttributeCount );\n\t\tarray.push( parameters.numDirLights );\n\t\tarray.push( parameters.numPointLights );\n\t\tarray.push( parameters.numSpotLights );\n\t\tarray.push( parameters.numSpotLightMaps );\n\t\tarray.push( parameters.numHemiLights );\n\t\tarray.push( parameters.numRectAreaLights );\n\t\tarray.push( parameters.numDirLightShadows );\n\t\tarray.push( parameters.numPointLightShadows );\n\t\tarray.push( parameters.numSpotLightShadows );\n\t\tarray.push( parameters.numSpotLightShadowsWithMaps );\n\t\tarray.push( parameters.shadowMapType );\n\t\tarray.push( parameters.toneMapping );\n\t\tarray.push( parameters.numClippingPlanes );\n\t\tarray.push( parameters.numClipIntersection );\n\t\tarray.push( parameters.depthPacking );\n\n\t}\n\n\tfunction getProgramCacheKeyBooleans( array, parameters ) {\n\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.isWebGL2 )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.supportsVertexTextures )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.instancing )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.instancingColor )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.map )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.matcap )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.envMap )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.lightMap )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.aoMap )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.emissiveMap )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.bumpMap )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.normalMap )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.objectSpaceNormalMap )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.tangentSpaceNormalMap )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.clearcoat )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.clearcoatMap )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.clearcoatRoughnessMap )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.clearcoatNormalMap )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.iridescence )\n\t\t\t_programLayers.enable( 18 );\n\t\tif ( parameters.iridescenceMap )\n\t\t\t_programLayers.enable( 19 );\n\t\tif ( parameters.iridescenceThicknessMap )\n\t\t\t_programLayers.enable( 20 );\n\t\tif ( parameters.displacementMap )\n\t\t\t_programLayers.enable( 21 );\n\t\tif ( parameters.specularMap )\n\t\t\t_programLayers.enable( 22 );\n\t\tif ( parameters.roughnessMap )\n\t\t\t_programLayers.enable( 23 );\n\t\tif ( parameters.metalnessMap )\n\t\t\t_programLayers.enable( 24 );\n\t\tif ( parameters.gradientMap )\n\t\t\t_programLayers.enable( 25 );\n\t\tif ( parameters.alphaMap )\n\t\t\t_programLayers.enable( 26 );\n\t\tif ( parameters.alphaTest )\n\t\t\t_programLayers.enable( 27 );\n\t\tif ( parameters.vertexColors )\n\t\t\t_programLayers.enable( 28 );\n\t\tif ( parameters.vertexAlphas )\n\t\t\t_programLayers.enable( 29 );\n\t\tif ( parameters.vertexUvs )\n\t\t\t_programLayers.enable( 30 );\n\t\tif ( parameters.vertexTangents )\n\t\t\t_programLayers.enable( 31 );\n\t\tif ( parameters.uvsVertexOnly )\n\t\t\t_programLayers.enable( 32 );\n\n\t\tarray.push( _programLayers.mask );\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.fog )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.useFog )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.flatShading )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.logarithmicDepthBuffer )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.skinning )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.morphTargets )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.morphNormals )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.morphColors )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.premultipliedAlpha )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.shadowMapEnabled )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.physicallyCorrectLights )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.doubleSided )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.flipSided )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.useDepthPacking )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.dithering )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.specularIntensityMap )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.specularColorMap )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.transmission )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.transmissionMap )\n\t\t\t_programLayers.enable( 18 );\n\t\tif ( parameters.thicknessMap )\n\t\t\t_programLayers.enable( 19 );\n\t\tif ( parameters.sheen )\n\t\t\t_programLayers.enable( 20 );\n\t\tif ( parameters.sheenColorMap )\n\t\t\t_programLayers.enable( 21 );\n\t\tif ( parameters.sheenRoughnessMap )\n\t\t\t_programLayers.enable( 22 );\n\t\tif ( parameters.decodeVideoTexture )\n\t\t\t_programLayers.enable( 23 );\n\t\tif ( parameters.opaque )\n\t\t\t_programLayers.enable( 24 );\n\n\t\tarray.push( _programLayers.mask );\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\tfunction releaseShaderCache( material ) {\n\n\t\t_customShaders.remove( material );\n\n\t}\n\n\tfunction dispose() {\n\n\t\t_customShaders.dispose();\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\treleaseShaderCache: releaseShaderCache,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLProperties() {\n\n\tlet properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tlet map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList() {\n\n\tconst renderItems = [];\n\tlet renderItemsIndex = 0;\n\n\tconst opaque = [];\n\tconst transmissive = [];\n\tconst transparent = [];\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransmissive.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.push( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.unshift( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfunction finish() {\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\topaque: opaque,\n\t\ttransmissive: transmissive,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\t\tfinish: finish,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tlet lists = new WeakMap();\n\n\tfunction get( scene, renderCallDepth ) {\n\n\t\tconst listArray = lists.get( scene );\n\t\tlet list;\n\n\t\tif ( listArray === undefined ) {\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists.set( scene, [ list ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= listArray.length ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlistArray.push( list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = listArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction UniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nlet nextVersion = 0;\n\nfunction shadowCastingAndTexturingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );\n\n}\n\nfunction WebGLLights( extensions, capabilities ) {\n\n\tconst cache = new UniformsCache();\n\n\tconst shadowCache = ShadowUniformsCache();\n\n\tconst state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1,\n\t\t\tnumSpotMaps: - 1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotLightMap: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotLightMatrix: [],\n\t\trectArea: [],\n\t\trectAreaLTC1: null,\n\t\trectAreaLTC2: null,\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\t\tnumSpotLightShadowsWithMaps: 0\n\n\t};\n\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tconst vector3 = new Vector3();\n\tconst matrix4 = new Matrix4();\n\tconst matrix42 = new Matrix4();\n\n\tfunction setup( lights, physicallyCorrectLights ) {\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tlet numDirectionalShadows = 0;\n\t\tlet numPointShadows = 0;\n\t\tlet numSpotShadows = 0;\n\t\tlet numSpotMaps = 0;\n\t\tlet numSpotShadowsWithMaps = 0;\n\n\t\t// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]\n\t\tlights.sort( shadowCastingAndTexturingLightsFirst );\n\n\t\t// artist-friendly light intensity scaling factor\n\t\tconst scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tconst color = light.color;\n\t\t\tconst intensity = light.intensity;\n\t\t\tconst distance = light.distance;\n\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\tb += color.b * intensity * scaleFactor;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif ( light.map ) {\n\n\t\t\t\t\tstate.spotLightMap[ numSpotMaps ] = light.map;\n\t\t\t\t\tnumSpotMaps ++;\n\n\t\t\t\t\t// make sure the lightMatrix is up to date\n\t\t\t\t\t// TODO : do it if required only\n\t\t\t\t\tshadow.updateMatrices( light );\n\n\t\t\t\t\tif ( light.castShadow ) numSpotShadowsWithMaps ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spotLightMatrix[ spotLength ] = shadow.matrix;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t// WebGL 2\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t} else {\n\n\t\t\t\t// WebGL 1\n\n\t\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t\t} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tconst hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ||\n\t\t\thash.numSpotMaps !== numSpotMaps ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;\n\t\t\tstate.spotLightMap.length = numSpotMaps;\n\t\t\tstate.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\thash.numSpotMaps = numSpotMaps;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\tfunction setupView( lights, camera ) {\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = state.point[ pointLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tsetupView: setupView,\n\t\tstate: state\n\t};\n\n}\n\nfunction WebGLRenderState( extensions, capabilities ) {\n\n\tconst lights = new WebGLLights( extensions, capabilities );\n\n\tconst lightsArray = [];\n\tconst shadowsArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( physicallyCorrectLights ) {\n\n\t\tlights.setup( lightsArray, physicallyCorrectLights );\n\n\t}\n\n\tfunction setupLightsView( camera ) {\n\n\t\tlights.setupView( lightsArray, camera );\n\n\t}\n\n\tconst state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\t\tsetupLightsView: setupLightsView,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates( extensions, capabilities ) {\n\n\tlet renderStates = new WeakMap();\n\n\tfunction get( scene, renderCallDepth = 0 ) {\n\n\t\tconst renderStateArray = renderStates.get( scene );\n\t\tlet renderState;\n\n\t\tif ( renderStateArray === undefined ) {\n\n\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\trenderStates.set( scene, [ renderState ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= renderStateArray.length ) {\n\n\t\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\t\trenderStateArray.push( renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStateArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass MeshDepthMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDepthMaterial = true;\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshDistanceMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDistanceMaterial = true;\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\nfunction WebGLShadowMap( _renderer, _objects, _capabilities ) {\n\n\tlet _frustum = new Frustum();\n\n\tconst _shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\n\t\t_materialCache = {},\n\n\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\tconst shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\tconst shadowMaterialVertical = new ShaderMaterial( {\n\t\tdefines: {\n\t\t\tVSM_SAMPLES: 8\n\t\t},\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 }\n\t\t},\n\n\t\tvertexShader: vertex,\n\t\tfragmentShader: fragment\n\n\t} );\n\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\n\tconst fullScreenTri = new BufferGeometry();\n\tfullScreenTri.setAttribute(\n\t\t'position',\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\tconst scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\tconst _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\t\t\tconst shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tconst pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\n\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t\tshadow.needsUpdate = false;\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tconst geometry = _objects.update( fullScreenMesh );\n\n\t\tif ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\n\n\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n\n\t\t\tshadowMaterialVertical.needsUpdate = true;\n\t\t\tshadowMaterialHorizontal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( shadow.mapPass === null ) {\n\n\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );\n\n\t\t}\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizontal pass\n\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.map );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\tlet result = null;\n\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\tif ( customMaterial !== undefined ) {\n\n\t\t\tresult = customMaterial;\n\n\t\t} else {\n\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n\n\t\t}\n\n\t\tif ( ( _renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||\n\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\n\t\t\t( material.alphaMap && material.alphaTest > 0 ) ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tconst keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tlet materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.alphaMap = material.alphaMap;\n\t\tresult.alphaTest = material.alphaTest;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.displacementMap = material.displacementMap;\n\t\tresult.displacementScale = material.displacementScale;\n\t\tresult.displacementBias = material.displacementBias;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tconst geometry = _objects.update( object );\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ k ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n}\n\nfunction WebGLState( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction ColorBuffer() {\n\n\t\tlet locked = false;\n\n\t\tconst color = new Vector4();\n\t\tlet currentColorMask = null;\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentDepthMask = null;\n\t\tlet currentDepthFunc = null;\n\t\tlet currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentStencilMask = null;\n\t\tlet currentStencilFunc = null;\n\t\tlet currentStencilRef = null;\n\t\tlet currentStencilFuncMask = null;\n\t\tlet currentStencilFail = null;\n\t\tlet currentStencilZFail = null;\n\t\tlet currentStencilZPass = null;\n\t\tlet currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tconst colorBuffer = new ColorBuffer();\n\tconst depthBuffer = new DepthBuffer();\n\tconst stencilBuffer = new StencilBuffer();\n\n\tconst uboBindings = new WeakMap();\n\tconst uboProgamMap = new WeakMap();\n\n\tlet enabledCapabilities = {};\n\n\tlet currentBoundFramebuffers = {};\n\tlet currentDrawbuffers = new WeakMap();\n\tlet defaultDrawbuffers = [];\n\n\tlet currentProgram = null;\n\n\tlet currentBlendingEnabled = false;\n\tlet currentBlending = null;\n\tlet currentBlendEquation = null;\n\tlet currentBlendSrc = null;\n\tlet currentBlendDst = null;\n\tlet currentBlendEquationAlpha = null;\n\tlet currentBlendSrcAlpha = null;\n\tlet currentBlendDstAlpha = null;\n\tlet currentPremultipledAlpha = false;\n\n\tlet currentFlipSided = null;\n\tlet currentCullFace = null;\n\n\tlet currentLineWidth = null;\n\n\tlet currentPolygonOffsetFactor = null;\n\tlet currentPolygonOffsetUnits = null;\n\n\tconst maxTextures = gl.getParameter( 35661 );\n\n\tlet lineWidthAvailable = false;\n\tlet version = 0;\n\tconst glVersion = gl.getParameter( 7938 );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tlet currentTextureSlot = null;\n\tlet currentBoundTextures = {};\n\n\tconst scissorParam = gl.getParameter( 3088 );\n\tconst viewportParam = gl.getParameter( 2978 );\n\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tconst texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, 10241, 9728 );\n\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tconst emptyTextures = {};\n\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( 2929 );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( 2884 );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction bindFramebuffer( target, framebuffer ) {\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t// 36009 is equivalent to 36160\n\n\t\t\t\tif ( target === 36009 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36160 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t\tif ( target === 36160 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36009 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction drawBuffers( renderTarget, framebuffer ) {\n\n\t\tlet drawBuffers = defaultDrawbuffers;\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tdrawBuffers = currentDrawbuffers.get( framebuffer );\n\n\t\t\tif ( drawBuffers === undefined ) {\n\n\t\t\t\tdrawBuffers = [];\n\t\t\t\tcurrentDrawbuffers.set( framebuffer, drawBuffers );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tdrawBuffers[ i ] = 36064 + i;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdrawBuffers.length = textures.length;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( drawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\tdrawBuffers[ 0 ] = 36064;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( drawBuffers[ 0 ] !== 1029 ) {\n\n\t\t\t\tdrawBuffers[ 0 ] = 1029;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t\t} else {\n\n\t\t\t\textensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );\n\n\t\t\t}\n\n\t\t}\n\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tconst equationToGL = {\n\t\t[ AddEquation ]: 32774,\n\t\t[ SubtractEquation ]: 32778,\n\t\t[ ReverseSubtractEquation ]: 32779\n\t};\n\n\tif ( isWebGL2 ) {\n\n\t\tequationToGL[ MinEquation ] = 32775;\n\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t} else {\n\n\t\tconst extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t}\n\n\t}\n\n\tconst factorToGL = {\n\t\t[ ZeroFactor ]: 0,\n\t\t[ OneFactor ]: 1,\n\t\t[ SrcColorFactor ]: 768,\n\t\t[ SrcAlphaFactor ]: 770,\n\t\t[ SrcAlphaSaturateFactor ]: 776,\n\t\t[ DstColorFactor ]: 774,\n\t\t[ DstAlphaFactor ]: 772,\n\t\t[ OneMinusSrcColorFactor ]: 769,\n\t\t[ OneMinusSrcAlphaFactor ]: 771,\n\t\t[ OneMinusDstColorFactor ]: 775,\n\t\t[ OneMinusDstAlphaFactor ]: 773\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled === true ) {\n\n\t\t\t\tdisable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( currentBlendingEnabled === false ) {\n\n\t\t\tenable( 3042 );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 769, 0, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 769, 0, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = null;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( 2884 )\n\t\t\t: enable( 2884 );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? enable( 32926 )\n\t\t\t: disable( 32926 );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( 2884 );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 2884 );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( 32823 );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 32823 );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( 3089 );\n\n\t\t} else {\n\n\t\t\tdisable( 3089 );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture, webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\twebglSlot = 33984 + maxTextures - 1;\n\n\t\t\t} else {\n\n\t\t\t\twebglSlot = currentTextureSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ webglSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ webglSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\tfunction updateUBOMapping( uniformsGroup, program ) {\n\n\t\tlet mapping = uboProgamMap.get( program );\n\n\t\tif ( mapping === undefined ) {\n\n\t\t\tmapping = new WeakMap();\n\n\t\t\tuboProgamMap.set( program, mapping );\n\n\t\t}\n\n\t\tlet blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( blockIndex === undefined ) {\n\n\t\t\tblockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );\n\n\t\t\tmapping.set( uniformsGroup, blockIndex );\n\n\t\t}\n\n\t}\n\n\tfunction uniformBlockBinding( uniformsGroup, program ) {\n\n\t\tconst mapping = uboProgamMap.get( program );\n\t\tconst blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( uboBindings.get( uniformsGroup ) !== blockIndex ) {\n\n\t\t\t// bind shader specific block index to global block point\n\n\t\t\tgl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );\n\n\t\t\tuboBindings.set( uniformsGroup, blockIndex );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\t// reset state\n\n\t\tgl.disable( 3042 );\n\t\tgl.disable( 2884 );\n\t\tgl.disable( 2929 );\n\t\tgl.disable( 32823 );\n\t\tgl.disable( 3089 );\n\t\tgl.disable( 2960 );\n\t\tgl.disable( 32926 );\n\n\t\tgl.blendEquation( 32774 );\n\t\tgl.blendFunc( 1, 0 );\n\t\tgl.blendFuncSeparate( 1, 0, 1, 0 );\n\n\t\tgl.colorMask( true, true, true, true );\n\t\tgl.clearColor( 0, 0, 0, 0 );\n\n\t\tgl.depthMask( true );\n\t\tgl.depthFunc( 513 );\n\t\tgl.clearDepth( 1 );\n\n\t\tgl.stencilMask( 0xffffffff );\n\t\tgl.stencilFunc( 519, 0, 0xffffffff );\n\t\tgl.stencilOp( 7680, 7680, 7680 );\n\t\tgl.clearStencil( 0 );\n\n\t\tgl.cullFace( 1029 );\n\t\tgl.frontFace( 2305 );\n\n\t\tgl.polygonOffset( 0, 0 );\n\n\t\tgl.activeTexture( 33984 );\n\n\t\tgl.bindFramebuffer( 36160, null );\n\n\t\tif ( isWebGL2 === true ) {\n\n\t\t\tgl.bindFramebuffer( 36009, null );\n\t\t\tgl.bindFramebuffer( 36008, null );\n\n\t\t}\n\n\t\tgl.useProgram( null );\n\n\t\tgl.lineWidth( 1 );\n\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\t// reset internals\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBoundFramebuffers = {};\n\t\tcurrentDrawbuffers = new WeakMap();\n\t\tdefaultDrawbuffers = [];\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlendingEnabled = false;\n\t\tcurrentBlending = null;\n\t\tcurrentBlendEquation = null;\n\t\tcurrentBlendSrc = null;\n\t\tcurrentBlendDst = null;\n\t\tcurrentBlendEquationAlpha = null;\n\t\tcurrentBlendSrcAlpha = null;\n\t\tcurrentBlendDstAlpha = null;\n\t\tcurrentPremultipledAlpha = false;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcurrentLineWidth = null;\n\n\t\tcurrentPolygonOffsetFactor = null;\n\t\tcurrentPolygonOffsetUnits = null;\n\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tbindFramebuffer: bindFramebuffer,\n\t\tdrawBuffers: drawBuffers,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\tupdateUBOMapping: updateUBOMapping,\n\t\tuniformBlockBinding: uniformBlockBinding,\n\n\t\ttexStorage2D: texStorage2D,\n\t\ttexStorage3D: texStorage3D,\n\t\ttexSubImage2D: texSubImage2D,\n\t\ttexSubImage3D: texSubImage3D,\n\t\tcompressedTexSubImage2D: compressedTexSubImage2D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\n\tconst supportsInvalidateFramebuffer = /OculusBrowser/g.test( navigator.userAgent );\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo$1( image ) {\n\n\t\treturn isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, encoding, forceLinearEncoding = false ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === 6403 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33326;\n\t\t\tif ( glType === 5131 ) internalFormat = 33325;\n\t\t\tif ( glType === 5121 ) internalFormat = 33321;\n\n\t\t}\n\n\t\tif ( glFormat === 33319 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33328;\n\t\t\tif ( glType === 5131 ) internalFormat = 33327;\n\t\t\tif ( glType === 5121 ) internalFormat = 33323;\n\n\t\t}\n\n\t\tif ( glFormat === 6408 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34836;\n\t\t\tif ( glType === 5131 ) internalFormat = 34842;\n\t\t\tif ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding && forceLinearEncoding === false ) ? 35907 : 32856;\n\t\t\tif ( glType === 32819 ) internalFormat = 32854;\n\t\t\tif ( glType === 32820 ) internalFormat = 32855;\n\n\t\t}\n\n\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\tinternalFormat === 33327 || internalFormat === 33328 ||\n\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tfunction getMipLevels( texture, image, supportsMips ) {\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\n\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\n\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\n\n\t\t\t// user-defined mipmaps\n\n\t\t\treturn texture.mipmaps.length;\n\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\n\n\t\t\treturn image.mipmaps.length;\n\n\t\t} else {\n\n\t\t\t// texture without mipmaps (only base level)\n\n\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn 9728;\n\n\t\t}\n\n\t\treturn 9729;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t// check if it's necessary to remove the WebGLTexture object\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures ) {\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\t\t\twebglTexture.usedTimes --;\n\n\t\t\t// the WebGLTexture object is not used anymore, remove it\n\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\tdeleteTexture( texture );\n\n\t\t\t}\n\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\n\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\n\n\t\t\t\t_sources.delete( source );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deleteTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) {\n\n\t\t\t\tfor ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {\n\n\t\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\n\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\t\tinfo.memory.textures --;\n\n\t\t\t\t}\n\n\t\t\t\tproperties.remove( texture[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction getTextureCacheKey( texture ) {\n\n\t\tconst array = [];\n\n\t\tarray.push( texture.wrapS );\n\t\tarray.push( texture.wrapT );\n\t\tarray.push( texture.magFilter );\n\t\tarray.push( texture.minFilter );\n\t\tarray.push( texture.anisotropy );\n\t\tarray.push( texture.internalFormat );\n\t\tarray.push( texture.format );\n\t\tarray.push( texture.type );\n\t\tarray.push( texture.generateMipmaps );\n\t\tarray.push( texture.premultiplyAlpha );\n\t\tarray.push( texture.flipY );\n\t\tarray.push( texture.unpackAlignment );\n\t\tarray.push( texture.encoding );\n\n\t\treturn array.join();\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindTexture( 3553, textureProperties.__webglTexture, 33984 + slot );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( 35866, textureProperties.__webglTexture, 33984 + slot );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( 32879, textureProperties.__webglTexture, 33984 + slot );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture, 33984 + slot );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: 10497,\n\t\t[ ClampToEdgeWrapping ]: 33071,\n\t\t[ MirroredRepeatWrapping ]: 33648\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: 9728,\n\t\t[ NearestMipmapNearestFilter ]: 9984,\n\t\t[ NearestMipmapLinearFilter ]: 9986,\n\n\t\t[ LinearFilter ]: 9729,\n\t\t[ LinearMipmapNearestFilter ]: 9985,\n\t\t[ LinearMipmapLinearFilter ]: 9987\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tlet forceUpload = false;\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t}\n\n\t\t// create Source <-> WebGLTextures mapping if necessary\n\n\t\tconst source = texture.source;\n\t\tlet webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures === undefined ) {\n\n\t\t\twebglTextures = {};\n\t\t\t_sources.set( source, webglTextures );\n\n\t\t}\n\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\n\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\n\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\n\n\t\t\t// if not, create a new instance of WebGLTexture\n\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\n\n\t\t\t\t// create new entry\n\n\t\t\t\twebglTextures[ textureCacheKey ] = {\n\t\t\t\t\ttexture: _gl.createTexture(),\n\t\t\t\t\tusedTimes: 0\n\t\t\t\t};\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\n\t\t\t\t// even if the image contents are identical\n\n\t\t\t\tforceUpload = true;\n\n\t\t\t}\n\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\n\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\n\t\t\tif ( webglTexture !== undefined ) {\n\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\n\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\t\tdeleteTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// store references to cache key and WebGLTexture object\n\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\n\n\t\t}\n\n\t\treturn forceUpload;\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = 3553;\n\n\t\tif ( texture.isDataArrayTexture ) textureType = 35866;\n\t\tif ( texture.isData3DTexture ) textureType = 32879;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture, 33984 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;\n\t\t\tlet image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\t\t\timage = verifyColorSpace( texture, image );\n\n\t\t\tconst supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding );\n\n\t\t\tlet glType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tconst levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedIntType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, 1, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( 3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( 35866, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( 35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( 32879, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( 32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isFramebufferTexture ) {\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlet width = image.width, height = image.height;\n\n\t\t\t\t\t\tfor ( let i = 0; i < levels; i ++ ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t\t\t\t\twidth >>= 1;\n\t\t\t\t\t\t\theight >>= 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( 3553, 0, 0, 0, glFormat, glType, image );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture, 33984 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\n\n\t\t\t}\n\n\t\t\tconst image = cubeImage[ 0 ],\n\t\t\t\tsupportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tlet levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tlet mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( 34067, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\n\n\t\t\t\t\tstate.texStorage2D( 34067, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( 34067 );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\n\n\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\tif ( textureTarget === 32879 || textureTarget === 35866 ) {\n\n\t\t\t\tstate.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n\n\t\t} else {\n\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = 33189;\n\n\t\t\tif ( isMultisample || useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t} else {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 36096, 3553, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 33306, 3553, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// rebind framebuffer with external textures\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( colorTexture !== undefined ) {\n\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553 );\n\n\t\t}\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tif ( capabilities.drawBuffers ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tconst textures = isMultipleRenderTargets ? texture : [ texture ];\n\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = [];\n\n\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, renderTarget.isXRRenderTarget === true );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( 36160, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 34067 );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tconst textures = renderTarget.texture;\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( 3553, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, attachment, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = 3553;\n\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? 32879 : 35866;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];\n\t\t\tconst width = renderTarget.width;\n\t\t\tconst height = renderTarget.height;\n\t\t\tlet mask = 16384;\n\t\t\tconst invalidationArray = [];\n\t\t\tconst depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\n\t\t\t// If MRT we need to remove FBO attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, null );\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( 36009, 36064 + i, 3553, null, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tinvalidationArray.push( 36064 + i );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t}\n\n\t\t\t\tconst ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;\n\n\t\t\t\tif ( ignoreDepthValues === false ) {\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) mask |= 256;\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= 1024;\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36008, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ignoreDepthValues === true ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( 36008, [ depthStyle ] );\n\t\t\t\t\t_gl.invalidateFramebuffer( 36009, [ depthStyle ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\t\t\t\t\t_gl.framebufferTexture2D( 36009, 36064, 3553, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\tif ( supportsInvalidateFramebuffer ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( 36008, invalidationArray );\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( 36008, null );\n\t\t\tstate.bindFramebuffer( 36009, null );\n\n\t\t\t// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( 36009, 36064 + i, 3553, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn Math.min( maxSamples, renderTarget.samples );\n\n\t}\n\n\tfunction useMultisampledRTT( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\treturn isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tfunction verifyColorSpace( texture, image ) {\n\n\t\tconst encoding = texture.encoding;\n\t\tconst format = texture.format;\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;\n\n\t\tif ( encoding !== LinearEncoding ) {\n\n\t\t\t// sRGB\n\n\t\t\tif ( encoding === sRGBEncoding ) {\n\n\t\t\t\tif ( isWebGL2 === false ) {\n\n\t\t\t\t\t// in WebGL 1, try to use EXT_sRGB extension and unsized formats\n\n\t\t\t\t\tif ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {\n\n\t\t\t\t\t\ttexture.format = _SRGBAFormat;\n\n\t\t\t\t\t\t// it's not possible to generate mips in WebGL 1 with this extension\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// slow fallback (CPU decode)\n\n\t\t\t\t\t\timage = ImageUtils.sRGBToLinear( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n\t\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture encoding:', encoding );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.rebindTextures = rebindTextures;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\n\tthis.useMultisampledRTT = useMultisampledRTT;\n\n}\n\nfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction convert( p, encoding = null ) {\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return 5121;\n\t\tif ( p === UnsignedShort4444Type ) return 32819;\n\t\tif ( p === UnsignedShort5551Type ) return 32820;\n\n\t\tif ( p === ByteType ) return 5120;\n\t\tif ( p === ShortType ) return 5122;\n\t\tif ( p === UnsignedShortType ) return 5123;\n\t\tif ( p === IntType ) return 5124;\n\t\tif ( p === UnsignedIntType ) return 5125;\n\t\tif ( p === FloatType ) return 5126;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\tif ( isWebGL2 ) return 5131;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return 6406;\n\t\tif ( p === RGBAFormat ) return 6408;\n\t\tif ( p === LuminanceFormat ) return 6409;\n\t\tif ( p === LuminanceAlphaFormat ) return 6410;\n\t\tif ( p === DepthFormat ) return 6402;\n\t\tif ( p === DepthStencilFormat ) return 34041;\n\t\tif ( p === RedFormat ) return 6403;\n\n\t\t// @deprecated since r137\n\n\t\tif ( p === RGBFormat ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228' );\n\t\t\treturn 6408;\n\n\t\t}\n\n\t\t// WebGL 1 sRGB fallback\n\n\t\tif ( p === _SRGBAFormat ) {\n\n\t\t\textension = extensions.get( 'EXT_sRGB' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.SRGB_ALPHA_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedIntegerFormat ) return 36244;\n\t\tif ( p === RGFormat ) return 33319;\n\t\tif ( p === RGIntegerFormat ) return 33320;\n\t\tif ( p === RGBAIntegerFormat ) return 36249;\n\n\t\t// S3TC\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\tif ( encoding === sRGBEncoding ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// PVRTC\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC1\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC2\n\n\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC2_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ASTC\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// BPTC\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\tif ( isWebGL2 ) return 34042;\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n\t\treturn ( gl[ p ] !== undefined ) ? gl[ p ] : null;\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\nclass ArrayCamera extends PerspectiveCamera {\n\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\tthis.isArrayCamera = true;\n\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isGroup = true;\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nconst _moveEvent = { type: 'move' };\n\nclass WebXRController {\n\n\tconstructor() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\t\t\t\t\t\t// ??\n\t\t\t\t\t\thand.add( joint );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst joint = hand.joints[ inputjoint.jointName ];\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n\t\t\t\tif ( inputPose === null && gripPose !== null ) {\n\n\t\t\t\t\tinputPose = gripPose;\n\n\t\t\t\t}\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass DepthTexture extends Texture {\n\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedIntType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isDepthTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\n}\n\nclass WebXRManager extends EventDispatcher {\n\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\n\t\tlet session = null;\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\t\tlet customReferenceSpace = null;\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet xrFrame = null;\n\t\tconst attributes = gl.getContextAttributes();\n\t\tlet initialRenderTarget = null;\n\t\tlet newRenderTarget = null;\n\n\t\tconst controllers = [];\n\t\tconst controllerInputSources = [];\n\n\t\t//\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.cameraAutoUpdate = true;\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controllerIndex = controllerInputSources.indexOf( event.inputSource );\n\n\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\tif ( controller !== undefined ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tsession.removeEventListener( 'select', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeeze', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezestart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezeend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'end', onSessionEnd );\n\t\t\tsession.removeEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\n\t\t\t\tif ( inputSource === null ) continue;\n\n\t\t\t\tcontrollerInputSources[ i ] = null;\n\n\t\t\t\tcontrollers[ i ].disconnect( inputSource );\n\n\t\t\t}\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\trenderer.setRenderTarget( initialRenderTarget );\n\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\t\t\tnewRenderTarget = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn customReferenceSpace || referenceSpace;\n\n\t\t};\n\n\t\tthis.setReferenceSpace = function ( space ) {\n\n\t\t\tcustomReferenceSpace = space;\n\n\t\t};\n\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tinitialRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\t\tglBaseLayer.framebufferHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tencoding: renderer.outputEncoding,\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet depthFormat = null;\n\t\t\t\t\tlet depthType = null;\n\t\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tglDepthFormat = attributes.stencil ? 35056 : 33190;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\t\tdepthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: 32856,\n\t\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\tencoding: renderer.outputEncoding,\n\t\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0\n\t\t\t\t\t\t} );\n\n\t\t\t\t\tconst renderTargetProperties = renderer.properties.get( newRenderTarget );\n\t\t\t\t\trenderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;\n\n\t\t\t\t}\n\n\t\t\t\tnewRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278\n\n\t\t\t\t// Set foveation to maximum.\n\t\t\t\tthis.setFoveation( 1.0 );\n\n\t\t\t\tcustomReferenceSpace = null;\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst index = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( index >= 0 ) {\n\n\t\t\t\t\tcontrollerInputSources[ index ] = null;\n\t\t\t\t\tcontrollers[ index ].dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\n\t\t\t\tlet controllerIndex = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\t\t// Assign input source a controller that currently has no input source\n\n\t\t\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\t\t\tif ( i >= controllerInputSources.length ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources.push( inputSource );\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( controllerInputSources[ i ] === null ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources[ i ] = inputSource;\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// If all controllers do currently receive input we ignore new ones\n\n\t\t\t\t\tif ( controllerIndex === - 1 ) break;\n\n\t\t\t\t}\n\n\t\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tconst near2 = near + zOffset;\n\t\t\tconst far2 = far + zOffset;\n\t\t\tconst left2 = left - xOffset;\n\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\tthis.updateCamera = function ( camera ) {\n\n\t\t\tif ( session === null ) return;\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\tcameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );\n\n\t\t\t// update user camera and its children\n\n\t\t\tcamera.matrix.copy( cameraVR.matrix );\n\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\n\t\t\tconst children = camera.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getCamera = function () {\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\treturn glProjLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\treturn glBaseLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t};\n\n\t\tthis.setFoveation = function ( foveation ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( customReferenceSpace || referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\trenderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\n\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraVRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\trenderer.setRenderTargetTextures(\n\t\t\t\t\t\t\t\tnewRenderTarget,\n\t\t\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t\t\tglProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );\n\n\t\t\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet camera = cameras[ i ];\n\n\t\t\t\t\tif ( camera === undefined ) {\n\n\t\t\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\t\t\tcamera.layers.enable( i );\n\t\t\t\t\t\tcamera.viewport = new Vector4();\n\t\t\t\t\t\tcameras[ i ] = camera;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\t\t\t\tconst controller = controllers[ i ];\n\n\t\t\t\tif ( inputSource !== null && controller !== undefined ) {\n\n\t\t\t\t\tcontroller.update( inputSource, frame, customReferenceSpace || referenceSpace );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nfunction WebGLMaterials( renderer, properties ) {\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\n\t\t\t// artist-friendly light intensity scaling factor\n\t\t\tconst scaleFactor = ( renderer.physicallyCorrectLights !== true ) ? Math.PI : 1;\n\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. displacementMap map\n\t\t// 4. normal map\n\t\t// 5. bump map\n\t\t// 6. roughnessMap map\n\t\t// 7. metalnessMap map\n\t\t// 8. alphaMap map\n\t\t// 9. emissiveMap map\n\t\t// 10. clearcoat map\n\t\t// 11. clearcoat normal map\n\t\t// 12. clearcoat roughnessMap map\n\t\t// 13. iridescence map\n\t\t// 14. iridescence thickness map\n\t\t// 15. specular intensity map\n\t\t// 16. specular tint map\n\t\t// 17. transmission map\n\t\t// 18. thickness map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t} else if ( material.clearcoatMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatMap;\n\n\t\t} else if ( material.clearcoatNormalMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\n\t\t} else if ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\n\t\t} else if ( material.iridescenceMap ) {\n\n\t\t\tuvScaleMap = material.iridescenceMap;\n\n\t\t} else if ( material.iridescenceThicknessMap ) {\n\n\t\t\tuvScaleMap = material.iridescenceThicknessMap;\n\n\t\t} else if ( material.specularIntensityMap ) {\n\n\t\t\tuvScaleMap = material.specularIntensityMap;\n\n\t\t} else if ( material.specularColorMap ) {\n\n\t\t\tuvScaleMap = material.specularColorMap;\n\n\t\t} else if ( material.transmissionMap ) {\n\n\t\t\tuvScaleMap = material.transmissionMap;\n\n\t\t} else if ( material.thicknessMap ) {\n\n\t\t\tuvScaleMap = material.thicknessMap;\n\n\t\t} else if ( material.sheenColorMap ) {\n\n\t\t\tuvScaleMap = material.sheenColorMap;\n\n\t\t} else if ( material.sheenRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.sheenRoughnessMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities for uv2\n\t\t// 1. ao map\n\t\t// 2. light map\n\n\t\tlet uv2ScaleMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t} else if ( material.lightMap ) {\n\n\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t}\n\n\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.iridescence > 0 ) {\n\n\t\t\tuniforms.iridescence.value = material.iridescence;\n\t\t\tuniforms.iridescenceIOR.value = material.iridescenceIOR;\n\t\t\tuniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];\n\t\t\tuniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];\n\n\t\t\tif ( material.iridescenceMap ) {\n\n\t\t\t\tuniforms.iridescenceMap.value = material.iridescenceMap;\n\n\t\t\t}\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tuniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t}\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nfunction WebGLUniformsGroups( gl, info, capabilities, state ) {\n\n\tlet buffers = {};\n\tlet updateList = {};\n\tlet allocatedBindingPoints = [];\n\n\tconst maxBindingPoints = ( capabilities.isWebGL2 ) ? gl.getParameter( 35375 ) : 0; // binding points are global whereas block indices are per shader program\n\n\tfunction bind( uniformsGroup, program ) {\n\n\t\tconst webglProgram = program.program;\n\t\tstate.uniformBlockBinding( uniformsGroup, webglProgram );\n\n\t}\n\n\tfunction update( uniformsGroup, program ) {\n\n\t\tlet buffer = buffers[ uniformsGroup.id ];\n\n\t\tif ( buffer === undefined ) {\n\n\t\t\tprepareUniformsGroup( uniformsGroup );\n\n\t\t\tbuffer = createBuffer( uniformsGroup );\n\t\t\tbuffers[ uniformsGroup.id ] = buffer;\n\n\t\t\tuniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\t}\n\n\t\t// ensure to update the binding points/block indices mapping for this program\n\n\t\tconst webglProgram = program.program;\n\t\tstate.updateUBOMapping( uniformsGroup, webglProgram );\n\n\t\t// update UBO once per frame\n\n\t\tconst frame = info.render.frame;\n\n\t\tif ( updateList[ uniformsGroup.id ] !== frame ) {\n\n\t\t\tupdateBufferData( uniformsGroup );\n\n\t\t\tupdateList[ uniformsGroup.id ] = frame;\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( uniformsGroup ) {\n\n\t\t// the setup of an UBO is independent of a particular shader program but global\n\n\t\tconst bindingPointIndex = allocateBindingPointIndex();\n\t\tuniformsGroup.__bindingPointIndex = bindingPointIndex;\n\n\t\tconst buffer = gl.createBuffer();\n\t\tconst size = uniformsGroup.__size;\n\t\tconst usage = uniformsGroup.usage;\n\n\t\tgl.bindBuffer( 35345, buffer );\n\t\tgl.bufferData( 35345, size, usage );\n\t\tgl.bindBuffer( 35345, null );\n\t\tgl.bindBufferBase( 35345, bindingPointIndex, buffer );\n\n\t\treturn buffer;\n\n\t}\n\n\tfunction allocateBindingPointIndex() {\n\n\t\tfor ( let i = 0; i < maxBindingPoints; i ++ ) {\n\n\t\t\tif ( allocatedBindingPoints.indexOf( i ) === - 1 ) {\n\n\t\t\t\tallocatedBindingPoints.push( i );\n\t\t\t\treturn i;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconsole.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );\n\n\t\treturn 0;\n\n\t}\n\n\tfunction updateBufferData( uniformsGroup ) {\n\n\t\tconst buffer = buffers[ uniformsGroup.id ];\n\t\tconst uniforms = uniformsGroup.uniforms;\n\t\tconst cache = uniformsGroup.__cache;\n\n\t\tgl.bindBuffer( 35345, buffer );\n\n\t\tfor ( let i = 0, il = uniforms.length; i < il; i ++ ) {\n\n\t\t\tconst uniform = uniforms[ i ];\n\n\t\t\t// partly update the buffer if necessary\n\n\t\t\tif ( hasUniformChanged( uniform, i, cache ) === true ) {\n\n\t\t\t\tconst value = uniform.value;\n\t\t\t\tconst offset = uniform.__offset;\n\n\t\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\t\tuniform.__data[ 0 ] = value;\n\t\t\t\t\tgl.bufferSubData( 35345, offset, uniform.__data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( uniform.value.isMatrix3 ) {\n\n\t\t\t\t\t\t// manually converting 3x3 to 3x4\n\n\t\t\t\t\t\tuniform.__data[ 0 ] = uniform.value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 1 ] = uniform.value.elements[ 1 ];\n\t\t\t\t\t\tuniform.__data[ 2 ] = uniform.value.elements[ 2 ];\n\t\t\t\t\t\tuniform.__data[ 3 ] = uniform.value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 4 ] = uniform.value.elements[ 3 ];\n\t\t\t\t\t\tuniform.__data[ 5 ] = uniform.value.elements[ 4 ];\n\t\t\t\t\t\tuniform.__data[ 6 ] = uniform.value.elements[ 5 ];\n\t\t\t\t\t\tuniform.__data[ 7 ] = uniform.value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 8 ] = uniform.value.elements[ 6 ];\n\t\t\t\t\t\tuniform.__data[ 9 ] = uniform.value.elements[ 7 ];\n\t\t\t\t\t\tuniform.__data[ 10 ] = uniform.value.elements[ 8 ];\n\t\t\t\t\t\tuniform.__data[ 11 ] = uniform.value.elements[ 0 ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvalue.toArray( uniform.__data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgl.bufferSubData( 35345, offset, uniform.__data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.bindBuffer( 35345, null );\n\n\t}\n\n\tfunction hasUniformChanged( uniform, index, cache ) {\n\n\t\tconst value = uniform.value;\n\n\t\tif ( cache[ index ] === undefined ) {\n\n\t\t\t// cache entry does not exist so far\n\n\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\tcache[ index ] = value;\n\n\t\t\t} else {\n\n\t\t\t\tcache[ index ] = value.clone();\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// compare current value with cached entry\n\n\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\tif ( cache[ index ] !== value ) {\n\n\t\t\t\t\tcache[ index ] = value;\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst cachedObject = cache[ index ];\n\n\t\t\t\tif ( cachedObject.equals( value ) === false ) {\n\n\t\t\t\t\tcachedObject.copy( value );\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction prepareUniformsGroup( uniformsGroup ) {\n\n\t\t// determine total buffer size according to the STD140 layout\n\t\t// Hint: STD140 is the only supported layout in WebGL 2\n\n\t\tconst uniforms = uniformsGroup.uniforms;\n\n\t\tlet offset = 0; // global buffer offset in bytes\n\t\tconst chunkSize = 16; // size of a chunk in bytes\n\t\tlet chunkOffset = 0; // offset within a single chunk in bytes\n\n\t\tfor ( let i = 0, l = uniforms.length; i < l; i ++ ) {\n\n\t\t\tconst uniform = uniforms[ i ];\n\t\t\tconst info = getUniformSize( uniform );\n\n\t\t\t// the following two properties will be used for partial buffer updates\n\n\t\t\tuniform.__data = new Float32Array( info.storage / Float32Array.BYTES_PER_ELEMENT );\n\t\t\tuniform.__offset = offset;\n\n\t\t\t//\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\tchunkOffset = offset % chunkSize;\n\n\t\t\t\tconst remainingSizeInChunk = chunkSize - chunkOffset;\n\n\t\t\t\t// check for chunk overflow\n\n\t\t\t\tif ( chunkOffset !== 0 && ( remainingSizeInChunk - info.boundary ) < 0 ) {\n\n\t\t\t\t\t// add padding and adjust offset\n\n\t\t\t\t\toffset += ( chunkSize - chunkOffset );\n\t\t\t\t\tuniform.__offset = offset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset += info.storage;\n\n\t\t}\n\n\t\t// ensure correct final padding\n\n\t\tchunkOffset = offset % chunkSize;\n\n\t\tif ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );\n\n\t\t//\n\n\t\tuniformsGroup.__size = offset;\n\t\tuniformsGroup.__cache = {};\n\n\t\treturn this;\n\n\t}\n\n\tfunction getUniformSize( uniform ) {\n\n\t\tconst value = uniform.value;\n\n\t\tconst info = {\n\t\t\tboundary: 0, // bytes\n\t\t\tstorage: 0 // bytes\n\t\t};\n\n\t\t// determine sizes according to STD140\n\n\t\tif ( typeof value === 'number' ) {\n\n\t\t\t// float/int\n\n\t\t\tinfo.boundary = 4;\n\t\t\tinfo.storage = 4;\n\n\t\t} else if ( value.isVector2 ) {\n\n\t\t\t// vec2\n\n\t\t\tinfo.boundary = 8;\n\t\t\tinfo.storage = 8;\n\n\t\t} else if ( value.isVector3 || value.isColor ) {\n\n\t\t\t// vec3\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes\n\n\t\t} else if ( value.isVector4 ) {\n\n\t\t\t// vec4\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 16;\n\n\t\t} else if ( value.isMatrix3 ) {\n\n\t\t\t// mat3 (in STD140 a 3x3 matrix is represented as 3x4)\n\n\t\t\tinfo.boundary = 48;\n\t\t\tinfo.storage = 48;\n\n\t\t} else if ( value.isMatrix4 ) {\n\n\t\t\t// mat4\n\n\t\t\tinfo.boundary = 64;\n\t\t\tinfo.storage = 64;\n\n\t\t} else if ( value.isTexture ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );\n\n\t\t}\n\n\t\treturn info;\n\n\t}\n\n\tfunction onUniformsGroupsDispose( event ) {\n\n\t\tconst uniformsGroup = event.target;\n\n\t\tuniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\tconst index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );\n\t\tallocatedBindingPoints.splice( index, 1 );\n\n\t\tgl.deleteBuffer( buffers[ uniformsGroup.id ] );\n\n\t\tdelete buffers[ uniformsGroup.id ];\n\t\tdelete updateList[ uniformsGroup.id ];\n\n\t}\n\n\tfunction dispose() {\n\n\t\tfor ( const id in buffers ) {\n\n\t\t\tgl.deleteBuffer( buffers[ id ] );\n\n\t\t}\n\n\t\tallocatedBindingPoints = [];\n\t\tbuffers = {};\n\t\tupdateList = {};\n\n\t}\n\n\treturn {\n\n\t\tbind: bind,\n\t\tupdate: update,\n\n\t\tdispose: dispose\n\n\t};\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nfunction WebGLRenderer( parameters = {} ) {\n\n\tthis.isWebGLRenderer = true;\n\n\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\tlet _alpha;\n\n\tif ( _context !== null ) {\n\n\t\t_alpha = _context.getContextAttributes().alpha;\n\n\t} else {\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false;\n\n\t}\n\n\tlet currentRenderList = null;\n\tlet currentRenderState = null;\n\n\t// render() can be called from within a callback triggered by another render.\n\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\tconst renderListStack = [];\n\tconst renderStateStack = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\n\t// Debug configuration container\n\tthis.debug = {\n\n\t\t/**\n\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t * @type {boolean}\n\t\t */\n\t\tcheckShaderErrors: true\n\t};\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.outputEncoding = LinearEncoding;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = NoToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\n\t//\n\n\tObject.defineProperties( this, {\n\n\t\t// @deprecated since r136, 0e21088102b4de7e0a0a33140620b7a3424b9e6d\n\n\t\tgammaFactor: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );\n\t\t\t\treturn 2;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t// internal properties\n\n\tconst _this = this;\n\n\tlet _isContextLost = false;\n\n\t// internal state cache\n\n\tlet _currentActiveCubeFace = 0;\n\tlet _currentActiveMipmapLevel = 0;\n\tlet _currentRenderTarget = null;\n\tlet _currentMaterialId = - 1;\n\n\tlet _currentCamera = null;\n\n\tconst _currentViewport = new Vector4();\n\tconst _currentScissor = new Vector4();\n\tlet _currentScissorTest = null;\n\n\t//\n\n\tlet _width = _canvas.width;\n\tlet _height = _canvas.height;\n\n\tlet _pixelRatio = 1;\n\tlet _opaqueSort = null;\n\tlet _transparentSort = null;\n\n\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\tlet _scissorTest = false;\n\n\t// frustum\n\n\tconst _frustum = new Frustum();\n\n\t// clipping\n\n\tlet _clippingEnabled = false;\n\tlet _localClippingEnabled = false;\n\n\t// transmission\n\n\tlet _transmissionRenderTarget = null;\n\n\t// camera matrices cache\n\n\tconst _projScreenMatrix = new Matrix4();\n\n\tconst _vector2 = new Vector2();\n\tconst _vector3 = new Vector3();\n\n\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tlet _gl = _context;\n\n\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\tfor ( let i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\tconst contextName = contextNames[ i ];\n\t\t\tconst context = _canvas.getContext( contextName, contextAttributes );\n\t\t\tif ( context !== null ) return context;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\ttry {\n\n\t\tconst contextAttributes = {\n\t\t\talpha: true,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference,\n\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t};\n\n\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\tif ( 'setAttribute' in _canvas ) _canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t_canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tconst contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\tcontextNames.shift();\n\n\t\t\t}\n\n\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\tthrow error;\n\n\t}\n\n\tlet extensions, capabilities, state, info;\n\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\n\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\tlet utils, bindingStates, uniformsGroups;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\textensions.init( capabilities );\n\n\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\n\t\tinfo = new WebGLInfo();\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\n\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n\t\tclipping = new WebGLClipping( properties );\n\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n\t\tmaterials = new WebGLMaterials( _this, properties );\n\t\trenderLists = new WebGLRenderLists();\n\t\trenderStates = new WebGLRenderStates( extensions, capabilities );\n\t\tbackground = new WebGLBackground( _this, cubemaps, state, objects, _alpha, _premultipliedAlpha );\n\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\n\t\tuniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.shadowMap = shadowMap;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// xr\n\n\tconst xr = new WebXRManager( _this, _gl );\n\n\tthis.xr = xr;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function ( target ) {\n\n\t\treturn target.set( _width, _height );\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tif ( xr.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function ( target ) {\n\n\t\treturn target.copy( _currentViewport );\n\n\t};\n\n\tthis.getViewport = function ( target ) {\n\n\t\treturn target.copy( _viewport );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_viewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissor = function ( target ) {\n\n\t\treturn target.copy( _scissor );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_scissor.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn _scissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\tthis.setOpaqueSort = function ( method ) {\n\n\t\t_opaqueSort = method;\n\n\t};\n\n\tthis.setTransparentSort = function ( method ) {\n\n\t\t_transparentSort = method;\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function ( target ) {\n\n\t\treturn target.copy( background.getClearColor() );\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color = true, depth = true, stencil = true ) {\n\n\t\tlet bits = 0;\n\n\t\tif ( color ) bits |= 16384;\n\t\tif ( depth ) bits |= 256;\n\t\tif ( stencil ) bits |= 1024;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t_canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tcubemaps.dispose();\n\t\tcubeuvmaps.dispose();\n\t\tobjects.dispose();\n\t\tbindingStates.dispose();\n\t\tuniformsGroups.dispose();\n\t\tprogramCache.dispose();\n\n\t\txr.dispose();\n\n\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\n\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\n\n\t\tif ( _transmissionRenderTarget ) {\n\n\t\t\t_transmissionRenderTarget.dispose();\n\t\t\t_transmissionRenderTarget = null;\n\n\t\t}\n\n\t\tanimation.stop();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tconst infoAutoReset = info.autoReset;\n\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\tconst shadowMapType = shadowMap.type;\n\n\t\tinitGLContext();\n\n\t\tinfo.autoReset = infoAutoReset;\n\t\tshadowMap.enabled = shadowMapEnabled;\n\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\tshadowMap.type = shadowMapType;\n\n\t}\n\n\tfunction onContextCreationError( event ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tconst material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReferences( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReferences( material ) {\n\n\t\tconst programs = properties.get( material ).programs;\n\n\t\tif ( programs !== undefined ) {\n\n\t\t\tprograms.forEach( function ( program ) {\n\n\t\t\t\tprogramCache.releaseProgram( program );\n\n\t\t\t} );\n\n\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\tprogramCache.releaseShaderCache( material );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tconst program = setProgram( camera, scene, geometry, material, object );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t//\n\n\t\tlet index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\n\t\t//\n\n\t\tif ( index === null ) {\n\n\t\t\tif ( position === undefined || position.count === 0 ) return;\n\n\t\t} else if ( index.count === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t//\n\n\t\tlet rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\tlet attribute;\n\t\tlet renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\t//\n\n\t\tconst dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tconst drawStart = Math.max( rangeStart, groupStart );\n\t\tconst drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tconst drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( 0 );\n\n\t\t} else if ( object.isSprite ) {\n\n\t\t\trenderer.setMode( 4 );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\tconst instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tfunction prepare( material, scene, object ) {\n\n\t\t\tif ( material.transparent === true && material.side === DoubleSide ) {\n\n\t\t\t\tmaterial.side = BackSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t} else {\n\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentRenderState = renderStates.get( scene );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst material = object.material;\n\n\t\t\tif ( material ) {\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\tprepare( material2, scene, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tprepare( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\trenderStateStack.pop();\n\t\tcurrentRenderState = null;\n\n\t};\n\n\t// Animation Loop\n\n\tlet onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time ) {\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tfunction onXRSessionStart() {\n\n\t\tanimation.stop();\n\n\t}\n\n\tfunction onXRSessionEnd() {\n\n\t\tanimation.start();\n\n\t}\n\n\tconst animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tif ( typeof self !== 'undefined' ) animation.setContext( self );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\t\txr.setAnimationLoop( callback );\n\n\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t};\n\n\txr.addEventListener( 'sessionstart', onXRSessionStart );\n\txr.addEventListener( 'sessionend', onXRSessionEnd );\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost === true ) return;\n\n\t\t// update scene graph\n\n\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n\n\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\n\t\t}\n\n\t\t//\n\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n\n\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\n\t\tcurrentRenderList.init();\n\n\t\trenderListStack.push( currentRenderList );\n\n\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\tcurrentRenderList.finish();\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene );\n\n\t\t// render scene\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tconst cameras = camera.cameras;\n\n\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderScene( currentRenderList, scene, camera );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t// _gl.finish();\n\n\t\tbindingStates.resetDefaultState();\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\trenderStateStack.pop();\n\n\t\tif ( renderStateStack.length > 0 ) {\n\n\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderState = null;\n\n\t\t}\n\n\t\trenderListStack.pop();\n\n\t\tif ( renderListStack.length > 0 ) {\n\n\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderList = null;\n\n\t\t}\n\n\t};\n\n\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\n\n\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );\n\n\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n\n\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t}\n\n\tfunction renderTransmissionPass( opaqueObjects, scene, camera ) {\n\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tif ( _transmissionRenderTarget === null ) {\n\n\t\t\t_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {\n\t\t\t\tgenerateMipmaps: true,\n\t\t\t\ttype: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,\n\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\tsamples: ( isWebGL2 && _antialias === true ) ? 4 : 0\n\t\t\t} );\n\n\t\t}\n\n\t\t_this.getDrawingBufferSize( _vector2 );\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\t_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );\n\n\t\t} else {\n\n\t\t\t_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );\n\n\t\t}\n\n\t\t//\n\n\t\tconst currentRenderTarget = _this.getRenderTarget();\n\t\t_this.setRenderTarget( _transmissionRenderTarget );\n\t\t_this.clear();\n\n\t\t// Turn off the features which can affect the frag color for opaque objects pass.\n\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\t\tconst currentToneMapping = _this.toneMapping;\n\t\t_this.toneMapping = NoToneMapping;\n\n\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t_this.toneMapping = currentToneMapping;\n\n\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t_this.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\tconst object = renderItem.object;\n\t\t\tconst geometry = renderItem.geometry;\n\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\tconst group = renderItem.group;\n\n\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\n\n\t\tif ( material.transparent === true && material.side === DoubleSide ) {\n\n\t\t\tmaterial.side = BackSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = FrontSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = DoubleSide;\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t}\n\n\tfunction getProgram( material, scene, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tconst lights = currentRenderState.state.lights;\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tconst lightsStateVersion = lights.state.version;\n\n\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\tlet programs = materialProperties.programs;\n\n\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tmaterialProperties.fog = scene.fog;\n\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n\n\t\tif ( programs === undefined ) {\n\n\t\t\t// new material\n\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tprograms = new Map();\n\t\t\tmaterialProperties.programs = programs;\n\n\t\t}\n\n\t\tlet program = programs.get( programCacheKey );\n\n\t\tif ( program !== undefined ) {\n\n\t\t\t// early out if program and light state is identical\n\n\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n\n\t\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t\treturn program;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\tmaterial.onBuild( object, parameters, _this );\n\n\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\t\t\tprograms.set( programCacheKey, program );\n\n\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\n\t\t}\n\n\t\tconst uniforms = materialProperties.uniforms;\n\n\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n\n\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t}\n\n\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotLightMatrix.value = lights.state.spotLightMatrix;\n\t\t\tuniforms.spotLightMap.value = lights.state.spotLightMap;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tconst progUniforms = program.getUniforms();\n\t\tconst uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.currentProgram = program;\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\treturn program;\n\n\t}\n\n\tfunction updateCommonMaterialProperties( material, parameters ) {\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\tmaterialProperties.instancing = parameters.instancing;\n\t\tmaterialProperties.skinning = parameters.skinning;\n\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\tmaterialProperties.morphColors = parameters.morphColors;\n\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\t\tmaterialProperties.toneMapping = parameters.toneMapping;\n\n\t}\n\n\tfunction setProgram( camera, scene, geometry, material, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\ttextures.resetTextureUnits();\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tconst encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding );\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n\t\tconst vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;\n\t\tconst morphTargets = !! geometry.morphAttributes.position;\n\t\tconst morphNormals = !! geometry.morphAttributes.normal;\n\t\tconst morphColors = !! geometry.morphAttributes.color;\n\t\tconst toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tconst materialProperties = properties.get( material );\n\t\tconst lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled === true ) {\n\n\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\tconst useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet needsProgramChange = false;\n\n\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( material.fog === true && materialProperties.fog !== fog ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphColors !== morphColors ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.toneMapping !== toneMapping ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tneedsProgramChange = true;\n\t\t\tmaterialProperties.__version = material.version;\n\n\t\t}\n\n\t\t//\n\n\t\tlet program = materialProperties.currentProgram;\n\n\t\tif ( needsProgramChange === true ) {\n\n\t\t\tprogram = getProgram( material, scene, object );\n\n\t\t}\n\n\t\tlet refreshProgram = false;\n\t\tlet refreshMaterial = false;\n\t\tlet refreshLights = false;\n\n\t\tconst p_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\tobject.isSkinnedMesh ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning and morph target uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\n\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tconst skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tif ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t}\n\n\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t}\n\n\t\t// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512\n\n\t\tif ( material.isMeshGouraudMaterial && material.envMap !== null ) {\n\n\t\t\tm_uniforms.envMap.value = envMap;\n\n\t\t\tm_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog === true ) {\n\n\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t// UBOs\n\n\t\tif ( material.isShaderMaterial || material.isRawShaderMaterial ) {\n\n\t\t\tconst groups = material.uniformsGroups;\n\n\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\t\tuniformsGroups.update( group, program );\n\t\t\t\t\tuniformsGroups.bind( group, program );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\tfunction materialNeedsLights( material ) {\n\n\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t}\n\n\tthis.getActiveCubeFace = function () {\n\n\t\treturn _currentActiveCubeFace;\n\n\t};\n\n\tthis.getActiveMipmapLevel = function () {\n\n\t\treturn _currentActiveMipmapLevel;\n\n\t};\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {\n\n\t\tproperties.get( renderTarget.texture ).__webglTexture = colorTexture;\n\t\tproperties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\trenderTargetProperties.__hasExternalTextures = true;\n\n\t\tif ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\trenderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;\n\n\t\t\tif ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\t\t// The multisample_render_to_texture extension doesn't work properly if there\n\t\t\t\t// are midframe flushes and an external depth buffer. Disable use of the extension.\n\t\t\t\tif ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );\n\t\t\t\t\trenderTargetProperties.__useRenderToTexture = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\trenderTargetProperties.__webglFramebuffer = defaultFramebuffer;\n\t\trenderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\tlet useDefaultFramebuffer = true;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tif ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {\n\n\t\t\t\t// We need to make sure to rebind the framebuffer.\n\t\t\t\tstate.bindFramebuffer( 36160, null );\n\t\t\t\tuseDefaultFramebuffer = false;\n\n\t\t\t} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t} else if ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\t\t// Color and depth texture must be rebound in order for the swapchain to update.\n\t\t\t\ttextures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet framebuffer = null;\n\t\tlet isCube = false;\n\t\tlet isRenderTarget3D = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst texture = renderTarget.texture;\n\n\t\t\tif ( texture.isData3DTexture || texture.isDataArrayTexture ) {\n\n\t\t\t\tisRenderTarget3D = true;\n\n\t\t\t}\n\n\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tconst framebufferBound = state.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {\n\n\t\t\tstate.drawBuffers( renderTarget, framebuffer );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t} else if ( isRenderTarget3D ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\tconst layer = activeCubeFace || 0;\n\t\t\t_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\n\n\t\t}\n\n\t\t_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t}\n\n\t\tif ( framebuffer ) {\n\n\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\ttry {\n\n\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! halfFloatSupportedByExt ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\t// restore framebuffer of current render target if necessary\n\n\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level = 0 ) {\n\n\t\tconst levelScale = Math.pow( 2, - level );\n\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\tconst height = Math.floor( texture.image.height * levelScale );\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexSubImage2D( 3553, level, 0, 0, position.x, position.y, width, height );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tconst width = srcTexture.image.width;\n\t\tconst height = srcTexture.image.height;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\n\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t// As another texture upload may have changed pixelStorei\n\t\t// parameters, make sure they are correct for the dstTexture\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tif ( _this.isWebGL1Renderer ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\t\tlet glTarget;\n\n\t\tif ( dstTexture.isData3DTexture ) {\n\n\t\t\ttextures.setTexture3D( dstTexture, 0 );\n\t\t\tglTarget = 32879;\n\n\t\t} else if ( dstTexture.isDataArrayTexture ) {\n\n\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\n\t\t\tglTarget = 35866;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tconst unpackRowLen = _gl.getParameter( 3314 );\n\t\tconst unpackImageHeight = _gl.getParameter( 32878 );\n\t\tconst unpackSkipPixels = _gl.getParameter( 3316 );\n\t\tconst unpackSkipRows = _gl.getParameter( 3315 );\n\t\tconst unpackSkipImages = _gl.getParameter( 32877 );\n\n\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;\n\n\t\t_gl.pixelStorei( 3314, image.width );\n\t\t_gl.pixelStorei( 32878, image.height );\n\t\t_gl.pixelStorei( 3316, sourceBox.min.x );\n\t\t_gl.pixelStorei( 3315, sourceBox.min.y );\n\t\t_gl.pixelStorei( 32877, sourceBox.min.z );\n\n\t\tif ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {\n\n\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );\n\t\t\t\t_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.pixelStorei( 3314, unpackRowLen );\n\t\t_gl.pixelStorei( 32878, unpackImageHeight );\n\t\t_gl.pixelStorei( 3316, unpackSkipPixels );\n\t\t_gl.pixelStorei( 3315, unpackSkipRows );\n\t\t_gl.pixelStorei( 32877, unpackSkipImages );\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.initTexture = function ( texture ) {\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\ttextures.setTextureCube( texture, 0 );\n\n\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\ttextures.setTexture3D( texture, 0 );\n\n\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\ttextures.setTexture2DArray( texture, 0 );\n\n\t\t} else {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t}\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.resetState = function () {\n\n\t\t_currentActiveCubeFace = 0;\n\t\t_currentActiveMipmapLevel = 0;\n\t\t_currentRenderTarget = null;\n\n\t\tstate.reset();\n\t\tbindingStates.reset();\n\n\t};\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t}\n\n}\n\nclass WebGL1Renderer extends WebGLRenderer {}\n\nWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\nclass FogExp2 {\n\n\tconstructor( color, density = 0.00025 ) {\n\n\t\tthis.isFogExp2 = true;\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = density;\n\n\t}\n\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\nclass Fog {\n\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\tthis.isFog = true;\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\nclass Scene extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isScene = true;\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\t// @deprecated\n\n\tget autoUpdate() {\n\n\t\tconsole.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );\n\t\treturn this.matrixWorldAutoUpdate;\n\n\t}\n\n\tset autoUpdate( value ) {\n\n\t\tconsole.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );\n\t\tthis.matrixWorldAutoUpdate = value;\n\n\t}\n\n}\n\nclass InterleavedBuffer {\n\n\tconstructor( array, stride ) {\n\n\t\tthis.isInterleavedBuffer = true;\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\nclass InterleavedBufferAttribute {\n\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\tthis.isInterleavedBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.fromBufferAttribute( this, i );\n\n\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.fromBufferAttribute( this, i );\n\n\t\t\t_vector$6.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.fromBufferAttribute( this, i );\n\n\t\t\t_vector$6.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// deinterleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interleaved attribtue\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\nclass SpriteMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteMaterial = true;\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\nclass Sprite extends Object3D {\n\n\tconstructor( material ) {\n\n\t\tsuper();\n\n\t\tthis.isSprite = true;\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\nclass LOD extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tisLOD: {\n\t\t\t\tvalue: true,\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\taddLevel( object, distance = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector$5 = /*@__PURE__*/ new Vector3();\nconst _matrix = /*@__PURE__*/ new Matrix4();\n\nclass SkinnedMesh extends Mesh {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isSkinnedMesh = true;\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\treturn this;\n\n\t}\n\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\tboneTransform( index, target ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n\n\t\ttarget.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\ttarget.addScaledVector( _vector$5.copy( _basePosition ).applyMatrix4( _matrix ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n}\n\nclass Bone extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBone = true;\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\nclass DataTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.isDataTexture = true;\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\nclass Skeleton {\n\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\n\t\tthis.frame = - 1;\n\n\t\tthis.init();\n\n\t}\n\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = ceilPowerOfTwo( size );\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\tboneTexture.needsUpdate = true;\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\t\tthis.boneTextureSize = size;\n\n\t\treturn this;\n\n\t}\n\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\tthis.isInstancedBufferAttribute = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/ new Mesh();\n\nclass InstancedMesh extends Mesh {\n\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isInstancedMesh = true;\n\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\treturn this;\n\n\t}\n\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh.geometry = this.geometry;\n\t\t_mesh.material = this.material;\n\n\t\tif ( _mesh.material === undefined ) return;\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nclass LineBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineBasicMaterial = true;\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _start$1 = /*@__PURE__*/ new Vector3();\nconst _end$1 = /*@__PURE__*/ new Vector3();\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nclass Line extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isLine = true;\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i ] += _start$1.distanceTo( _end$1 );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst vStart = new Vector3();\n\t\tconst vEnd = new Vector3();\n\t\tconst interSegment = new Vector3();\n\t\tconst interRay = new Vector3();\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst a = index.getX( i );\n\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\tvStart.fromBufferAttribute( positionAttribute, a );\n\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, b );\n\n\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tvStart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\nclass LineSegments extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineSegments = true;\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [];\n\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineLoop extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineLoop = true;\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\nclass PointsMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isPointsMaterial = true;\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\nclass Points extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isPoints = true;\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\nclass VideoTexture extends Texture {\n\n\tconstructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isVideoTexture = true;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass FramebufferTexture extends Texture {\n\n\tconstructor( width, height, format ) {\n\n\t\tsuper( { width, height } );\n\n\t\tthis.isFramebufferTexture = true;\n\n\t\tthis.format = format;\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nclass CompressedTexture extends Texture {\n\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.isCompressedTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\nclass CanvasTexture extends Texture {\n\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isCanvasTexture = true;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * Extensible curve object.\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\nclass Curve {\n\n\tconstructor() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t}\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get total curve arc length\n\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping( u, distance ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\tcomputeFrenetFrames( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass EllipseCurve extends Curve {\n\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.isEllipseCurve = true;\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst point = optionalTarget || new Vector2();\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass ArcCurve extends EllipseCurve {\n\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.isArcCurve = true;\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\n/**\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = /*@__PURE__*/ new Vector3();\nconst px = /*@__PURE__*/ new CubicPoly();\nconst py = /*@__PURE__*/ new CubicPoly();\nconst pz = /*@__PURE__*/ new CubicPoly();\n\nclass CatmullRomCurve3 extends Curve {\n\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\tthis.isCatmullRomCurve3 = true;\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Bezier Curves formulas obtained from\n * https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nclass CubicBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isCubicBezierCurve = true;\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass CubicBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isCubicBezierCurve3 = true;\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineCurve extends Curve {\n\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isLineCurve = true;\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst tangent = optionalTarget || new Vector2();\n\n\t\ttangent.copy( this.v2 ).sub( this.v1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineCurve3 extends Curve {\n\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isQuadraticBezierCurve = true;\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isQuadraticBezierCurve3 = true;\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass SplineCurve extends Curve {\n\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\tthis.isSplineCurve = true;\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nclass CurvePath extends Curve {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t}\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength() {\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths() {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = curve.isEllipseCurve ? divisions * 2\n\t\t\t\t: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1\n\t\t\t\t\t: curve.isSplineCurve ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Path extends CurvePath {\n\n\tconstructor( points ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts /*Array of Vector*/ ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LatheGeometry extends BufferGeometry {\n\n\tconstructor( points = [ new Vector2( 0, - 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\t\tconst initNormals = [];\n\t\tconst normals = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tconst normal = new Vector3();\n\t\tconst curNormal = new Vector3();\n\t\tconst prevNormal = new Vector3();\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\n\t\t// pre-compute normals for initial \"meridian\"\n\n\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\tswitch ( j ) {\n\n\t\t\t\tcase 0:\t\t\t\t// special handling for 1st vertex on path\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tprevNormal.copy( normal );\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ( points.length - 1 ):\t// special handling for last Vertex on path\n\n\t\t\t\t\tinitNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\t\t\t// default handling for all vertices in between\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tcurNormal.copy( normal );\n\n\t\t\t\t\tnormal.x += prevNormal.x;\n\t\t\t\t\tnormal.y += prevNormal.y;\n\t\t\t\t\tnormal.z += prevNormal.z;\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tprevNormal.copy( curNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices, uvs and normals\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// normal\n\n\t\t\t\tconst x = initNormals[ 3 * j + 0 ] * sin;\n\t\t\t\tconst y = initNormals[ 3 * j + 1 ];\n\t\t\t\tconst z = initNormals[ 3 * j + 0 ] * cos;\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( c, d, b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\nclass CapsuleGeometry extends LatheGeometry {\n\n\tconstructor( radius = 1, length = 1, capSegments = 4, radialSegments = 8 ) {\n\n\t\tconst path = new Path();\n\t\tpath.absarc( 0, - length / 2, radius, Math.PI * 1.5, 0 );\n\t\tpath.absarc( 0, length / 2, radius, 0, Math.PI * 0.5 );\n\n\t\tsuper( path.getPoints( capSegments ), radialSegments );\n\n\t\tthis.type = 'CapsuleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: length,\n\t\t\tcapSegments: capSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CapsuleGeometry( data.radius, data.length, data.capSegments, data.radialSegments );\n\n\t}\n\n}\n\nclass CircleGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass CylinderGeometry extends BufferGeometry {\n\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ConeGeometry extends CylinderGeometry {\n\n\tconstructor( radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass PolyhedronGeometry extends BufferGeometry {\n\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1$1 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\nconst _triangle = /*@__PURE__*/ new Triangle();\n\nclass EdgesGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n}\n\nclass Shape extends Path {\n\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Port from https://github.com/mapbox/earcut (v2.2.2)\n */\n\nconst Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim = 2 ) {\n\n\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\n\t\tconst triangles = [];\n\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tlet i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tlet p = start,\n\t\tagain;\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tlet stop = ear,\n\t\tprev, next;\n\n\t// iterate through ears, slicing them one by one\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim );\n\t\t\ttriangles.push( ear.i / dim );\n\t\t\ttriangles.push( next.i / dim );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar( ear ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tlet p = ear.next.next;\n\n\twhile ( p !== ear.prev ) {\n\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t// z-order range for the current triangle bbox;\n\tconst minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\tlet p = ear.prevZ,\n\t\tn = ear.nextZ;\n\n\t// look for points inside the triangle in both directions\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\t// look for remaining points in decreasing z-order\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t}\n\n\t// look for remaining points in increasing z-order\n\twhile ( n && n.z <= maxZ ) {\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tconst a = p.prev,\n\t\t\tb = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim );\n\t\t\ttriangles.push( p.i / dim );\n\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t// remove two nodes involved\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn filterPoints( p );\n\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\tlet a = start;\n\tdo {\n\n\t\tlet b = a.next.next;\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\tlet c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tconst queue = [];\n\tlet i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\teliminateHole( queue[ i ], outerNode );\n\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and link it\nfunction eliminateHole( hole, outerNode ) {\n\n\touterNode = findHoleBridge( hole, outerNode );\n\tif ( outerNode ) {\n\n\t\tconst b = splitPolygon( outerNode, hole );\n\n\t\t// filter collinear points around the cuts\n\t\tfilterPoints( outerNode, outerNode.next );\n\t\tfilterPoints( b, b.next );\n\n\t}\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge( hole, outerNode ) {\n\n\tlet p = outerNode;\n\tconst hx = hole.x;\n\tconst hy = hole.y;\n\tlet qx = - Infinity, m;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t}\n\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\tif ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tconst stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y;\n\tlet tanMin = Infinity, tan;\n\n\tp = m;\n\n\tdo {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== stop );\n\n\treturn m;\n\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector( m, p ) {\n\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked( list ) {\n\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\n\t\tinSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\tx = 32767 * ( x - minX ) * invSize;\n\ty = 32767 * ( y - minY ) * invSize;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost( start ) {\n\n\tlet p = start,\n\t\tleftmost = start;\n\tdo {\n\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // doesn't intersect other edges\n\t\t( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n\t\t( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n\t\tequals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n}\n\n// signed area of a triangle\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tconst o1 = sign( area( p1, q1, p2 ) );\n\tconst o2 = sign( area( p1, q1, q2 ) );\n\tconst o3 = sign( area( p2, q2, p1 ) );\n\tconst o4 = sign( area( p2, q2, q1 ) );\n\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\n\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\treturn false;\n\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment( p, q, r ) {\n\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n}\n\nfunction sign( num ) {\n\n\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon( a, b ) {\n\n\tlet p = a;\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\tintersects( p, p.next, a, b ) ) return true;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside( a, b ) {\n\n\tlet p = a,\n\t\tinside = false;\n\tconst px = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\tinside = ! inside;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon( a, b ) {\n\n\tconst a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode( i, x, y, last ) {\n\n\tconst p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertex index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertex nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = null;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tlet sum = 0;\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\nclass ShapeUtils {\n\n\t// calculate area of the contour polygon\n\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  depth: <float>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n *  bevelOffset: <float>, // how far from shape outline does bevel start\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\nclass ExtrudeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tconst depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tdata.options = Object.assign( {}, options );\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\tt, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass RingGeometry extends BufferGeometry {\n\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ShapeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\nclass SphereGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass TorusGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\nclass TorusKnotGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\nclass TubeGeometry extends BufferGeometry {\n\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\nclass WireframeGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1 );\n\t\tedges.add( hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tCapsuleGeometry: CapsuleGeometry,\n\tCircleGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\nclass ShadowMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShadowMaterial = true;\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass RawShaderMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.isRawShaderMaterial = true;\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nclass MeshStandardMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshStandardMaterial = true;\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalMaterial = true;\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.ior = 1.5;\n\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.iridescenceMap = null;\n\t\tthis.iridescenceIOR = 1.3;\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\n\t\tthis.iridescenceThicknessMap = null;\n\n\t\tthis.sheenColor = new Color( 0x000000 );\n\t\tthis.sheenColorMap = null;\n\t\tthis.sheenRoughness = 1.0;\n\t\tthis.sheenRoughnessMap = null;\n\n\t\tthis.transmissionMap = null;\n\n\t\tthis.thickness = 0;\n\t\tthis.thicknessMap = null;\n\t\tthis.attenuationDistance = Infinity;\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\tthis.specularIntensity = 1.0;\n\t\tthis.specularIntensityMap = null;\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\t\tthis.specularColorMap = null;\n\n\t\tthis._sheen = 0.0;\n\t\tthis._clearcoat = 0;\n\t\tthis._iridescence = 0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\n\tget iridescence() {\n\n\t\treturn this._iridescence;\n\n\t}\n\n\tset iridescence( value ) {\n\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._iridescence = value;\n\n\t}\n\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.ior = source.ior;\n\n\t\tthis.iridescence = source.iridescence;\n\t\tthis.iridescenceMap = source.iridescenceMap;\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhongMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhongMaterial = true;\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshToonMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshToonMaterial = true;\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshNormalMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshNormalMaterial = true;\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshLambertMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshLambertMaterial = true;\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshMatcapMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshMatcapMaterial = true;\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineDashedMaterial = true;\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// same as Array.prototype.slice, but also works on typed arrays\nfunction arraySlice( array, from, to ) {\n\n\tif ( isTypedArray( array ) ) {\n\n\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t}\n\n\treturn array.slice( from, to );\n\n}\n\n// converts an array to a specific type\nfunction convertArray( array, type, forceClone ) {\n\n\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t! forceClone && array.constructor === type ) return array;\n\n\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\treturn new type( array ); // create typed array\n\n\t}\n\n\treturn Array.prototype.slice.call( array ); // create Array\n\n}\n\nfunction isTypedArray( object ) {\n\n\treturn ArrayBuffer.isView( object ) &&\n\t\t! ( object instanceof DataView );\n\n}\n\n// returns an array by which times and values can be sorted\nfunction getKeyframeOrder( times ) {\n\n\tfunction compareTime( i, j ) {\n\n\t\treturn times[ i ] - times[ j ];\n\n\t}\n\n\tconst n = times.length;\n\tconst result = new Array( n );\n\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\tresult.sort( compareTime );\n\n\treturn result;\n\n}\n\n// uses the array previously returned by 'getKeyframeOrder' to sort data\nfunction sortedArray( values, stride, order ) {\n\n\tconst nValues = values.length;\n\tconst result = new values.constructor( nValues );\n\n\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\tconst srcOffset = order[ i ] * stride;\n\n\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n// function for parsing AOS keyframe formats\nfunction flattenJSON( jsonKeys, times, values, valuePropertyName ) {\n\n\tlet i = 1, key = jsonKeys[ 0 ];\n\n\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\tkey = jsonKeys[ i ++ ];\n\n\t}\n\n\tif ( key === undefined ) return; // no data\n\n\tlet value = key[ valuePropertyName ];\n\tif ( value === undefined ) return; // no data\n\n\tif ( Array.isArray( value ) ) {\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else if ( value.toArray !== undefined ) {\n\n\t\t// ...assume THREE.Math-ish\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else {\n\n\t\t// otherwise push as-is\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( value );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t}\n\n}\n\nfunction subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\tconst clip = sourceClip.clone();\n\n\tclip.name = name;\n\n\tconst tracks = [];\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tconst track = clip.tracks[ i ];\n\t\tconst valueSize = track.getValueSize();\n\n\t\tconst times = [];\n\t\tconst values = [];\n\n\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( times.length === 0 ) continue;\n\n\t\ttrack.times = convertArray( times, track.times.constructor );\n\t\ttrack.values = convertArray( values, track.values.constructor );\n\n\t\ttracks.push( track );\n\n\t}\n\n\tclip.tracks = tracks;\n\n\t// find minimum .times value across all tracks in the trimmed clip\n\n\tlet minStartTime = Infinity;\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t}\n\n\t}\n\n\t// shift all tracks such that clip begins at t=0\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t}\n\n\tclip.resetDuration();\n\n\treturn clip;\n\n}\n\nfunction makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\tif ( fps <= 0 ) fps = 30;\n\n\tconst numTracks = referenceClip.tracks.length;\n\tconst referenceTime = referenceFrame / fps;\n\n\t// Make each track's values relative to the values at the reference frame\n\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t// Skip this track if it's non-numeric\n\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t} );\n\n\t\tif ( targetTrack === undefined ) continue;\n\n\t\tlet referenceOffset = 0;\n\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t}\n\n\t\tlet targetOffset = 0;\n\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t}\n\n\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\tlet referenceValue;\n\n\t\t// Find the value to subtract out of the track\n\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\treferenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\treferenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t} else {\n\n\t\t\t// Interpolate to the reference value\n\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\treferenceValue = arraySlice( interpolant.resultBuffer, startIndex, endIndex );\n\n\t\t}\n\n\t\t// Conjugate the quaternion\n\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t}\n\n\t\t// Subtract the reference value from all of the track values\n\n\t\tconst numTimes = targetTrack.times.length;\n\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart,\n\t\t\t\t\treferenceValue,\n\t\t\t\t\t0,\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\treturn targetClip;\n\n}\n\nvar AnimationUtils = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tarraySlice: arraySlice,\n\tconvertArray: convertArray,\n\tisTypedArray: isTypedArray,\n\tgetKeyframeOrder: getKeyframeOrder,\n\tsortedArray: sortedArray,\n\tflattenJSON: flattenJSON,\n\tsubclip: subclip,\n\tmakeClipAdditive: makeClipAdditive\n});\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n */\n\nclass Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t\tthis.settings = null;\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t// Template methods for derived classes:\n\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n */\n\nclass CubicInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nclass LinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n */\n\nclass DiscreteInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\nclass KeyframeTrack {\n\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = convertArray( times, this.TimeBufferType );\n\t\tthis.values = convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': convertArray( track.times, Array ),\n\t\t\t\t'values': convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t// move all keyframes either forwards or backwards in time\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = arraySlice( times, from, to );\n\t\t\tthis.values = arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize() {\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = arraySlice( this.times ),\n\t\t\tvalues = arraySlice( this.values ),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = arraySlice( values, 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst times = arraySlice( this.times, 0 );\n\t\tconst values = arraySlice( this.values, 0 );\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A Track of Boolean keyframe values.\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {}\n\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of keyframe values that represent color.\n */\nclass ColorKeyframeTrack extends KeyframeTrack {}\n\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A Track of numeric keyframe values.\n */\nclass NumberKeyframeTrack extends KeyframeTrack {}\n\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n */\n\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A Track of quaternion keyframe values.\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\nQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track that interpolates Strings\n */\nclass StringKeyframeTrack extends KeyframeTrack {}\n\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\nStringKeyframeTrack.prototype.ValueBufferType = Array;\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of vectored keyframe values.\n */\nclass VectorKeyframeTrack extends KeyframeTrack {}\n\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\nclass AnimationClip {\n\n\tconstructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = getKeyframeOrder( times );\n\t\t\ttimes = sortedArray( times, 1, order );\n\t\t\tvalues = sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, - 1, tracks );\n\n\t}\n\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t// parse the animation.hierarchy format\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tflattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || - 1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * fps;\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tflattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\nconst Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\nclass LoadingManager {\n\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\nconst DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();\n\nclass Loader {\n\n\tconstructor( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\tparse( /* data */ ) {}\n\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\nconst loading = {};\n\nclass HttpError extends Error {\n\n\tconstructor( message, response ) {\n\n\t\tsuper( message );\n\t\tthis.response = response;\n\n\t}\n\n}\n\nclass FileLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// record states ( avoid data race )\n\t\tconst mimeType = this.mimeType;\n\t\tconst responseType = this.responseType;\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\n\n\t\t\t\t\t\treturn response;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\t\t\t\t\tconst contentLength = response.headers.get( 'Content-Length' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\tconst stream = new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn new Response( stream );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new HttpError( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( response => {\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( mimeType === undefined ) {\n\n\t\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// sniff encoding\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\n\t\t\t\tif ( callbacks === undefined ) {\n\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\n\t\t\t\t\tthis.manager.itemError( url );\n\t\t\t\t\tthrow err;\n\n\t\t\t\t}\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t} )\n\t\t\t.finally( () => {\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass CompressedTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass ImageLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.slice( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\nclass CubeTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tconst texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.encoding !== undefined ) {\n\n\t\t\t\ttexture.encoding = texData.encoding;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass TextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.isLight = true;\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass HemisphereLight extends Light {\n\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\tthis.isHemisphereLight = true;\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\nclass LightShadow {\n\n\tconstructor( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.blurSamples = 8;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( _projScreenMatrix$1 );\n\n\t}\n\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\nclass SpotLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\tthis.isSpotLightShadow = true;\n\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass SpotLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isSpotLight = true;\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.distance = distance;\n\t\tthis.angle = angle;\n\t\tthis.penumbra = penumbra;\n\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\tthis.map = null;\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass PointLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis.isPointLightShadow = true;\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\nclass PointLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, decay = 1 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isPointLight = true;\n\n\t\tthis.type = 'PointLight';\n\n\t\tthis.distance = distance;\n\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass DirectionalLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t\tthis.isDirectionalLightShadow = true;\n\n\t}\n\n}\n\nclass DirectionalLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isDirectionalLight = true;\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AmbientLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isAmbientLight = true;\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\nclass RectAreaLight extends Light {\n\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isRectAreaLight = true;\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tthis.isSphericalHarmonics3 = true;\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\nclass LightProbe extends Light {\n\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isLightProbe = true;\n\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass MaterialLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = MaterialLoader.createMaterialFromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\tstatic createMaterialFromType( type ) {\n\n\t\tconst materialLib = {\n\t\t\tShadowMaterial,\n\t\t\tSpriteMaterial,\n\t\t\tRawShaderMaterial,\n\t\t\tShaderMaterial,\n\t\t\tPointsMaterial,\n\t\t\tMeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial,\n\t\t\tMeshPhongMaterial,\n\t\t\tMeshToonMaterial,\n\t\t\tMeshNormalMaterial,\n\t\t\tMeshLambertMaterial,\n\t\t\tMeshDepthMaterial,\n\t\t\tMeshDistanceMaterial,\n\t\t\tMeshBasicMaterial,\n\t\t\tMeshMatcapMaterial,\n\t\t\tLineDashedMaterial,\n\t\t\tLineBasicMaterial,\n\t\t\tMaterial\n\t\t};\n\n\t\treturn new materialLib[ type ]();\n\n\t}\n\n}\n\nclass LoaderUtils {\n\n\tstatic decodeText( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tlet s = '';\n\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t}\n\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.slice( 0, index + 1 );\n\n\t}\n\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isInstancedBufferGeometry = true;\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON( this );\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass BufferGeometryLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tif ( attribute.updateRange !== undefined ) {\n\n\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nclass ObjectLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ].data instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\treturn object;\n\n\t}\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tconst source = images[ data.image ];\n\t\t\t\tconst image = source.data;\n\n\t\t\t\tlet texture;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture();\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.source = source;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.encoding !== undefined ) texture.encoding = data.encoding;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\nclass ImageBitmapLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.isImageBitmapLoader = true;\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tfetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nlet _context;\n\nconst AudioContext = {\n\n\tgetContext: function () {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t},\n\n\tsetContext: function ( value ) {\n\n\t\t_context = value;\n\n\t}\n\n};\n\nclass AudioLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n}\n\nclass HemisphereLightProbe extends LightProbe {\n\n\tconstructor( skyColor, groundColor, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isHemisphereLightProbe = true;\n\n\t\tconst color1 = new Color().set( skyColor );\n\t\tconst color2 = new Color().set( groundColor );\n\n\t\tconst sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tconst ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tconst c0 = Math.sqrt( Math.PI );\n\t\tconst c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n}\n\nclass AmbientLightProbe extends LightProbe {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isAmbientLightProbe = true;\n\n\t\tconst color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n}\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\nclass StereoCamera {\n\n\tconstructor() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\nclass Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\nclass AudioListener extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass Audio extends Object3D {\n\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.source = null;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tthis.source.stop();\n\t\tthis.source.onended = null;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.source.detune === undefined ) return; // only set detune when available\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\n\t}\n\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\nclass PositionalAudio extends Audio {\n\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tdisconnect() {\n\n\t\tsuper.disconnect();\n\n\t\tthis.panner.disconnect( this.gain );\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass AudioAnalyser {\n\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nclass PropertyMixer {\n\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'add'\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /*@__PURE__*/ /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /*@__PURE__*/ /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /*@__PURE__*/ /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\nclass PropertyBinding {\n\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( matches === null ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map':\n\n\t\t\t\t\tif ( 'map' in targetObject ) {\n\n\t\t\t\t\t\ttargetObject = targetObject.map;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.map ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.map;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n *  - Add objects you would otherwise pass as 'root' to the\n *    constructor or the .clipAction method of AnimationMixer.\n *\n *  - Instead pass this object as 'root'.\n *\n *  - You can also add and remove objects later when the mixer\n *    is running.\n *\n * Note:\n *\n *    Objects of this class appear as one object to the mixer,\n *    so cache control of the individual objects must be done\n *    on the group.\n *\n * Limitation:\n *\n *  - The animated properties must be compatible among the\n *    all objects in the group.\n *\n *  - A single property can either be controlled through a\n *    target group or directly, but not both.\n */\n\nclass AnimationObjectGroup {\n\n\tconstructor() {\n\n\t\tthis.isAnimationObjectGroup = true;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// remove & forget\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\nclass AnimationAction {\n\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\t// State & Scheduling\n\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t// return true when play has been called\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcrossFadeTo( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Object Accessors\n\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\tdeltaTime = 0;\n\n\t\t\t} else {\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _controlInterpolantsResultBuffer = new Float32Array( 1 );\n\n\nclass AnimationMixer extends EventDispatcher {\n\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, _controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t// get an existing action\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// advance the time and update apply the animation\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Allows you to seek to a specific time in an animation.\n\tsetTime( timeInSeconds ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t// return this mixer's root target object\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t// free all resources specific to a particular clip\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remove a targeted clip from the cache\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\nclass Uniform {\n\n\tconstructor( value ) {\n\n\t\tthis.value = value;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nlet id = 0;\n\nclass UniformsGroup extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isUniformsGroup = true;\n\n\t\tObject.defineProperty( this, 'id', { value: id ++ } );\n\n\t\tthis.name = '';\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.uniforms = [];\n\n\t}\n\n\tadd( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\tremove( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== - 1 ) this.uniforms.splice( index, 1 );\n\n\t\treturn this;\n\n\t}\n\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.usage = source.usage;\n\n\t\tconst uniformsSource = source.uniforms;\n\n\t\tthis.uniforms.length = 0;\n\n\t\tfor ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {\n\n\t\t\tthis.uniforms.push( uniformsSource[ i ].clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\tthis.isInstancedInterleavedBuffer = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\nclass GLBufferAttribute {\n\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\tthis.isGLBufferAttribute = true;\n\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Raycaster {\n\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t}\n\n\tif ( recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nclass Spherical {\n\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t// restrict phi to be between EPS and PI-EPS\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n */\n\nclass Cylindrical {\n\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = y; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\nclass Box2 {\n\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox2 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector$4.copy( point ).clamp( this.min, this.max );\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\nclass Line3 {\n\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\tthis.start = start;\n\t\tthis.end = end;\n\n\t}\n\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\nclass SpotLightHelper extends Object3D {\n\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n\nclass SkeletonHelper extends LineSegments {\n\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object.isBone === true ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nclass PointLightHelper extends Mesh {\n\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\nclass HemisphereLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\nclass GridHelper extends LineSegments {\n\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass PolarGridHelper extends LineSegments {\n\n\tconstructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the sectors\n\n\t\tif ( sectors > 1 ) {\n\n\t\t\tfor ( let i = 0; i < sectors; i ++ ) {\n\n\t\t\t\tconst v = ( i / sectors ) * ( Math.PI * 2 );\n\n\t\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( x, 0, z );\n\n\t\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create the rings\n\n\t\tfor ( let i = 0; i < rings; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / rings * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nclass DirectionalLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttps://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html\n */\n\nclass CameraHelper extends LineSegments {\n\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2' );\n\t\taddLine( 'n2', 'n4' );\n\t\taddLine( 'n4', 'n3' );\n\t\taddLine( 'n3', 'n1' );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2' );\n\t\taddLine( 'f2', 'f4' );\n\t\taddLine( 'f4', 'f3' );\n\t\taddLine( 'f3', 'f1' );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1' );\n\t\taddLine( 'n2', 'f2' );\n\t\taddLine( 'n3', 'f3' );\n\t\taddLine( 'n4', 'f4' );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1' );\n\t\taddLine( 'p', 'n2' );\n\t\taddLine( 'p', 'n3' );\n\t\taddLine( 'p', 'n4' );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2' );\n\t\taddLine( 'u2', 'u3' );\n\t\taddLine( 'u3', 'u1' );\n\n\t\t// target\n\n\t\taddLine( 'c', 't' );\n\t\taddLine( 'p', 'c' );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2' );\n\t\taddLine( 'cn3', 'cn4' );\n\n\t\taddLine( 'cf1', 'cf2' );\n\t\taddLine( 'cf3', 'cf4' );\n\n\t\tfunction addLine( a, b ) {\n\n\t\t\taddPoint( a );\n\t\t\taddPoint( b );\n\n\t\t}\n\n\t\tfunction addPoint( id ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( 0, 0, 0 );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\tthis.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );\n\n\t}\n\n\tsetColors( frustum, cone, up, target, cross ) {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst colorAttribute = geometry.getAttribute( 'color' );\n\n\t\t// near\n\n\t\tcolorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2\n\t\tcolorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4\n\t\tcolorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3\n\t\tcolorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1\n\n\t\t// far\n\n\t\tcolorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2\n\t\tcolorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4\n\t\tcolorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3\n\t\tcolorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1\n\n\t\t// sides\n\n\t\tcolorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1\n\t\tcolorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2\n\t\tcolorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3\n\t\tcolorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4\n\n\t\t// cone\n\n\t\tcolorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1\n\t\tcolorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2\n\t\tcolorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3\n\t\tcolorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4\n\n\t\t// up\n\n\t\tcolorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2\n\t\tcolorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3\n\t\tcolorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1\n\n\t\t// target\n\n\t\tcolorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t\n\t\tcolorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c\n\n\t\t// cross\n\n\t\tcolorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2\n\t\tcolorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4\n\n\t\tcolorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2\n\t\tcolorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4\n\n\t\tcolorAttribute.needsUpdate = true;\n\n\t}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\nclass BoxHelper extends LineSegments {\n\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass Box3Helper extends LineSegments {\n\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass PlaneHelper extends Line {\n\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, - 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tthis.position.set( 0, 0, 0 );\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tthis.translateZ( - this.plane.constant );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\nclass ArrowHelper extends Object3D {\n\n\t// dir is assumed to be normalized\n\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.line.geometry.dispose();\n\t\tthis.line.material.dispose();\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n}\n\nclass AxesHelper extends LineSegments {\n\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass ShapePath {\n\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\ttoShapes( isCCW ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tlet toChange = 0;\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange ++;\n\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( toChange > 0 && ambiguous === false ) {\n\n\t\t\t\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/ _generateTables();\n\nfunction _generateTables() {\n\n\t// float32 to float16 helpers\n\n\tconst buffer = new ArrayBuffer( 4 );\n\tconst floatView = new Float32Array( buffer );\n\tconst uint32View = new Uint32Array( buffer );\n\n\tconst baseTable = new Uint32Array( 512 );\n\tconst shiftTable = new Uint32Array( 512 );\n\n\tfor ( let i = 0; i < 256; ++ i ) {\n\n\t\tconst e = i - 127;\n\n\t\t// very small number (0, -0)\n\n\t\tif ( e < - 27 ) {\n\n\t\t\tbaseTable[ i ] = 0x0000;\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// small number (denorm)\n\n\t\t} else if ( e < - 14 ) {\n\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t\tshiftTable[ i ] = - e - 1;\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t\t// normal number\n\n\t\t} else if ( e <= 15 ) {\n\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t\t// large number (Infinity, -Infinity)\n\n\t\t} else if ( e < 128 ) {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// stay (NaN, Infinity, -Infinity)\n\n\t\t} else {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t}\n\n\t}\n\n\t// float16 to float32 helpers\n\n\tconst mantissaTable = new Uint32Array( 2048 );\n\tconst exponentTable = new Uint32Array( 64 );\n\tconst offsetTable = new Uint32Array( 64 );\n\n\tfor ( let i = 1; i < 1024; ++ i ) {\n\n\t\tlet m = i << 13; // zero pad mantissa bits\n\t\tlet e = 0; // zero exponent\n\n\t\t// normalized\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\t\tm <<= 1;\n\t\t\te -= 0x00800000; // decrement exponent\n\n\t\t}\n\n\t\tm &= ~ 0x00800000; // clear leading 1 bit\n\t\te += 0x38800000; // adjust bias\n\n\t\tmantissaTable[ i ] = m | e;\n\n\t}\n\n\tfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n\t}\n\n\tfor ( let i = 1; i < 31; ++ i ) {\n\n\t\texponentTable[ i ] = i << 23;\n\n\t}\n\n\texponentTable[ 31 ] = 0x47800000;\n\texponentTable[ 32 ] = 0x80000000;\n\n\tfor ( let i = 33; i < 63; ++ i ) {\n\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n\t}\n\n\texponentTable[ 63 ] = 0xc7800000;\n\n\tfor ( let i = 1; i < 64; ++ i ) {\n\n\t\tif ( i !== 32 ) {\n\n\t\t\toffsetTable[ i ] = 1024;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tfloatView: floatView,\n\t\tuint32View: uint32View,\n\t\tbaseTable: baseTable,\n\t\tshiftTable: shiftTable,\n\t\tmantissaTable: mantissaTable,\n\t\texponentTable: exponentTable,\n\t\toffsetTable: offsetTable\n\t};\n\n}\n\n// float32 to float16\n\nfunction toHalfFloat( val ) {\n\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\tval = clamp( val, - 65504, 65504 );\n\n\t_tables.floatView[ 0 ] = val;\n\tconst f = _tables.uint32View[ 0 ];\n\tconst e = ( f >> 23 ) & 0x1ff;\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\n\n}\n\n// float16 to float32\n\nfunction fromHalfFloat( val ) {\n\n\tconst m = val >> 10;\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\n\treturn _tables.floatView[ 0 ];\n\n}\n\nvar DataUtils = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\ttoHalfFloat: toHalfFloat,\n\tfromHalfFloat: fromHalfFloat\n});\n\n// r134, d65e0af06644fe5a84a6fc0e372f4318f95a04c0\n\nfunction ImmediateRenderObject() {\n\n\tconsole.error( 'THREE.ImmediateRenderObject has been removed.' );\n\n}\n\n// r138, 48b05d3500acc084df50be9b4c90781ad9b8cb17\n\nclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, options ) {\n\n\t\tconsole.error( 'THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the \"samples\" property to greater 0 to enable multisampling.' );\n\t\tsuper( width, height, options );\n\t\tthis.samples = 4;\n\n\t}\n\n}\n\n// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce\n\nclass DataTexture2DArray extends DataArrayTexture {\n\n\tconstructor( data, width, height, depth ) {\n\n\t\tconsole.warn( 'THREE.DataTexture2DArray has been renamed to DataArrayTexture.' );\n\t\tsuper( data, width, height, depth );\n\n\t}\n\n}\n\n// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce\n\nclass DataTexture3D extends Data3DTexture {\n\n\tconstructor( data, width, height, depth ) {\n\n\t\tconsole.warn( 'THREE.DataTexture3D has been renamed to Data3DTexture.' );\n\t\tsuper( data, width, height, depth );\n\n\t}\n\n}\n\n// r144\n\nclass BoxBufferGeometry extends BoxGeometry {\n\n\tconstructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tconsole.warn( 'THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.' );\n\t\tsuper( width, height, depth, widthSegments, heightSegments, depthSegments );\n\n\n\t}\n\n}\n\n// r144\n\nclass CapsuleBufferGeometry extends CapsuleGeometry {\n\n\tconstructor( radius, length, capSegments, radialSegments ) {\n\n\t\tconsole.warn( 'THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.' );\n\t\tsuper( radius, length, capSegments, radialSegments );\n\n\t}\n\n}\n\n// r144\n\nclass CircleBufferGeometry extends CircleGeometry {\n\n\tconstructor( radius, segments, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.' );\n\t\tsuper( radius, segments, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass ConeBufferGeometry extends ConeGeometry {\n\n\tconstructor( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.' );\n\t\tsuper( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass CylinderBufferGeometry extends CylinderGeometry {\n\n\tconstructor( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.' );\n\t\tsuper( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass DodecahedronBufferGeometry extends DodecahedronGeometry {\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass ExtrudeBufferGeometry extends ExtrudeGeometry {\n\n\tconstructor( shapes, options ) {\n\n\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.' );\n\t\tsuper( shapes, options );\n\n\t}\n\n}\n\n// r144\n\nclass IcosahedronBufferGeometry extends IcosahedronGeometry {\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass LatheBufferGeometry extends LatheGeometry {\n\n\tconstructor( points, segments, phiStart, phiLength ) {\n\n\t\tconsole.warn( 'THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.' );\n\t\tsuper( points, segments, phiStart, phiLength );\n\n\t}\n\n}\n\n// r144\n\nclass OctahedronBufferGeometry extends OctahedronGeometry {\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass PlaneBufferGeometry extends PlaneGeometry {\n\n\tconstructor( width, height, widthSegments, heightSegments ) {\n\n\t\tconsole.warn( 'THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry.' );\n\t\tsuper( width, height, widthSegments, heightSegments );\n\n\t}\n\n}\n\n// r144\n\nclass PolyhedronBufferGeometry extends PolyhedronGeometry {\n\n\tconstructor( vertices, indices, radius, detail ) {\n\n\t\tconsole.warn( 'THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.' );\n\t\tsuper( vertices, indices, radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass RingBufferGeometry extends RingGeometry {\n\n\tconstructor( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.' );\n\t\tsuper( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass ShapeBufferGeometry extends ShapeGeometry {\n\n\tconstructor( shapes, curveSegments ) {\n\n\t\tconsole.warn( 'THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.' );\n\t\tsuper( shapes, curveSegments );\n\n\t}\n\n}\n\n// r144\n\nclass SphereBufferGeometry extends SphereGeometry {\n\n\tconstructor( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.' );\n\t\tsuper( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass TetrahedronBufferGeometry extends TetrahedronGeometry {\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass TorusBufferGeometry extends TorusGeometry {\n\n\tconstructor( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tconsole.warn( 'THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.' );\n\t\tsuper( radius, tube, radialSegments, tubularSegments, arc );\n\n\t}\n\n}\n\n// r144\n\nclass TorusKnotBufferGeometry extends TorusKnotGeometry {\n\n\tconstructor( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tconsole.warn( 'THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.' );\n\t\tsuper( radius, tube, tubularSegments, radialSegments, p, q );\n\n\t}\n\n}\n\n// r144\n\nclass TubeBufferGeometry extends TubeGeometry {\n\n\tconstructor( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tconsole.warn( 'THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.' );\n\t\tsuper( path, tubularSegments, radius, radialSegments, closed );\n\n\t}\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AlphaFormat, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AmbientLightProbe, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxBufferGeometry, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleBufferGeometry, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleBufferGeometry, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedTexture, CompressedTextureLoader, ConeBufferGeometry, ConeGeometry, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderBufferGeometry, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTexture2DArray, DataTexture3D, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronBufferGeometry, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeBufferGeometry, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, Float64BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, GLBufferAttribute, GLSL1, GLSL3, GreaterDepth, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, HemisphereLightProbe, IcosahedronBufferGeometry, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, ImmediateRenderObject, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheBufferGeometry, LatheGeometry, Layers, LessDepth, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearEncoding, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, MathUtils, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronBufferGeometry, OctahedronGeometry, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, Path, PerspectiveCamera, Plane, PlaneBufferGeometry, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronBufferGeometry, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBFormat, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingBufferGeometry, RingGeometry, SRGBColorSpace, Scene, ShaderChunk, ShaderLib, ShaderMaterial, ShadowMaterial, Shape, ShapeBufferGeometry, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereBufferGeometry, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronBufferGeometry, TetrahedronGeometry, Texture, TextureLoader, TorusBufferGeometry, TorusGeometry, TorusKnotBufferGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeBufferGeometry, TubeGeometry, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoTexture, WebGL1Renderer, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCubeRenderTarget, WebGLMultipleRenderTargets, WebGLMultisampleRenderTarget, WebGLRenderTarget, WebGLRenderer, WebGLUtils, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, _SRGBAFormat, sRGBEncoding };\n","import { Vector3, BufferAttribute, Box3, FrontSide, Matrix4 } from 'three';\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG } from './Constants.js';\nimport { buildPackedTree } from './buildFunctions.js';\nimport {\n\traycast,\n\traycastFirst,\n\tshapecast,\n\tintersectsGeometry,\n\tsetBuffer,\n\tclearBuffer,\n} from './castFunctions.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { iterateOverTriangles, setTriangle } from '../utils/TriangleUtilities.js';\n\nconst SKIP_GENERATION = Symbol( 'skip tree generation' );\n\nconst aabb = /* @__PURE__ */ new Box3();\nconst aabb2 = /* @__PURE__ */ new Box3();\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp = /* @__PURE__ */ new Vector3();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\nconst tempBox = /* @__PURE__ */ new Box3();\nconst trianglePool = /* @__PURE__ */ new PrimitivePool( () => new ExtendedTriangle() );\n\nexport class MeshBVH {\n\n\tstatic serialize( bvh, options = {} ) {\n\n\t\tif ( options.isBufferGeometry ) {\n\n\t\t\tconsole.warn( 'MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.' );\n\n\t\t\treturn MeshBVH.serialize(\n\t\t\t\targuments[ 0 ],\n\t\t\t\t{\n\t\t\t\t\tcloneBuffers: arguments[ 2 ] === undefined ? true : arguments[ 2 ],\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t\toptions = {\n\t\t\tcloneBuffers: true,\n\t\t\t...options,\n\t\t};\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst rootData = bvh._roots;\n\t\tconst indexAttribute = geometry.getIndex();\n\t\tlet result;\n\t\tif ( options.cloneBuffers ) {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData.map( root => root.slice() ),\n\t\t\t\tindex: indexAttribute.array.slice(),\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData,\n\t\t\t\tindex: indexAttribute.array,\n\t\t\t};\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tstatic deserialize( data, geometry, options = {} ) {\n\n\t\tif ( typeof options === 'boolean' ) {\n\n\t\t\tconsole.warn( 'MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.' );\n\n\t\t\treturn MeshBVH.deserialize(\n\t\t\t\targuments[ 0 ],\n\t\t\t\targuments[ 1 ],\n\t\t\t\t{\n\t\t\t\t\tsetIndex: arguments[ 2 ] === undefined ? true : arguments[ 2 ],\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t\toptions = {\n\t\t\tsetIndex: true,\n\t\t\t...options,\n\t\t};\n\n\t\tconst { index, roots } = data;\n\t\tconst bvh = new MeshBVH( geometry, { ...options, [ SKIP_GENERATION ]: true } );\n\t\tbvh._roots = roots;\n\n\t\tif ( options.setIndex ) {\n\n\t\t\tconst indexAttribute = geometry.getIndex();\n\t\t\tif ( indexAttribute === null ) {\n\n\t\t\t\tconst newIndex = new BufferAttribute( data.index, 1, false );\n\t\t\t\tgeometry.setIndex( newIndex );\n\n\t\t\t} else if ( indexAttribute.array !== index ) {\n\n\t\t\t\tindexAttribute.array.set( index );\n\t\t\t\tindexAttribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bvh;\n\n\t}\n\n\tconstructor( geometry, options = {} ) {\n\n\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\n\n\t\t} else if ( geometry.index && geometry.index.isInterleavedBufferAttribute ) {\n\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\n\n\t\t}\n\n\t\t// default options\n\t\toptions = Object.assign( {\n\n\t\t\tstrategy: CENTER,\n\t\t\tmaxDepth: 40,\n\t\t\tmaxLeafTris: 10,\n\t\t\tverbose: true,\n\t\t\tuseSharedArrayBuffer: false,\n\t\t\tsetBoundingBox: true,\n\t\t\tonProgress: null,\n\n\t\t\t// undocumented options\n\n\t\t\t// Whether to skip generating the tree. Used for deserialization.\n\t\t\t[ SKIP_GENERATION ]: false,\n\n\t\t}, options );\n\n\t\tif ( options.useSharedArrayBuffer && typeof SharedArrayBuffer === 'undefined' ) {\n\n\t\t\tthrow new Error( 'MeshBVH: SharedArrayBuffer is not available.' );\n\n\t\t}\n\n\t\tthis._roots = null;\n\t\tif ( ! options[ SKIP_GENERATION ] ) {\n\n\t\t\tthis._roots = buildPackedTree( geometry, options );\n\n\t\t\tif ( ! geometry.boundingBox && options.setBoundingBox ) {\n\n\t\t\t\tgeometry.boundingBox = this.getBoundingBox( new Box3() );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// retain references to the geometry so we can use them it without having to\n\t\t// take a geometry reference in every function.\n\t\tthis.geometry = geometry;\n\n\t}\n\n\trefit( nodeIndices = null ) {\n\n\t\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\t\tnodeIndices = new Set( nodeIndices );\n\n\t\t}\n\n\t\tconst geometry = this.geometry;\n\t\tconst indexArr = geometry.index.array;\n\t\tconst posAttr = geometry.attributes.position;\n\n\t\tlet buffer, uint32Array, uint16Array, float32Array;\n\t\tlet byteOffset = 0;\n\t\tconst roots = this._roots;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tbuffer = roots[ i ];\n\t\t\tuint32Array = new Uint32Array( buffer );\n\t\t\tuint16Array = new Uint16Array( buffer );\n\t\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t\t_traverse( 0, byteOffset );\n\t\t\tbyteOffset += buffer.byteLength;\n\n\t\t}\n\n\t\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\t\tlet minx = Infinity;\n\t\t\t\tlet miny = Infinity;\n\t\t\t\tlet minz = Infinity;\n\t\t\t\tlet maxx = - Infinity;\n\t\t\t\tlet maxy = - Infinity;\n\t\t\t\tlet maxz = - Infinity;\n\n\t\t\t\tfor ( let i = 3 * offset, l = 3 * ( offset + count ); i < l; i ++ ) {\n\n\t\t\t\t\tconst index = indexArr[ i ];\n\t\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\t\tif ( z > maxz ) maxz = z;\n\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t\t) {\n\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst left = node32Index + 8;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\t\tconst offsetRight = right + byteOffset;\n\t\t\t\tlet forceChildren = force;\n\t\t\t\tlet includesLeft = false;\n\t\t\t\tlet includesRight = false;\n\n\t\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tincludesLeft = true;\n\t\t\t\t\tincludesRight = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\t\tlet leftChange = false;\n\t\t\t\tif ( traverseLeft ) {\n\n\t\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tlet rightChange = false;\n\t\t\t\tif ( traverseRight ) {\n\n\t\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tconst didChange = leftChange || rightChange;\n\t\t\t\tif ( didChange ) {\n\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn didChange;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttraverse( callback, rootIndex = 0 ) {\n\n\t\tconst buffer = this._roots[ rootIndex ];\n\t\tconst uint32Array = new Uint32Array( buffer );\n\t\tconst uint16Array = new Uint16Array( buffer );\n\t\t_traverse( 0 );\n\n\t\tfunction _traverse( node32Index, depth = 0 ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\t\t\t\tcallback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), offset, count );\n\n\t\t\t} else {\n\n\t\t\t\t// TODO: use node functions here\n\t\t\t\tconst left = node32Index + BYTES_PER_NODE / 4;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst splitAxis = uint32Array[ node32Index + 7 ];\n\t\t\t\tconst stopTraversal = callback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), splitAxis );\n\n\t\t\t\tif ( ! stopTraversal ) {\n\n\t\t\t\t\t_traverse( left, depth + 1 );\n\t\t\t\t\t_traverse( right, depth + 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Core Cast Functions */\n\traycast( ray, materialOrSide = FrontSide ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst intersects = [];\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\tconst startCount = intersects.length;\n\n\t\t\tsetBuffer( roots[ i ] );\n\t\t\traycast( 0, geometry, materialSide, ray, intersects );\n\t\t\tclearBuffer();\n\n\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\tconst materialIndex = groups[ i ].materialIndex;\n\t\t\t\tfor ( let j = startCount, jl = intersects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tintersects[ j ].face.materialIndex = materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn intersects;\n\n\t}\n\n\traycastFirst( ray, materialOrSide = FrontSide ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tlet closestResult = null;\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\n\t\t\tsetBuffer( roots[ i ] );\n\t\t\tconst result = raycastFirst( 0, geometry, materialSide, ray );\n\t\t\tclearBuffer();\n\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\n\n\t\t\t\tclosestResult = result;\n\t\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\t\tresult.face.materialIndex = groups[ i ].materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn closestResult;\n\n\t}\n\n\tintersectsGeometry( otherGeometry, geomToMesh ) {\n\n\t\tconst geometry = this.geometry;\n\t\tlet result = false;\n\t\tfor ( const root of this._roots ) {\n\n\t\t\tsetBuffer( root );\n\t\t\tresult = intersectsGeometry( 0, geometry, otherGeometry, geomToMesh );\n\t\t\tclearBuffer();\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tshapecast( callbacks, _intersectsTriangleFunc, _orderNodesFunc ) {\n\n\t\tconst geometry = this.geometry;\n\t\tif ( callbacks instanceof Function ) {\n\n\t\t\tif ( _intersectsTriangleFunc ) {\n\n\t\t\t\t// Support the previous function signature that provided three sequential index buffer\n\t\t\t\t// indices here.\n\t\t\t\tconst originalTriangleFunc = _intersectsTriangleFunc;\n\t\t\t\t_intersectsTriangleFunc = ( tri, index, contained, depth ) => {\n\n\t\t\t\t\tconst i3 = index * 3;\n\t\t\t\t\treturn originalTriangleFunc( tri, i3, i3 + 1, i3 + 2, contained, depth );\n\n\t\t\t\t};\n\n\n\t\t\t}\n\n\t\t\tcallbacks = {\n\n\t\t\t\tboundsTraverseOrder: _orderNodesFunc,\n\t\t\t\tintersectsBounds: callbacks,\n\t\t\t\tintersectsTriangle: _intersectsTriangleFunc,\n\t\t\t\tintersectsRange: null,\n\n\t\t\t};\n\n\t\t\tconsole.warn( 'MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.' );\n\n\t\t}\n\n\t\tconst triangle = trianglePool.getPrimitive();\n\t\tlet {\n\t\t\tboundsTraverseOrder,\n\t\t\tintersectsBounds,\n\t\t\tintersectsRange,\n\t\t\tintersectsTriangle,\n\t\t} = callbacks;\n\n\t\tif ( intersectsRange && intersectsTriangle ) {\n\n\t\t\tconst originalIntersectsRange = intersectsRange;\n\t\t\tintersectsRange = ( offset, count, contained, depth, nodeIndex ) => {\n\n\t\t\t\tif ( ! originalIntersectsRange( offset, count, contained, depth, nodeIndex ) ) {\n\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t} else if ( ! intersectsRange ) {\n\n\t\t\tif ( intersectsTriangle ) {\n\n\t\t\t\tintersectsRange = ( offset, count, contained, depth ) => {\n\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRange = ( offset, count, contained ) => {\n\n\t\t\t\t\treturn contained;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet result = false;\n\t\tlet byteOffset = 0;\n\t\tfor ( const root of this._roots ) {\n\n\t\t\tsetBuffer( root );\n\t\t\tresult = shapecast( 0, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\t\t\tclearBuffer();\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tbyteOffset += root.byteLength;\n\n\t\t}\n\n\t\ttrianglePool.releasePrimitive( triangle );\n\n\t\treturn result;\n\n\t}\n\n\tbvhcast( otherBvh, matrixToLocal, callbacks ) {\n\n\t\t// BVHCast function for intersecting two BVHs against each other. Ultimately just uses two recursive shapecast calls rather\n\t\t// than an approach that walks down the tree (see bvhcast.js file for more info).\n\n\t\tlet {\n\t\t\tintersectsRanges,\n\t\t\tintersectsTriangles,\n\t\t} = callbacks;\n\n\t\tconst indexAttr = this.geometry.index;\n\t\tconst positionAttr = this.geometry.attributes.position;\n\n\t\tconst otherIndexAttr = otherBvh.geometry.index;\n\t\tconst otherPositionAttr = otherBvh.geometry.attributes.position;\n\n\t\ttempMatrix.copy( matrixToLocal ).invert();\n\n\t\tconst triangle = trianglePool.getPrimitive();\n\t\tconst triangle2 = trianglePool.getPrimitive();\n\n\t\tif ( intersectsTriangles ) {\n\n\t\t\tfunction iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\tfor ( let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\tsetTriangle( triangle2, i2 * 3, otherIndexAttr, otherPositionAttr );\n\t\t\t\t\ttriangle2.a.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.b.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.c.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1 ++ ) {\n\n\t\t\t\t\t\tsetTriangle( triangle, i1 * 3, indexAttr, positionAttr );\n\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\tif ( intersectsTriangles( triangle, triangle2, i1, i2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tif ( intersectsRanges ) {\n\n\t\t\t\tconst originalIntersectsRanges = intersectsRanges;\n\t\t\t\tintersectsRanges = function ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\t\tif ( ! originalIntersectsRanges( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\treturn iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRanges = iterateOverDoubleTriangles;\n\n\t\t\t}\n\n\t\t}\n\n\t\totherBvh.getBoundingBox( aabb2 );\n\t\taabb2.applyMatrix4( matrixToLocal );\n\t\tconst result = this.shapecast( {\n\n\t\t\tintersectsBounds: box => aabb2.intersectsBox( box ),\n\n\t\t\tintersectsRange: ( offset1, count1, contained, depth1, nodeIndex1, box ) => {\n\n\t\t\t\taabb.copy( box );\n\t\t\t\taabb.applyMatrix4( tempMatrix );\n\t\t\t\treturn otherBvh.shapecast( {\n\n\t\t\t\t\tintersectsBounds: box => aabb.intersectsBox( box ),\n\n\t\t\t\t\tintersectsRange: ( offset2, count2, contained, depth2, nodeIndex2 ) => {\n\n\t\t\t\t\t\treturn intersectsRanges( offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2 );\n\n\t\t\t\t\t},\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\ttrianglePool.releasePrimitive( triangle );\n\t\ttrianglePool.releasePrimitive( triangle2 );\n\t\treturn result;\n\n\t}\n\n\t/* Derived Cast Functions */\n\tintersectsBox( box, boxToMesh ) {\n\n\t\tobb.set( box.min, box.max, boxToMesh );\n\t\tobb.needsUpdate = true;\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => obb.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => obb.intersectsTriangle( tri )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => sphere.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => tri.intersectsSphere( sphere )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tclosestPointToGeometry( otherGeometry, geometryToBvh, target1 = { }, target2 = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tobb.needsUpdate = true;\n\n\t\tconst geometry = this.geometry;\n\t\tconst pos = geometry.attributes.position;\n\t\tconst index = geometry.index;\n\t\tconst otherPos = otherGeometry.attributes.position;\n\t\tconst otherIndex = otherGeometry.index;\n\t\tconst triangle = trianglePool.getPrimitive();\n\t\tconst triangle2 = trianglePool.getPrimitive();\n\n\t\tlet tempTarget1 = temp1;\n\t\tlet tempTargetDest1 = temp2;\n\t\tlet tempTarget2 = null;\n\t\tlet tempTargetDest2 = null;\n\n\t\tif ( target2 ) {\n\n\t\t\ttempTarget2 = temp3;\n\t\t\ttempTargetDest2 = temp4;\n\n\t\t}\n\n\t\tlet closestDistance = Infinity;\n\t\tlet closestDistanceTriIndex = null;\n\t\tlet closestDistanceOtherTriIndex = null;\n\t\ttempMatrix.copy( geometryToBvh ).invert();\n\t\tobb2.matrix.copy( tempMatrix );\n\t\tthis.shapecast(\n\t\t\t{\n\n\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\treturn obb.distanceToBox( box );\n\n\t\t\t\t},\n\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\t\treturn otherGeometry.boundsTree.shapecast( {\n\t\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\t\tfor ( let i2 = otherOffset * 3, l2 = ( otherOffset + otherCount ) * 3; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle2, i2, otherIndex, otherPos );\n\t\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\t\tsetTriangle( triangle, i, index, pos );\n\t\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i / 3;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2 / 3;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\t\tconst triCount = otherIndex ? otherIndex.count : otherPos.count;\n\t\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\t\tsetTriangle( triangle2, i2, otherIndex, otherPos );\n\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\tsetTriangle( triangle, i, index, pos );\n\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i / 3;\n\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2 / 3;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t}\n\n\t\t);\n\n\t\ttrianglePool.releasePrimitive( triangle );\n\t\ttrianglePool.releasePrimitive( triangle2 );\n\n\t\tif ( closestDistance === Infinity ) return null;\n\n\t\tif ( ! target1.point ) target1.point = tempTargetDest1.clone();\n\t\telse target1.point.copy( tempTargetDest1 );\n\t\ttarget1.distance = closestDistance,\n\t\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\t\tif ( target2 ) {\n\n\t\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\t\telse target2.point.copy( tempTargetDest2 );\n\t\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t\t}\n\n\t\treturn target1;\n\n\t}\n\n\tclosestPointToPoint( point, target = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\t// early out if under minThreshold\n\t\t// skip checking if over maxThreshold\n\t\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\n\t\t// returns Infinity if no value found\n\t\tconst minThresholdSq = minThreshold * minThreshold;\n\t\tconst maxThresholdSq = maxThreshold * maxThreshold;\n\t\tlet closestDistanceSq = Infinity;\n\t\tlet closestDistanceTriIndex = null;\n\t\tthis.shapecast(\n\n\t\t\t{\n\n\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\ttemp.copy( point ).clamp( box.min, box.max );\n\t\t\t\t\treturn temp.distanceToSquared( point );\n\n\t\t\t\t},\n\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\treturn score < closestDistanceSq && score < maxThresholdSq;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsTriangle: ( tri, triIndex ) => {\n\n\t\t\t\t\ttri.closestPointToPoint( point, temp );\n\t\t\t\t\tconst distSq = point.distanceToSquared( temp );\n\t\t\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\t\t\ttemp1.copy( temp );\n\t\t\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\t\t\tclosestDistanceTriIndex = triIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( distSq < minThresholdSq ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t}\n\n\t\t);\n\n\t\tif ( closestDistanceSq === Infinity ) return null;\n\n\t\tconst closestDistance = Math.sqrt( closestDistanceSq );\n\n\t\tif ( ! target.point ) target.point = temp1.clone();\n\t\telse target.point.copy( temp1 );\n\t\ttarget.distance = closestDistance,\n\t\ttarget.faceIndex = closestDistanceTriIndex;\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\ttarget.makeEmpty();\n\n\t\tconst roots = this._roots;\n\t\troots.forEach( buffer => {\n\n\t\t\tarrayToBox( 0, new Float32Array( buffer ), tempBox );\n\t\t\ttarget.union( tempBox );\n\n\t\t} );\n\n\t\treturn target;\n\n\t}\n\n}\n","// Split strategy constants\nexport const CENTER = 0;\nexport const AVERAGE = 1;\nexport const SAH = 2;\n\n// Traversal constants\nexport const NOT_INTERSECTED = 0;\nexport const INTERSECTED = 1;\nexport const CONTAINED = 2;\n\n// SAH cost constants\n// TODO: hone these costs more. The relative difference between them should be the\n// difference in measured time to perform a triangle intersection vs traversing\n// bounds.\nexport const TRIANGLE_INTERSECT_COST = 1.25;\nexport const TRAVERSAL_COST = 1;\n\n\n// Build constants\nexport const BYTES_PER_NODE = 6 * 4 + 4 + 4;\nexport const IS_LEAFNODE_FLAG = 0xFFFF;\n\n// EPSILON for computing floating point error during build\n// https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics\nexport const FLOAT32_EPSILON = Math.pow( 2, - 24 );\n\n","import { BufferAttribute } from 'three';\nimport { MeshBVHNode } from './MeshBVHNode.js';\nimport { getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds, expandByTriangleBounds } from '../utils/ArrayBoxUtilities.js';\nimport {\n\tCENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST,\n\tBYTES_PER_NODE, FLOAT32_EPSILON, IS_LEAFNODE_FLAG,\n} from './Constants.js';\n\nfunction ensureIndex( geo, options ) {\n\n\tif ( ! geo.index ) {\n\n\t\tconst vertexCount = geo.attributes.position.count;\n\t\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\t\tlet index;\n\t\tif ( vertexCount > 65535 ) {\n\n\t\t\tindex = new Uint32Array( new BufferConstructor( 4 * vertexCount ) );\n\n\t\t} else {\n\n\t\t\tindex = new Uint16Array( new BufferConstructor( 2 * vertexCount ) );\n\n\t\t}\n\n\t\tgeo.setIndex( new BufferAttribute( index, 1 ) );\n\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tindex[ i ] = i;\n\n\t\t}\n\n\t}\n\n}\n\n// Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\nfunction getRootIndexRanges( geo ) {\n\n\tif ( ! geo.groups || ! geo.groups.length ) {\n\n\t\treturn [ { offset: 0, count: geo.index.count / 3 } ];\n\n\t}\n\n\tconst ranges = [];\n\tconst rangeBoundaries = new Set();\n\tfor ( const group of geo.groups ) {\n\n\t\trangeBoundaries.add( group.start );\n\t\trangeBoundaries.add( group.start + group.count );\n\n\t}\n\n\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\n\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\n\n\t\tconst start = sortedBoundaries[ i ], end = sortedBoundaries[ i + 1 ];\n\t\tranges.push( { offset: ( start / 3 ), count: ( end - start ) / 3 } );\n\n\t}\n\n\treturn ranges;\n\n}\n\n// computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\n// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\n// These are computed together to avoid redundant accesses to bounds array.\nfunction getBounds( triangleBounds, offset, count, target, centroidTarget = null ) {\n\n\tlet minx = Infinity;\n\tlet miny = Infinity;\n\tlet minz = Infinity;\n\tlet maxx = - Infinity;\n\tlet maxy = - Infinity;\n\tlet maxz = - Infinity;\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tconst includeCentroid = centroidTarget !== null;\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tconst hx = triangleBounds[ i + 1 ];\n\t\tconst lx = cx - hx;\n\t\tconst rx = cx + hx;\n\t\tif ( lx < minx ) minx = lx;\n\t\tif ( rx > maxx ) maxx = rx;\n\t\tif ( includeCentroid && cx < cminx ) cminx = cx;\n\t\tif ( includeCentroid && cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tconst hy = triangleBounds[ i + 3 ];\n\t\tconst ly = cy - hy;\n\t\tconst ry = cy + hy;\n\t\tif ( ly < miny ) miny = ly;\n\t\tif ( ry > maxy ) maxy = ry;\n\t\tif ( includeCentroid && cy < cminy ) cminy = cy;\n\t\tif ( includeCentroid && cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tconst hz = triangleBounds[ i + 5 ];\n\t\tconst lz = cz - hz;\n\t\tconst rz = cz + hz;\n\t\tif ( lz < minz ) minz = lz;\n\t\tif ( rz > maxz ) maxz = rz;\n\t\tif ( includeCentroid && cz < cminz ) cminz = cz;\n\t\tif ( includeCentroid && cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\ttarget[ 0 ] = minx;\n\ttarget[ 1 ] = miny;\n\ttarget[ 2 ] = minz;\n\n\ttarget[ 3 ] = maxx;\n\ttarget[ 4 ] = maxy;\n\ttarget[ 5 ] = maxz;\n\n\tif ( includeCentroid ) {\n\n\t\tcentroidTarget[ 0 ] = cminx;\n\t\tcentroidTarget[ 1 ] = cminy;\n\t\tcentroidTarget[ 2 ] = cminz;\n\n\t\tcentroidTarget[ 3 ] = cmaxx;\n\t\tcentroidTarget[ 4 ] = cmaxy;\n\t\tcentroidTarget[ 5 ] = cmaxz;\n\n\t}\n\n}\n\n// A stand alone function for retrieving the centroid bounds.\nfunction getCentroidBounds( triangleBounds, offset, count, centroidTarget ) {\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tif ( cx < cminx ) cminx = cx;\n\t\tif ( cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tif ( cy < cminy ) cminy = cy;\n\t\tif ( cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tif ( cz < cminz ) cminz = cz;\n\t\tif ( cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\tcentroidTarget[ 0 ] = cminx;\n\tcentroidTarget[ 1 ] = cminy;\n\tcentroidTarget[ 2 ] = cminz;\n\n\tcentroidTarget[ 3 ] = cmaxx;\n\tcentroidTarget[ 4 ] = cmaxy;\n\tcentroidTarget[ 5 ] = cmaxz;\n\n}\n\n\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition( index, triangleBounds, offset, count, split ) {\n\n\tlet left = offset;\n\tlet right = offset + count - 1;\n\tconst pos = split.pos;\n\tconst axisOffset = split.axis * 2;\n\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\twhile ( true ) {\n\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\tleft ++;\n\n\t\t}\n\n\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\tright --;\n\n\t\t}\n\n\t\tif ( left < right ) {\n\n\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t// and perhaps the SAH planes\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tlet t0 = index[ left * 3 + i ];\n\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\n\t\t\t\tindex[ right * 3 + i ] = t0;\n\n\t\t\t\tlet t1 = triangleBounds[ left * 6 + i * 2 + 0 ];\n\t\t\t\ttriangleBounds[ left * 6 + i * 2 + 0 ] = triangleBounds[ right * 6 + i * 2 + 0 ];\n\t\t\t\ttriangleBounds[ right * 6 + i * 2 + 0 ] = t1;\n\n\t\t\t\tlet t2 = triangleBounds[ left * 6 + i * 2 + 1 ];\n\t\t\t\ttriangleBounds[ left * 6 + i * 2 + 1 ] = triangleBounds[ right * 6 + i * 2 + 1 ];\n\t\t\t\ttriangleBounds[ right * 6 + i * 2 + 1 ] = t2;\n\n\t\t\t}\n\n\t\t\tleft ++;\n\t\t\tright --;\n\n\t\t} else {\n\n\t\t\treturn left;\n\n\t\t}\n\n\t}\n\n}\n\nconst BIN_COUNT = 32;\nconst binsSort = ( a, b ) => a.candidate - b.candidate;\nconst sahBins = new Array( BIN_COUNT ).fill().map( () => {\n\n\treturn {\n\n\t\tcount: 0,\n\t\tbounds: new Float32Array( 6 ),\n\t\trightCacheBounds: new Float32Array( 6 ),\n\t\tleftCacheBounds: new Float32Array( 6 ),\n\t\tcandidate: 0,\n\n\t};\n\n} );\nconst leftBounds = new Float32Array( 6 );\n\nfunction getOptimalSplit( nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy ) {\n\n\tlet axis = - 1;\n\tlet pos = 0;\n\n\t// Center\n\tif ( strategy === CENTER ) {\n\n\t\taxis = getLongestEdgeIndex( centroidBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = ( centroidBoundingData[ axis ] + centroidBoundingData[ axis + 3 ] ) / 2;\n\n\t\t}\n\n\t} else if ( strategy === AVERAGE ) {\n\n\t\taxis = getLongestEdgeIndex( nodeBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = getAverage( triangleBounds, offset, count, axis );\n\n\t\t}\n\n\t} else if ( strategy === SAH ) {\n\n\t\tconst rootSurfaceArea = computeSurfaceArea( nodeBoundingData );\n\t\tlet bestCost = TRIANGLE_INTERSECT_COST * count;\n\n\t\t// iterate over all axes\n\t\tconst cStart = offset * 6;\n\t\tconst cEnd = ( offset + count ) * 6;\n\t\tfor ( let a = 0; a < 3; a ++ ) {\n\n\t\t\tconst axisLeft = centroidBoundingData[ a ];\n\t\t\tconst axisRight = centroidBoundingData[ a + 3 ];\n\t\t\tconst axisLength = axisRight - axisLeft;\n\t\t\tconst binWidth = axisLength / BIN_COUNT;\n\n\t\t\t// If we have fewer triangles than we're planning to split then just check all\n\t\t\t// the triangle positions because it will be faster.\n\t\t\tif ( count < BIN_COUNT / 4 ) {\n\n\t\t\t\t// initialize the bin candidates\n\t\t\t\tconst truncatedBins = [ ...sahBins ];\n\t\t\t\ttruncatedBins.length = count;\n\n\t\t\t\t// set the candidates\n\t\t\t\tlet b = 0;\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6, b ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ b ];\n\t\t\t\t\tbin.candidate = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tbin.count = 0;\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\tbounds,\n\t\t\t\t\t\tleftCacheBounds,\n\t\t\t\t\t\trightCacheBounds,\n\t\t\t\t\t} = bin;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\trightCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\trightCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tleftCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\tleftCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bounds );\n\n\t\t\t\t}\n\n\t\t\t\ttruncatedBins.sort( binsSort );\n\n\t\t\t\t// remove redundant splits\n\t\t\t\tlet splitCount = count;\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\twhile ( bi + 1 < splitCount && truncatedBins[ bi + 1 ].candidate === bin.candidate ) {\n\n\t\t\t\t\t\ttruncatedBins.splice( bi + 1, 1 );\n\t\t\t\t\t\tsplitCount --;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// find the appropriate bin for each triangle and expand the bounds.\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst center = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\t\tif ( center >= bin.candidate ) {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.rightCacheBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.leftCacheBounds );\n\t\t\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// expand all the bounds\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\tconst leftCount = bin.count;\n\t\t\t\t\tconst rightCount = count - bin.count;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tconst leftBounds = bin.leftCacheBounds;\n\t\t\t\t\tconst rightBounds = bin.rightCacheBounds;\n\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rightProb = 0;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// reset the bins\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tbin.count = 0;\n\t\t\t\t\tbin.candidate = axisLeft + binWidth + i * binWidth;\n\n\t\t\t\t\tconst bounds = bin.bounds;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over all center positions\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst triCenter = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tconst relativeCenter = triCenter - axisLeft;\n\n\t\t\t\t\t// in the partition function if the centroid lies on the split plane then it is\n\t\t\t\t\t// considered to be on the right side of the split\n\t\t\t\t\tlet binIndex = ~ ~ ( relativeCenter / binWidth );\n\t\t\t\t\tif ( binIndex >= BIN_COUNT ) binIndex = BIN_COUNT - 1;\n\n\t\t\t\t\tconst bin = sahBins[ binIndex ];\n\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.bounds );\n\n\t\t\t\t}\n\n\t\t\t\t// cache the unioned bounds from right to left so we don't have to regenerate them each time\n\t\t\t\tconst lastBin = sahBins[ BIN_COUNT - 1 ];\n\t\t\t\tcopyBounds( lastBin.bounds, lastBin.rightCacheBounds );\n\t\t\t\tfor ( let i = BIN_COUNT - 2; i >= 0; i -- ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tunionBounds( bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds );\n\n\t\t\t\t}\n\n\t\t\t\tlet leftCount = 0;\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT - 1; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst binCount = bin.count;\n\t\t\t\t\tconst bounds = bin.bounds;\n\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tconst rightBounds = nextBin.rightCacheBounds;\n\n\t\t\t\t\t// dont do anything with the bounds if the new bounds have no triangles\n\t\t\t\t\tif ( binCount !== 0 ) {\n\n\t\t\t\t\t\tif ( leftCount === 0 ) {\n\n\t\t\t\t\t\t\tcopyBounds( bounds, leftBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tunionBounds( bounds, leftBounds, leftBounds );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tleftCount += binCount;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tlet rightProb = 0;\n\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rightCount = count - leftCount;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\tconsole.warn( `MeshBVH: Invalid build strategy value ${ strategy } used.` );\n\n\t}\n\n\treturn { axis, pos };\n\n}\n\n// returns the average coordinate on the specified axis of the all the provided triangles\nfunction getAverage( triangleBounds, offset, count, axis ) {\n\n\tlet avg = 0;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tavg += triangleBounds[ i * 6 + axis * 2 ];\n\n\t}\n\n\treturn avg / count;\n\n}\n\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\nfunction computeTriangleBounds( geo, fullBounds ) {\n\n\tconst posAttr = geo.attributes.position;\n\tconst index = geo.index.array;\n\tconst triCount = index.length / 3;\n\tconst triangleBounds = new Float32Array( triCount * 6 );\n\tconst normalized = posAttr.normalized;\n\n\t// used for non-normalized positions\n\tconst posArr = posAttr.array;\n\n\t// support for an interleaved position buffer\n\tconst bufferOffset = posAttr.offset || 0;\n\tlet stride = 3;\n\tif ( posAttr.isInterleavedBufferAttribute ) {\n\n\t\tstride = posAttr.data.stride;\n\n\t}\n\n\t// used for normalized positions\n\tconst getters = [ 'getX', 'getY', 'getZ' ];\n\n\tfor ( let tri = 0; tri < triCount; tri ++ ) {\n\n\t\tconst tri3 = tri * 3;\n\t\tconst tri6 = tri * 6;\n\n\t\tlet ai, bi, ci;\n\n\t\tif ( normalized ) {\n\n\t\t\tai = index[ tri3 + 0 ];\n\t\t\tbi = index[ tri3 + 1 ];\n\t\t\tci = index[ tri3 + 2 ];\n\n\t\t} else {\n\n\t\t\tai = index[ tri3 + 0 ] * stride + bufferOffset;\n\t\t\tbi = index[ tri3 + 1 ] * stride + bufferOffset;\n\t\t\tci = index[ tri3 + 2 ] * stride + bufferOffset;\n\n\t\t}\n\n\t\tfor ( let el = 0; el < 3; el ++ ) {\n\n\t\t\tlet a, b, c;\n\n\t\t\tif ( normalized ) {\n\n\t\t\t\ta = posAttr[ getters[ el ] ]( ai );\n\t\t\t\tb = posAttr[ getters[ el ] ]( bi );\n\t\t\t\tc = posAttr[ getters[ el ] ]( ci );\n\n\t\t\t} else {\n\n\t\t\t\ta = posArr[ ai + el ];\n\t\t\t\tb = posArr[ bi + el ];\n\t\t\t\tc = posArr[ ci + el ];\n\n\t\t\t}\n\n\t\t\tlet min = a;\n\t\t\tif ( b < min ) min = b;\n\t\t\tif ( c < min ) min = c;\n\n\t\t\tlet max = a;\n\t\t\tif ( b > max ) max = b;\n\t\t\tif ( c > max ) max = c;\n\n\t\t\t// Increase the bounds size by float32 epsilon to avoid precision errors when\n\t\t\t// converting to 32 bit float. Scale the epsilon by the size of the numbers being\n\t\t\t// worked with.\n\t\t\tconst halfExtents = ( max - min ) / 2;\n\t\t\tconst el2 = el * 2;\n\t\t\ttriangleBounds[ tri6 + el2 + 0 ] = min + halfExtents;\n\t\t\ttriangleBounds[ tri6 + el2 + 1 ] = halfExtents + ( Math.abs( min ) + halfExtents ) * FLOAT32_EPSILON;\n\n\t\t\tif ( min < fullBounds[ el ] ) fullBounds[ el ] = min;\n\t\t\tif ( max > fullBounds[ el + 3 ] ) fullBounds[ el + 3 ] = max;\n\n\t\t}\n\n\t}\n\n\treturn triangleBounds;\n\n}\n\nexport function buildTree( geo, options ) {\n\n\tfunction triggerProgress( trianglesProcessed ) {\n\n\t\tif ( onProgress ) {\n\n\t\t\tonProgress( trianglesProcessed / totalTriangles );\n\n\t\t}\n\n\t}\n\n\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\n\tfunction splitNode( node, offset, count, centroidBoundingData = null, depth = 0 ) {\n\n\t\tif ( ! reachedMaxDepth && depth >= maxDepth ) {\n\n\t\t\treachedMaxDepth = true;\n\t\t\tif ( verbose ) {\n\n\t\t\t\tconsole.warn( `MeshBVH: Max depth of ${ maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\n\t\t\t\tconsole.warn( geo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// early out if we've met our capacity\n\t\tif ( count <= maxLeafTris || depth >= maxDepth ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\t// Find where to split the volume\n\t\tconst split = getOptimalSplit( node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy );\n\t\tif ( split.axis === - 1 ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\tconst splitOffset = partition( indexArray, triangleBounds, offset, count, split );\n\n\t\t// create the two new child nodes\n\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\n\t\t} else {\n\n\t\t\tnode.splitAxis = split.axis;\n\n\t\t\t// create the left child and compute its bounding box\n\t\t\tconst left = new MeshBVHNode();\n\t\t\tconst lstart = offset;\n\t\t\tconst lcount = splitOffset - offset;\n\t\t\tnode.left = left;\n\t\t\tleft.boundingData = new Float32Array( 6 );\n\n\t\t\tgetBounds( triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( left, lstart, lcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t\t// repeat for right\n\t\t\tconst right = new MeshBVHNode();\n\t\t\tconst rstart = splitOffset;\n\t\t\tconst rcount = count - lcount;\n\t\t\tnode.right = right;\n\t\t\tright.boundingData = new Float32Array( 6 );\n\n\t\t\tgetBounds( triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( right, rstart, rcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tensureIndex( geo, options );\n\n\t// Compute the full bounds of the geometry at the same time as triangle bounds because\n\t// we'll need it for the root bounds in the case with no groups and it should be fast here.\n\t// We can't use the geometrying bounding box if it's available because it may be out of date.\n\tconst fullBounds = new Float32Array( 6 );\n\tconst cacheCentroidBoundingData = new Float32Array( 6 );\n\tconst triangleBounds = computeTriangleBounds( geo, fullBounds );\n\tconst indexArray = geo.index.array;\n\tconst maxDepth = options.maxDepth;\n\tconst verbose = options.verbose;\n\tconst maxLeafTris = options.maxLeafTris;\n\tconst strategy = options.strategy;\n\tconst onProgress = options.onProgress;\n\tconst totalTriangles = geo.index.count / 3;\n\tlet reachedMaxDepth = false;\n\n\tconst roots = [];\n\tconst ranges = getRootIndexRanges( geo );\n\n\tif ( ranges.length === 1 ) {\n\n\t\tconst range = ranges[ 0 ];\n\t\tconst root = new MeshBVHNode();\n\t\troot.boundingData = fullBounds;\n\t\tgetCentroidBounds( triangleBounds, range.offset, range.count, cacheCentroidBoundingData );\n\n\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\troots.push( root );\n\n\t} else {\n\n\t\tfor ( let range of ranges ) {\n\n\t\t\tconst root = new MeshBVHNode();\n\t\t\troot.boundingData = new Float32Array( 6 );\n\t\t\tgetBounds( triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData );\n\n\t\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\t\troots.push( root );\n\n\t\t}\n\n\t}\n\n\treturn roots;\n\n}\n\nexport function buildPackedTree( geo, options ) {\n\n\t// boundingData  \t\t\t\t: 6 float32\n\t// right / offset \t\t\t\t: 1 uint32\n\t// splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\n\tconst roots = buildTree( geo, options );\n\n\tlet float32Array;\n\tlet uint32Array;\n\tlet uint16Array;\n\tconst packedRoots = [];\n\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\tfor ( let i = 0; i < roots.length; i ++ ) {\n\n\t\tconst root = roots[ i ];\n\t\tlet nodeCount = countNodes( root );\n\n\t\tconst buffer = new BufferConstructor( BYTES_PER_NODE * nodeCount );\n\t\tfloat32Array = new Float32Array( buffer );\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tpopulateBuffer( 0, root );\n\t\tpackedRoots.push( buffer );\n\n\t}\n\n\treturn packedRoots;\n\n\tfunction countNodes( node ) {\n\n\t\tif ( node.count ) {\n\n\t\t\treturn 1;\n\n\t\t} else {\n\n\t\t\treturn 1 + countNodes( node.left ) + countNodes( node.right );\n\n\t\t}\n\n\t}\n\n\tfunction populateBuffer( byteOffset, node ) {\n\n\t\tconst stride4Offset = byteOffset / 4;\n\t\tconst stride2Offset = byteOffset / 2;\n\t\tconst isLeaf = ! ! node.count;\n\t\tconst boundingData = node.boundingData;\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tfloat32Array[ stride4Offset + i ] = boundingData[ i ];\n\n\t\t}\n\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = node.offset;\n\t\t\tconst count = node.count;\n\t\t\tuint32Array[ stride4Offset + 6 ] = offset;\n\t\t\tuint16Array[ stride2Offset + 14 ] = count;\n\t\t\tuint16Array[ stride2Offset + 15 ] = IS_LEAFNODE_FLAG;\n\t\t\treturn byteOffset + BYTES_PER_NODE;\n\n\t\t} else {\n\n\t\t\tconst left = node.left;\n\t\t\tconst right = node.right;\n\t\t\tconst splitAxis = node.splitAxis;\n\n\t\t\tlet nextUnusedPointer;\n\t\t\tnextUnusedPointer = populateBuffer( byteOffset + BYTES_PER_NODE, left );\n\n\t\t\tif ( ( nextUnusedPointer / 4 ) > Math.pow( 2, 32 ) ) {\n\n\t\t\t\tthrow new Error( 'MeshBVH: Cannot store child pointer greater than 32 bits.' );\n\n\t\t\t}\n\n\t\t\tuint32Array[ stride4Offset + 6 ] = nextUnusedPointer / 4;\n\t\t\tnextUnusedPointer = populateBuffer( nextUnusedPointer, right );\n\n\t\t\tuint32Array[ stride4Offset + 7 ] = splitAxis;\n\t\t\treturn nextUnusedPointer;\n\n\t\t}\n\n\t}\n\n}\n","export class MeshBVHNode {\n\n\tconstructor() {\n\n\t\t// internal nodes have boundingData, left, right, and splitAxis\n\t\t// leaf nodes have offset and count (referring to primitives in the mesh geometry)\n\n\t}\n\n}\n","export function arrayToBox( nodeIndex32, array, target ) {\n\n\ttarget.min.x = array[ nodeIndex32 ];\n\ttarget.min.y = array[ nodeIndex32 + 1 ];\n\ttarget.min.z = array[ nodeIndex32 + 2 ];\n\n\ttarget.max.x = array[ nodeIndex32 + 3 ];\n\ttarget.max.y = array[ nodeIndex32 + 4 ];\n\ttarget.max.z = array[ nodeIndex32 + 5 ];\n\n\treturn target;\n\n}\n\nexport function getLongestEdgeIndex( bounds ) {\n\n\tlet splitDimIdx = - 1;\n\tlet splitDist = - Infinity;\n\n\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\n\t\tif ( dist > splitDist ) {\n\n\t\t\tsplitDist = dist;\n\t\t\tsplitDimIdx = i;\n\n\t\t}\n\n\t}\n\n\treturn splitDimIdx;\n\n}\n\n// copys bounds a into bounds b\nexport function copyBounds( source, target ) {\n\n\ttarget.set( source );\n\n}\n\n// sets bounds target to the union of bounds a and b\nexport function unionBounds( a, b, target ) {\n\n\tlet aVal, bVal;\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst d3 = d + 3;\n\n\t\t// set the minimum values\n\t\taVal = a[ d ];\n\t\tbVal = b[ d ];\n\t\ttarget[ d ] = aVal < bVal ? aVal : bVal;\n\n\t\t// set the max values\n\t\taVal = a[ d3 ];\n\t\tbVal = b[ d3 ];\n\t\ttarget[ d3 ] = aVal > bVal ? aVal : bVal;\n\n\t}\n\n}\n\n// expands the given bounds by the provided triangle bounds\nexport function expandByTriangleBounds( startIndex, triangleBounds, bounds ) {\n\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst tCenter = triangleBounds[ startIndex + 2 * d ];\n\t\tconst tHalf = triangleBounds[ startIndex + 2 * d + 1 ];\n\n\t\tconst tMin = tCenter - tHalf;\n\t\tconst tMax = tCenter + tHalf;\n\n\t\tif ( tMin < bounds[ d ] ) {\n\n\t\t\tbounds[ d ] = tMin;\n\n\t\t}\n\n\t\tif ( tMax > bounds[ d + 3 ] ) {\n\n\t\t\tbounds[ d + 3 ] = tMax;\n\n\t\t}\n\n\t}\n\n}\n\n// compute bounds surface area\nexport function computeSurfaceArea( bounds ) {\n\n\tconst d0 = bounds[ 3 ] - bounds[ 0 ];\n\tconst d1 = bounds[ 4 ] - bounds[ 1 ];\n\tconst d2 = bounds[ 5 ] - bounds[ 2 ];\n\n\treturn 2 * ( d0 * d1 + d1 * d2 + d2 * d0 );\n\n}\n","import { Box3, Vector3, Matrix4 } from 'three';\nimport { CONTAINED } from './Constants.js';\n\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { intersectTris, intersectClosestTri } from '../utils/GeometryRayIntersectUtilities.js';\nimport { setTriangle } from '../utils/TriangleUtilities.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\nimport { COUNT, OFFSET, LEFT_NODE, RIGHT_NODE, IS_LEAF, BOUNDING_DATA_INDEX, SPLIT_AXIS } from './nodeBufferFunctions.js';\n\nconst boundingBox = new Box3();\nconst boxIntersection = new Vector3();\nconst xyzFields = [ 'x', 'y', 'z' ];\n\nexport function raycast( nodeIndex32, geometry, side, ray, intersects ) {\n\n\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\tintersectTris( geometry, side, ray, offset, count, intersects );\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, boxIntersection ) ) {\n\n\t\t\traycast( leftIndex, geometry, side, ray, intersects );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, boxIntersection ) ) {\n\n\t\t\traycast( rightIndex, geometry, side, ray, intersects );\n\n\t\t}\n\n\t}\n\n}\n\nexport function raycastFirst( nodeIndex32, geometry, side, ray ) {\n\n\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\treturn intersectClosestTri( geometry, side, ray, offset, count );\n\n\t} else {\n\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\tconst xyzAxis = xyzFields[ splitAxis ];\n\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\tconst leftToRight = rayDir >= 0;\n\n\t\t// c1 is the child to check first\n\t\tlet c1, c2;\n\t\tif ( leftToRight ) {\n\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t} else {\n\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t}\n\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, boxIntersection );\n\t\tconst c1Result = c1Intersection ? raycastFirst( c1, geometry, side, ray ) : null;\n\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\tif ( c1Result ) {\n\n\t\t\t// check if the point is within the second bounds\n\t\t\t// \"point\" is in the local frame of the bvh\n\t\t\tconst point = c1Result.point[ xyzAxis ];\n\t\t\tconst isOutside = leftToRight ?\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\tif ( isOutside ) {\n\n\t\t\t\treturn c1Result;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, boxIntersection );\n\t\tconst c2Result = c2Intersection ? raycastFirst( c2, geometry, side, ray ) : null;\n\n\t\tif ( c1Result && c2Result ) {\n\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t} else {\n\n\t\t\treturn c1Result || c2Result || null;\n\n\t\t}\n\n\t}\n\n}\n\nexport const shapecast = ( function () {\n\n\tlet _box1, _box2;\n\tconst boxStack = [];\n\tconst boxPool = new PrimitivePool( () => new Box3() );\n\n\treturn function shapecast( ...args ) {\n\n\t\t_box1 = boxPool.getPrimitive();\n\t\t_box2 = boxPool.getPrimitive();\n\t\tboxStack.push( _box1, _box2 );\n\n\t\tconst result = shapecastTraverse( ...args );\n\n\t\tboxPool.releasePrimitive( _box1 );\n\t\tboxPool.releasePrimitive( _box2 );\n\t\tboxStack.pop();\n\t\tboxStack.pop();\n\n\t\tconst length = boxStack.length;\n\t\tif ( length > 0 ) {\n\n\t\t\t_box2 = boxStack[ length - 1 ];\n\t\t\t_box1 = boxStack[ length - 2 ];\n\n\t\t}\n\n\t\treturn result;\n\n\t};\n\n\tfunction shapecastTraverse(\n\t\tnodeIndex32,\n\t\tgeometry,\n\t\tintersectsBoundsFunc,\n\t\tintersectsRangeFunc,\n\t\tnodeScoreFunc = null,\n\t\tnodeIndexByteOffset = 0, // offset for unique node identifier\n\t\tdepth = 0\n\t) {\n\n\t\t// Define these inside the function so it has access to the local variables needed\n\t\t// when converting to the buffer equivalents\n\t\tfunction getLeftOffset( nodeIndex32 ) {\n\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\tnodeIndex32 = LEFT_NODE( nodeIndex32 );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\treturn OFFSET( nodeIndex32, uint32Array );\n\n\t\t}\n\n\t\tfunction getRightEndOffset( nodeIndex32 ) {\n\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\t// adjust offset to point to the right node\n\t\t\t\tnodeIndex32 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\t// return the end offset of the triangle range\n\t\t\treturn OFFSET( nodeIndex32, uint32Array ) + COUNT( nodeIndex16, uint16Array );\n\n\t\t}\n\n\t\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, _box1 );\n\t\t\treturn intersectsRangeFunc( offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1 );\n\n\t\t} else {\n\n\t\t\tconst left = LEFT_NODE( nodeIndex32 );\n\t\t\tconst right = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tlet c1 = left;\n\t\t\tlet c2 = right;\n\n\t\t\tlet score1, score2;\n\t\t\tlet box1, box2;\n\t\t\tif ( nodeScoreFunc ) {\n\n\t\t\t\tbox1 = _box1;\n\t\t\t\tbox2 = _box2;\n\n\t\t\t\t// bounding data is not offset\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\t\tscore1 = nodeScoreFunc( box1 );\n\t\t\t\tscore2 = nodeScoreFunc( box2 );\n\n\t\t\t\tif ( score2 < score1 ) {\n\n\t\t\t\t\tc1 = right;\n\t\t\t\t\tc2 = left;\n\n\t\t\t\t\tconst temp = score1;\n\t\t\t\t\tscore1 = score2;\n\t\t\t\t\tscore2 = temp;\n\n\t\t\t\t\tbox1 = box2;\n\t\t\t\t\t// box2 is always set before use below\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Check box 1 intersection\n\t\t\tif ( ! box1 ) {\n\n\t\t\t\tbox1 = _box1;\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\n\t\t\t}\n\n\t\t\tconst isC1Leaf = IS_LEAF( c1 * 2, uint16Array );\n\t\t\tconst c1Intersection = intersectsBoundsFunc( box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1 );\n\n\t\t\tlet c1StopTraversal;\n\t\t\tif ( c1Intersection === CONTAINED ) {\n\n\t\t\t\tconst offset = getLeftOffset( c1 );\n\t\t\t\tconst end = getRightEndOffset( c1 );\n\t\t\t\tconst count = end - offset;\n\n\t\t\t\tc1StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1 );\n\n\t\t\t} else {\n\n\t\t\t\tc1StopTraversal =\n\t\t\t\t\tc1Intersection &&\n\t\t\t\t\tshapecastTraverse(\n\t\t\t\t\t\tc1,\n\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\t\tdepth + 1\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( c1StopTraversal ) return true;\n\n\t\t\t// Check box 2 intersection\n\t\t\t// cached box2 will have been overwritten by previous traversal\n\t\t\tbox2 = _box2;\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\tconst isC2Leaf = IS_LEAF( c2 * 2, uint16Array );\n\t\t\tconst c2Intersection = intersectsBoundsFunc( box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2 );\n\n\t\t\tlet c2StopTraversal;\n\t\t\tif ( c2Intersection === CONTAINED ) {\n\n\t\t\t\tconst offset = getLeftOffset( c2 );\n\t\t\t\tconst end = getRightEndOffset( c2 );\n\t\t\t\tconst count = end - offset;\n\n\t\t\t\tc2StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2 );\n\n\t\t\t} else {\n\n\t\t\t\tc2StopTraversal =\n\t\t\t\t\tc2Intersection &&\n\t\t\t\t\tshapecastTraverse(\n\t\t\t\t\t\tc2,\n\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\t\tdepth + 1\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( c2StopTraversal ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n} )();\n\nexport const intersectsGeometry = ( function () {\n\n\tconst triangle = new ExtendedTriangle();\n\tconst triangle2 = new ExtendedTriangle();\n\tconst invertedMat = new Matrix4();\n\n\tconst obb = new OrientedBox();\n\tconst obb2 = new OrientedBox();\n\n\treturn function intersectsGeometry( nodeIndex32, geometry, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\t\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\tif ( cachedObb === null ) {\n\n\t\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\t\totherGeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\t\tcachedObb = obb;\n\n\t\t}\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst thisGeometry = geometry;\n\t\t\tconst thisIndex = thisGeometry.index;\n\t\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\t\tconst index = otherGeometry.index;\n\t\t\tconst pos = otherGeometry.attributes.position;\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t\t// here.\n\t\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\n\t\t\t\tobb2.matrix.copy( invertedMat );\n\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\n\n\t\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\n\n\t\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\t\tsetTriangle( triangle2, i, thisIndex, thisPos );\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn res;\n\n\t\t\t} else {\n\n\t\t\t\tfor ( let i = offset * 3, l = ( count + offset * 3 ); i < l; i += 3 ) {\n\n\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\tsetTriangle( triangle, i, thisIndex, thisPos );\n\t\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = nodeIndex32 + 8;\n\t\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\n\t\t\tconst leftIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t\tintersectsGeometry( left, geometry, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( leftIntersection ) return true;\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\n\t\t\tconst rightIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t\tintersectsGeometry( right, geometry, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( rightIntersection ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n} )();\n\nfunction intersectRay( nodeIndex32, array, ray, target ) {\n\n\tarrayToBox( nodeIndex32, array, boundingBox );\n\treturn ray.intersectBox( boundingBox, target );\n\n}\n\nconst bufferStack = [];\nlet _prevBuffer;\nlet _float32Array;\nlet _uint16Array;\nlet _uint32Array;\nexport function setBuffer( buffer ) {\n\n\tif ( _prevBuffer ) {\n\n\t\tbufferStack.push( _prevBuffer );\n\n\t}\n\n\t_prevBuffer = buffer;\n\t_float32Array = new Float32Array( buffer );\n\t_uint16Array = new Uint16Array( buffer );\n\t_uint32Array = new Uint32Array( buffer );\n\n}\n\nexport function clearBuffer() {\n\n\t_prevBuffer = null;\n\t_float32Array = null;\n\t_uint16Array = null;\n\t_uint32Array = null;\n\n\tif ( bufferStack.length ) {\n\n\t\tsetBuffer( bufferStack.pop() );\n\n\t}\n\n}\n","import { Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\n\nexport class OrientedBox {\n\n\tconstructor( min, max, matrix ) {\n\n\t\tthis.isOrientedBox = true;\n\t\tthis.min = new Vector3();\n\t\tthis.max = new Vector3();\n\t\tthis.matrix = new Matrix4();\n\t\tthis.invMatrix = new Matrix4();\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.needsUpdate = false;\n\n\t\tif ( min ) this.min.copy( min );\n\t\tif ( max ) this.max.copy( max );\n\t\tif ( matrix ) this.matrix.copy( matrix );\n\n\t}\n\n\tset( min, max, matrix ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\t\tthis.matrix.copy( matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.min.copy( other.min );\n\t\tthis.max.copy( other.max );\n\t\tthis.matrix.copy( other.matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nOrientedBox.prototype.update = ( function () {\n\n\treturn function update() {\n\n\t\tconst matrix = this.matrix;\n\t\tconst min = this.min;\n\t\tconst max = this.max;\n\n\t\tconst points = this.points;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\n\t\t\t\t\tconst v = points[ i ];\n\t\t\t\t\tv.x = x ? max.x : min.x;\n\t\t\t\t\tv.y = y ? max.y : min.y;\n\t\t\t\t\tv.z = z ? max.z : min.z;\n\n\t\t\t\t\tv.applyMatrix4( matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst minVec = points[ 0 ];\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst index = 1 << i;\n\t\t\tconst pi = points[ index ];\n\n\t\t\taxis.subVectors( minVec, pi );\n\t\t\tsb.setFromPoints( axis, points );\n\n\t\t}\n\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\n\n\t\tthis.invMatrix.copy( this.matrix ).invert();\n\t\tthis.needsUpdate = false;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsBox = ( function () {\n\n\tconst aabbBounds = new SeparatingAxisBounds();\n\treturn function intersectsBox( box ) {\n\n\t\t// TODO: should this be doing SAT against the AABB?\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\n\t\taabbBounds.min = min.x;\n\t\taabbBounds.max = max.x;\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.y;\n\t\taabbBounds.max = max.y;\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.z;\n\t\taabbBounds.max = max.z;\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\taabbBounds.setFromBox( axis, box );\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri = new ExtendedTriangle();\n\tconst pointsArr = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\treturn function intersectsTriangle( triangle ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! triangle.isExtendedTriangle ) {\n\n\t\t\tsaTri.copy( triangle );\n\t\t\tsaTri.update();\n\t\t\ttriangle = saTri;\n\n\t\t} else if ( triangle.needsUpdate ) {\n\n\t\t\ttriangle.update();\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\n\t\tpointsArr[ 0 ] = triangle.a;\n\t\tpointsArr[ 1 ] = triangle.b;\n\t\tpointsArr[ 2 ] = triangle.c;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst sa = satAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\tconst triSatBounds = triangle.satBounds;\n\t\tconst triSatAxes = triangle.satAxes;\n\t\tconst points = this.points;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = triSatBounds[ i ];\n\t\t\tconst sa = triSatAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check crossed axes\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sa1 = satAxes[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.closestPointToPoint = ( function () {\n\n\treturn function closestPointToPoint( point, target1 ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\ttarget1\n\t\t\t.copy( point )\n\t\t\t.applyMatrix4( this.invMatrix )\n\t\t\t.clamp( this.min, this.max )\n\t\t\t.applyMatrix4( this.matrix );\n\n\t\treturn target1;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToBox = ( function () {\n\n\tconst xyzFields = [ 'x', 'y', 'z' ];\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\n\t// early out if we find a value below threshold\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( this.intersectsBox( box ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tbox.getCenter( point2 );\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\n\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tconst threshold2 = threshold * threshold;\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst points = this.points;\n\n\n\t\t// iterate over every edge and compare distances\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check over all these points\n\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tpoint2.copy( p ).clamp( min, max );\n\n\t\t\tconst dist = p.distanceToSquared( point2 );\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( p );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate and check all line segment distances\n\t\tlet count = 0;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\n\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\n\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\n\n\t\t\t\t\t// get obb line segments\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst p1 = points[ index ];\n\t\t\t\t\tconst p2 = points[ index2 ];\n\t\t\t\t\tconst line1 = segments1[ count ];\n\t\t\t\t\tline1.set( p1, p2 );\n\n\n\t\t\t\t\t// get aabb line segments\n\t\t\t\t\tconst f1 = xyzFields[ i ];\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\n\t\t\t\t\tconst line2 = segments2[ count ];\n\t\t\t\t\tconst start = line2.start;\n\t\t\t\t\tconst end = line2.end;\n\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check all the other boxes point\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\n\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 12; i ++ ) {\n\n\t\t\tconst l1 = segments1[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\n\n\t\t\t\tconst l2 = segments2[ i2 ];\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n","import { Vector3 } from 'three';\n\nexport class SeparatingAxisBounds {\n\n\tconstructor() {\n\n\t\tthis.min = Infinity;\n\t\tthis.max = - Infinity;\n\n\t}\n\n\tsetFromPointsField( points, field ) {\n\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tconst val = p[ field ];\n\t\t\tmin = val < min ? val : min;\n\t\t\tmax = val > max ? val : max;\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tsetFromPoints( axis, points ) {\n\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tconst val = axis.dot( p );\n\t\t\tmin = val < min ? val : min;\n\t\t\tmax = val > max ? val : max;\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tisSeparated( other ) {\n\n\t\treturn this.min > other.max || other.min > this.max;\n\n\t}\n\n}\n\nSeparatingAxisBounds.prototype.setFromBox = ( function () {\n\n\tconst p = new Vector3();\n\treturn function setFromBox( axis, box ) {\n\n\t\tconst boxMin = box.min;\n\t\tconst boxMax = box.max;\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\n\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\n\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\n\n\t\t\t\t\tconst val = axis.dot( p );\n\t\t\t\t\tmin = Math.min( val, min );\n\t\t\t\t\tmax = Math.max( val, max );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t};\n\n} )();\n\nexport const areIntersecting = ( function () {\n\n\tconst cacheSatBounds = new SeparatingAxisBounds();\n\treturn function areIntersecting( shape1, shape2 ) {\n\n\t\tconst points1 = shape1.points;\n\t\tconst satAxes1 = shape1.satAxes;\n\t\tconst satBounds1 = shape1.satBounds;\n\n\t\tconst points2 = shape2.points;\n\t\tconst satAxes2 = shape2.satAxes;\n\t\tconst satBounds2 = shape2.satBounds;\n\n\t\t// check axes of the first shape\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds1[ i ];\n\t\t\tconst sa = satAxes1[ i ];\n\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check axes of the second shape\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds2[ i ];\n\t\t\tconst sa = satAxes2[ i ];\n\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t}\n\n\t};\n\n} )();\n","import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\n\nconst DIST_EPSILON = 1e-15;\nfunction isNearZero( value ) {\n\n\treturn Math.abs( value ) < DIST_EPSILON;\n\n}\n\nexport class ExtendedTriangle extends Triangle {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tthis.isExtendedTriangle = true;\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.points = [ this.a, this.b, this.c ];\n\t\tthis.sphere = new Sphere();\n\t\tthis.plane = new Plane();\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphereIntersectTriangle( sphere, this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst a = this.a;\n\t\tconst b = this.b;\n\t\tconst c = this.c;\n\t\tconst points = this.points;\n\n\t\tconst satAxes = this.satAxes;\n\t\tconst satBounds = this.satBounds;\n\n\t\tconst axis0 = satAxes[ 0 ];\n\t\tconst sab0 = satBounds[ 0 ];\n\t\tthis.getNormal( axis0 );\n\t\tsab0.setFromPoints( axis0, points );\n\n\t\tconst axis1 = satAxes[ 1 ];\n\t\tconst sab1 = satBounds[ 1 ];\n\t\taxis1.subVectors( a, b );\n\t\tsab1.setFromPoints( axis1, points );\n\n\t\tconst axis2 = satAxes[ 2 ];\n\t\tconst sab2 = satBounds[ 2 ];\n\t\taxis2.subVectors( b, c );\n\t\tsab2.setFromPoints( axis2, points );\n\n\t\tconst axis3 = satAxes[ 3 ];\n\t\tconst sab3 = satBounds[ 3 ];\n\t\taxis3.subVectors( c, a );\n\t\tsab3.setFromPoints( axis3, points );\n\n\t\tthis.sphere.setFromPoints( this.points );\n\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\n\t\tthis.needsUpdate = false;\n\n\t}\n\n}\n\nExtendedTriangle.prototype.closestPointToSegment = ( function () {\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\tconst edge = new Line3();\n\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\n\n\t\tconst { start, end } = segment;\n\t\tconst points = this.points;\n\t\tlet distSq;\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check the triangle edges\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst nexti = ( i + 1 ) % 3;\n\t\t\tedge.start.copy( points[ i ] );\n\t\t\tedge.end.copy( points[ nexti ] );\n\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\n\n\t\t\tdistSq = point1.distanceToSquared( point2 );\n\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check end points\n\t\tthis.closestPointToPoint( start, point1 );\n\t\tdistSq = start.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( start );\n\n\t\t}\n\n\t\tthis.closestPointToPoint( end, point1 );\n\t\tdistSq = end.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( end );\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n\nExtendedTriangle.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri2 = new ExtendedTriangle();\n\tconst arr1 = new Array( 3 );\n\tconst arr2 = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst tempDir = new Vector3();\n\tconst edge = new Line3();\n\tconst edge1 = new Line3();\n\tconst edge2 = new Line3();\n\n\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\n\treturn function intersectsTriangle( other, target = null ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! other.isExtendedTriangle ) {\n\n\t\t\tsaTri2.copy( other );\n\t\t\tsaTri2.update();\n\t\t\tother = saTri2;\n\n\t\t} else if ( other.needsUpdate ) {\n\n\t\t\tother.update();\n\n\t\t}\n\n\t\tconst plane1 = this.plane;\n\t\tconst plane2 = other.plane;\n\n\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\n\n\t\t\t// perform separating axis intersection test only for coplanar triangles\n\t\t\tconst satBounds1 = this.satBounds;\n\t\t\tconst satAxes1 = this.satAxes;\n\t\t\tarr2[ 0 ] = other.a;\n\t\t\tarr2[ 1 ] = other.b;\n\t\t\tarr2[ 2 ] = other.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds1[ i ];\n\t\t\t\tconst sa = satAxes1[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\tconst satBounds2 = other.satBounds;\n\t\t\tconst satAxes2 = other.satAxes;\n\t\t\tarr1[ 0 ] = this.a;\n\t\t\tarr1[ 1 ] = this.b;\n\t\t\tarr1[ 2 ] = this.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds2[ i ];\n\t\t\t\tconst sa = satAxes2[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\t// check crossed axes\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sa1 = satAxes1[ i ];\n\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\t\tconst sa2 = satAxes2[ i2 ];\n\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\n\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\n\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( target ) {\n\n\t\t\t\t// TODO find two points that intersect on the edges and make that the result\n\t\t\t\tconsole.warn( 'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\n\n\t\t\t\ttarget.start.set( 0, 0, 0 );\n\t\t\t\ttarget.end.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// find the edge that intersects the other triangle plane\n\t\t\tconst points1 = this.points;\n\t\t\tlet found1 = false;\n\t\t\tlet count1 = 0;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst p = points1[ i ];\n\t\t\t\tconst pNext = points1[ ( i + 1 ) % 3 ];\n\n\t\t\t\tedge.start.copy( p );\n\t\t\t\tedge.end.copy( pNext );\n\t\t\t\tedge.delta( dir1 );\n\n\t\t\t\tconst targetPoint = found1 ? edge1.start : edge1.end;\n\t\t\t\tconst startIntersects = isNearZero( plane2.distanceToPoint( p ) );\n\t\t\t\tif ( isNearZero( plane2.normal.dot( dir1 ) ) && startIntersects ) {\n\n\t\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\t\tedge1.copy( edge );\n\t\t\t\t\tcount1 = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\n\t\t\t\tconst doesIntersect = plane2.intersectLine( edge, targetPoint ) || startIntersects;\n\t\t\t\tif ( doesIntersect && ! isNearZero( targetPoint.distanceTo( pNext ) ) ) {\n\n\t\t\t\t\tcount1 ++;\n\t\t\t\t\tif ( found1 ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfound1 = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( count1 === 1 && this.containsPoint( edge1.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.end );\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count1 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find the other triangles edge that intersects this plane\n\t\t\tconst points2 = other.points;\n\t\t\tlet found2 = false;\n\t\t\tlet count2 = 0;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst p = points2[ i ];\n\t\t\t\tconst pNext = points2[ ( i + 1 ) % 3 ];\n\n\t\t\t\tedge.start.copy( p );\n\t\t\t\tedge.end.copy( pNext );\n\t\t\t\tedge.delta( dir2 );\n\n\t\t\t\tconst targetPoint = found2 ? edge2.start : edge2.end;\n\t\t\t\tconst startIntersects = isNearZero( plane1.distanceToPoint( p ) );\n\t\t\t\tif ( isNearZero( plane1.normal.dot( dir2 ) ) && startIntersects ) {\n\n\t\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\t\tedge2.copy( edge );\n\t\t\t\t\tcount2 = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\n\t\t\t\tconst doesIntersect = plane1.intersectLine( edge, targetPoint ) || startIntersects;\n\t\t\t\tif ( doesIntersect && ! isNearZero( targetPoint.distanceTo( pNext ) ) ) {\n\n\t\t\t\t\tcount2 ++;\n\t\t\t\t\tif ( found2 ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfound2 = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( count2 === 1 && this.containsPoint( edge2.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge2.end );\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count2 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find swap the second edge so both lines are running the same direction\n\t\t\tedge1.delta( dir1 );\n\t\t\tedge2.delta( dir2 );\n\n\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\n\n\t\t\t\tlet tmp = edge2.start;\n\t\t\t\tedge2.start = edge2.end;\n\t\t\t\tedge2.end = tmp;\n\n\t\t\t}\n\n\t\t\t// check if the edges are overlapping\n\t\t\tconst s1 = edge1.start.dot( dir1 );\n\t\t\tconst e1 = edge1.end.dot( dir1 );\n\t\t\tconst s2 = edge2.start.dot( dir1 );\n\t\t\tconst e2 = edge2.end.dot( dir1 );\n\t\t\tconst separated1 = e1 < s2;\n\t\t\tconst separated2 = s1 < e2;\n\n\t\t\tif ( s1 !== e2 && s2 !== e1 && separated1 === separated2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// assign the target output\n\t\t\tif ( target ) {\n\n\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\n\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.start );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.start.copy( edge2.start );\n\n\t\t\t\t}\n\n\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\n\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\n\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToTriangle = ( function () {\n\n\tconst point = new Vector3();\n\tconst point2 = new Vector3();\n\tconst cornerFields = [ 'a', 'b', 'c' ];\n\tconst line1 = new Line3();\n\tconst line2 = new Line3();\n\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\n\n\t\tconst lineTarget = target1 || target2 ? line1 : null;\n\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\n\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check all point distances\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tlet dist;\n\t\t\tconst field = cornerFields[ i ];\n\t\t\tconst otherVec = other[ field ];\n\t\t\tthis.closestPointToPoint( otherVec, point );\n\n\t\t\tdist = otherVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\n\n\t\t\t}\n\n\n\t\t\tconst thisVec = this[ field ];\n\t\t\tother.closestPointToPoint( thisVec, point );\n\n\t\t\tdist = thisVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\n\t\t\t\tif ( target2 ) target2.copy( point );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst f11 = cornerFields[ i ];\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\n\n\t\t\t\tconst f21 = cornerFields[ i2 ];\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\n\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\n\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n","import { Vector3, Vector2, Plane, Line3 } from 'three';\n\nexport const closestPointLineToLine = ( function () {\n\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst v02 = new Vector3();\n\treturn function closestPointLineToLine( l1, l2, result ) {\n\n\t\tconst v0 = l1.start;\n\t\tconst v10 = dir1;\n\t\tconst v2 = l2.start;\n\t\tconst v32 = dir2;\n\n\t\tv02.subVectors( v0, v2 );\n\t\tdir1.subVectors( l1.end, l1.start );\n\t\tdir2.subVectors( l2.end, l2.start );\n\n\t\t// float d0232 = v02.Dot(v32);\n\t\tconst d0232 = v02.dot( v32 );\n\n\t\t// float d3210 = v32.Dot(v10);\n\t\tconst d3210 = v32.dot( v10 );\n\n\t\t// float d3232 = v32.Dot(v32);\n\t\tconst d3232 = v32.dot( v32 );\n\n\t\t// float d0210 = v02.Dot(v10);\n\t\tconst d0210 = v02.dot( v10 );\n\n\t\t// float d1010 = v10.Dot(v10);\n\t\tconst d1010 = v10.dot( v10 );\n\n\t\t// float denom = d1010*d3232 - d3210*d3210;\n\t\tconst denom = d1010 * d3232 - d3210 * d3210;\n\n\t\tlet d, d2;\n\t\tif ( denom !== 0 ) {\n\n\t\t\td = ( d0232 * d3210 - d0210 * d3232 ) / denom;\n\n\t\t} else {\n\n\t\t\td = 0;\n\n\t\t}\n\n\t\td2 = ( d0232 + d * d3210 ) / d3232;\n\n\t\tresult.x = d;\n\t\tresult.y = d2;\n\n\t};\n\n} )();\n\nexport const closestPointsSegmentToSegment = ( function () {\n\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n\tconst paramResult = new Vector2();\n\tconst temp1 = new Vector3();\n\tconst temp2 = new Vector3();\n\treturn function closestPointsSegmentToSegment( l1, l2, target1, target2 ) {\n\n\t\tclosestPointLineToLine( l1, l2, paramResult );\n\n\t\tlet d = paramResult.x;\n\t\tlet d2 = paramResult.y;\n\t\tif ( d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1 ) {\n\n\t\t\tl1.at( d, target1 );\n\t\t\tl2.at( d2, target2 );\n\n\t\t\treturn;\n\n\t\t} else if ( d >= 0 && d <= 1 ) {\n\n\t\t\t// Only d2 is out of bounds.\n\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\tl2.at( 0, target2 );\n\n\t\t\t} else {\n\n\t\t\t\tl2.at( 1, target2 );\n\n\t\t\t}\n\n\t\t\tl1.closestPointToPoint( target2, true, target1 );\n\t\t\treturn;\n\n\t\t} else if ( d2 >= 0 && d2 <= 1 ) {\n\n\t\t\t// Only d is out of bounds.\n\t\t\tif ( d < 0 ) {\n\n\t\t\t\tl1.at( 0, target1 );\n\n\t\t\t} else {\n\n\t\t\t\tl1.at( 1, target1 );\n\n\t\t\t}\n\n\t\t\tl2.closestPointToPoint( target1, true, target2 );\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// Both u and u2 are out of bounds.\n\t\t\tlet p;\n\t\t\tif ( d < 0 ) {\n\n\t\t\t\tp = l1.start;\n\n\t\t\t} else {\n\n\t\t\t\tp = l1.end;\n\n\t\t\t}\n\n\t\t\tlet p2;\n\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\tp2 = l2.start;\n\n\t\t\t} else {\n\n\t\t\t\tp2 = l2.end;\n\n\t\t\t}\n\n\t\t\tconst closestPoint = temp1;\n\t\t\tconst closestPoint2 = temp2;\n\t\t\tl1.closestPointToPoint( p2, true, temp1 );\n\t\t\tl2.closestPointToPoint( p, true, temp2 );\n\n\t\t\tif ( closestPoint.distanceToSquared( p2 ) <= closestPoint2.distanceToSquared( p ) ) {\n\n\t\t\t\ttarget1.copy( closestPoint );\n\t\t\t\ttarget2.copy( p2 );\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\ttarget1.copy( p );\n\t\t\t\ttarget2.copy( closestPoint2 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n} )();\n\n\nexport const sphereIntersectTriangle = ( function () {\n\n\t// https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n\tconst closestPointTemp = new Vector3();\n\tconst projectedPointTemp = new Vector3();\n\tconst planeTemp = new Plane();\n\tconst lineTemp = new Line3();\n\treturn function sphereIntersectTriangle( sphere, triangle ) {\n\n\t\tconst { radius, center } = sphere;\n\t\tconst { a, b, c } = triangle;\n\n\t\t// phase 1\n\t\tlineTemp.start = a;\n\t\tlineTemp.end = b;\n\t\tconst closestPoint1 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint1.distanceTo( center ) <= radius ) return true;\n\n\t\tlineTemp.start = a;\n\t\tlineTemp.end = c;\n\t\tconst closestPoint2 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint2.distanceTo( center ) <= radius ) return true;\n\n\t\tlineTemp.start = b;\n\t\tlineTemp.end = c;\n\t\tconst closestPoint3 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint3.distanceTo( center ) <= radius ) return true;\n\n\t\t// phase 2\n\t\tconst plane = triangle.getPlane( planeTemp );\n\t\tconst dp = Math.abs( plane.distanceToPoint( center ) );\n\t\tif ( dp <= radius ) {\n\n\t\t\tconst pp = plane.projectPoint( center, projectedPointTemp );\n\t\t\tconst cp = triangle.containsPoint( pp );\n\t\t\tif ( cp ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n} )();\n","import { intersectTri } from './ThreeRayIntersectUtilities.js';\n\nexport function intersectTris( geo, side, ray, offset, count, intersections ) {\n\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tintersectTri( geo, side, ray, i, intersections );\n\n\t}\n\n}\n\nexport function intersectClosestTri( geo, side, ray, offset, count ) {\n\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tconst intersection = intersectTri( geo, side, ray, i );\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\treturn null;\n\n\t} else {\n\n\t\treturn hit;\n\n\t}\n\n}\n","import { Vector3, Vector2, Triangle, DoubleSide, BackSide } from 'three';\n\n// Ripped and modified From THREE.js Mesh raycast\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\nconst vA = /* @__PURE__ */ new Vector3();\nconst vB = /* @__PURE__ */ new Vector3();\nconst vC = /* @__PURE__ */ new Vector3();\n\nconst uvA = /* @__PURE__ */ new Vector2();\nconst uvB = /* @__PURE__ */ new Vector2();\nconst uvC = /* @__PURE__ */ new Vector2();\n\nconst intersectionPoint = /* @__PURE__ */ new Vector3();\nfunction checkIntersection( ray, pA, pB, pC, point, side ) {\n\n\tlet intersect;\n\tif ( side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\tconst distance = ray.origin.distanceTo( point );\n\n\treturn {\n\n\t\tdistance: distance,\n\t\tpoint: point.clone(),\n\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( ray, position, uv, a, b, c, side ) {\n\n\tvA.fromBufferAttribute( position, a );\n\tvB.fromBufferAttribute( position, b );\n\tvC.fromBufferAttribute( position, c );\n\n\tconst intersection = checkIntersection( ray, vA, vB, vC, intersectionPoint, side );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2( ) );\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( vA, vB, vC, face.normal );\n\n\t\tintersection.face = face;\n\t\tintersection.faceIndex = a;\n\n\t}\n\n\treturn intersection;\n\n}\n\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\nfunction intersectTri( geo, side, ray, tri, intersections ) {\n\n\tconst triOffset = tri * 3;\n\tconst a = geo.index.getX( triOffset );\n\tconst b = geo.index.getX( triOffset + 1 );\n\tconst c = geo.index.getX( triOffset + 2 );\n\n\tconst intersection = checkBufferGeometryIntersection( ray, geo.attributes.position, geo.attributes.uv, a, b, c, side );\n\n\tif ( intersection ) {\n\n\t\tintersection.faceIndex = tri;\n\t\tif ( intersections ) intersections.push( intersection );\n\t\treturn intersection;\n\n\t}\n\n\treturn null;\n\n}\n\nexport { intersectTri };\n","\nimport { Vector2, Vector3, Triangle } from 'three';\n\n// sets the vertices of triangle `tri` with the 3 vertices after i\nexport function setTriangle( tri, i, index, pos ) {\n\n\tconst ta = tri.a;\n\tconst tb = tri.b;\n\tconst tc = tri.c;\n\n\tlet i0 = i;\n\tlet i1 = i + 1;\n\tlet i2 = i + 2;\n\tif ( index ) {\n\n\t\ti0 = index.getX( i );\n\t\ti1 = index.getX( i + 1 );\n\t\ti2 = index.getX( i + 2 );\n\n\t}\n\n\tta.x = pos.getX( i0 );\n\tta.y = pos.getY( i0 );\n\tta.z = pos.getZ( i0 );\n\n\ttb.x = pos.getX( i1 );\n\ttb.y = pos.getY( i1 );\n\ttb.z = pos.getZ( i1 );\n\n\ttc.x = pos.getX( i2 );\n\ttc.y = pos.getY( i2 );\n\ttc.z = pos.getZ( i2 );\n\n}\n\nexport function iterateOverTriangles(\n\toffset,\n\tcount,\n\tgeometry,\n\tintersectsTriangleFunc,\n\tcontained,\n\tdepth,\n\ttriangle\n) {\n\n\tconst index = geometry.index;\n\tconst pos = geometry.attributes.position;\n\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\tsetTriangle( triangle, i * 3, index, pos );\n\t\ttriangle.needsUpdate = true;\n\n\t\tif ( intersectsTriangleFunc( triangle, i, contained, depth ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\nconst tempV1 = /* @__PURE__ */ new Vector3();\nconst tempV2 = /* @__PURE__ */ new Vector3();\nconst tempV3 = /* @__PURE__ */ new Vector3();\nconst tempUV1 = /* @__PURE__ */ new Vector2();\nconst tempUV2 = /* @__PURE__ */ new Vector2();\nconst tempUV3 = /* @__PURE__ */ new Vector2();\n\nexport function getTriangleHitPointInfo( point, geometry, triangleIndex, target ) {\n\n\tconst indices = geometry.getIndex().array;\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst uvs = geometry.getAttribute( 'uv' );\n\n\tconst a = indices[ triangleIndex * 3 ];\n\tconst b = indices[ triangleIndex * 3 + 1 ];\n\tconst c = indices[ triangleIndex * 3 + 2 ];\n\n\ttempV1.fromBufferAttribute( positions, a );\n\ttempV2.fromBufferAttribute( positions, b );\n\ttempV3.fromBufferAttribute( positions, c );\n\n\t// find the associated material index\n\tlet materialIndex = 0;\n\tconst groups = geometry.groups;\n\tconst firstVertexIndex = triangleIndex * 3;\n\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\t\tconst { start, count } = group;\n\t\tif ( firstVertexIndex >= start && firstVertexIndex < start + count ) {\n\n\t\t\tmaterialIndex = group.materialIndex;\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// extract uvs\n\tlet uv = null;\n\tif ( uvs ) {\n\n\t\ttempUV1.fromBufferAttribute( uvs, a );\n\t\ttempUV2.fromBufferAttribute( uvs, b );\n\t\ttempUV3.fromBufferAttribute( uvs, c );\n\n\t\tif ( target && target.uv ) uv = target.uv;\n\t\telse uv = new Vector2();\n\n\t\tTriangle.getUV( point, tempV1, tempV2, tempV3, tempUV1, tempUV2, tempUV3, uv );\n\n\t}\n\n\t// adjust the provided target or create a new one\n\tif ( target ) {\n\n\t\tif ( ! target.face ) target.face = { };\n\t\ttarget.face.a = a;\n\t\ttarget.face.b = b;\n\t\ttarget.face.c = c;\n\t\ttarget.face.materialIndex = materialIndex;\n\t\tif ( ! target.face.normal ) target.face.normal = new Vector3();\n\t\tTriangle.getNormal( tempV1, tempV2, tempV3, target.face.normal );\n\n\t\tif ( ! target.uv ) target.uv = new Vector2();\n\t\ttarget.uv.copy( uv );\n\n\t\treturn target;\n\n\t} else {\n\n\t\treturn {\n\t\t\tface: {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tmaterialIndex: materialIndex,\n\t\t\t\tnormal: Triangle.getNormal( tempV1, tempV2, tempV3, new Vector3() )\n\t\t\t},\n\t\t\tuv: uv\n\t\t};\n\n\t}\n\n}\n","export class PrimitivePool {\n\n\tconstructor( getNewPrimitive ) {\n\n\t\tthis._getNewPrimitive = getNewPrimitive;\n\t\tthis._primitives = [];\n\n\t}\n\n\tgetPrimitive() {\n\n\t\tconst primitives = this._primitives;\n\t\tif ( primitives.length === 0 ) {\n\n\t\t\treturn this._getNewPrimitive();\n\n\t\t} else {\n\n\t\t\treturn primitives.pop();\n\n\t\t}\n\n\t}\n\n\treleasePrimitive( primitive ) {\n\n\t\tthis._primitives.push( primitive );\n\n\t}\n\n}\n","export function IS_LEAF( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 15 ] === 0xFFFF;\n\n}\n\nexport function OFFSET( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nexport function COUNT( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 14 ];\n\n}\n\nexport function LEFT_NODE( n32 ) {\n\n\treturn n32 + 8;\n\n}\n\nexport function RIGHT_NODE( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nexport function SPLIT_AXIS( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 7 ];\n\n}\n\nexport function BOUNDING_DATA_INDEX( n32 ) {\n\n\treturn n32;\n\n}\n","import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nclass MeshBVHRootVisualizer extends Object3D {\n\n\tget isMesh() {\n\n\t\treturn ! this.displayEdges;\n\n\t}\n\n\tget isLineSegments() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tget isLine() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tconstructor( mesh, material, depth = 10, group = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.material = material;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.name = 'MeshBVHRootVisualizer';\n\t\tthis.depth = depth;\n\t\tthis.displayParents = false;\n\t\tthis.mesh = mesh;\n\t\tthis.displayEdges = true;\n\t\tthis._group = group;\n\n\t}\n\n\traycast() {}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst boundsTree = this.mesh.geometry.boundsTree;\n\t\tconst group = this._group;\n\t\tgeometry.dispose();\n\t\tthis.visible = false;\n\t\tif ( boundsTree ) {\n\n\t\t\t// count the number of bounds required\n\t\t\tconst targetDepth = this.depth - 1;\n\t\t\tconst displayParents = this.displayParents;\n\t\t\tlet boundsCount = 0;\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\tif ( depth === targetDepth || isLeaf ) {\n\n\t\t\t\t\tboundsCount ++;\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\t// fill in the position buffer with the bounds corners\n\t\t\tlet posIndex = 0;\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\tconst terminate = depth === targetDepth || isLeaf;\n\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn terminate;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\tlet indexArray;\n\t\t\tlet indices;\n\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t// x axis\n\t\t\t\t\t0, 4,\n\t\t\t\t\t1, 5,\n\t\t\t\t\t2, 6,\n\t\t\t\t\t3, 7,\n\n\t\t\t\t\t// y axis\n\t\t\t\t\t0, 2,\n\t\t\t\t\t1, 3,\n\t\t\t\t\t4, 6,\n\t\t\t\t\t5, 7,\n\n\t\t\t\t\t// z axis\n\t\t\t\t\t0, 1,\n\t\t\t\t\t2, 3,\n\t\t\t\t\t4, 5,\n\t\t\t\t\t6, 7,\n\t\t\t\t] );\n\n\t\t\t} else {\n\n\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t// X-, X+\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t} else {\n\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t}\n\n\t\t\tconst indexLength = indices.length;\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\tconst posOffset = i * 8;\n\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the geometry\n\t\t\tgeometry.setIndex(\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\n\t\t\t);\n\t\t\tgeometry.setAttribute(\n\t\t\t\t'position',\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\n\t\t\t);\n\t\t\tthis.visible = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass MeshBVHVisualizer extends Group {\n\n\tget color() {\n\n\t\treturn this.edgeMaterial.color;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.edgeMaterial.opacity;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tthis.edgeMaterial.opacity = v;\n\t\tthis.meshMaterial.opacity = v;\n\n\t}\n\n\tconstructor( mesh, depth = 10 ) {\n\n\t\tsuper();\n\n\t\tthis.name = 'MeshBVHVisualizer';\n\t\tthis.depth = depth;\n\t\tthis.mesh = mesh;\n\t\tthis.displayParents = false;\n\t\tthis.displayEdges = true;\n\t\tthis._roots = [];\n\n\t\tconst edgeMaterial = new LineBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tconst meshMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\tthis.edgeMaterial = edgeMaterial;\n\t\tthis.meshMaterial = meshMaterial;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst bvh = this.mesh.geometry.boundsTree;\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\tconst root = this._roots.pop();\n\t\t\troot.geometry.dispose();\n\t\t\tthis.remove( root );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\tconst root = new MeshBVHRootVisualizer( this.mesh, this.edgeMaterial, this.depth, i );\n\t\t\t\tthis.add( root );\n\t\t\t\tthis._roots.push( root );\n\n\t\t\t}\n\n\t\t\tconst root = this._roots[ i ];\n\t\t\troot.depth = this.depth;\n\t\t\troot.mesh = this.mesh;\n\t\t\troot.displayParents = this.displayParents;\n\t\t\troot.displayEdges = this.displayEdges;\n\t\t\troot.material = this.displayEdges ? this.edgeMaterial : this.meshMaterial;\n\t\t\troot.update();\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( ...args ) {\n\n\t\tthis.position.copy( this.mesh.position );\n\t\tthis.rotation.copy( this.mesh.rotation );\n\t\tthis.scale.copy( this.mesh.scale );\n\n\t\tsuper.updateMatrixWorld( ...args );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.depth = source.depth;\n\t\tthis.mesh = source.mesh;\n\n\t}\n\n\tclone() {\n\n\t\treturn new MeshBVHVisualizer( this.mesh, this.depth );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.edgeMaterial.dispose();\n\t\tthis.meshMaterial.dispose();\n\n\t\tconst children = this.children;\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t}\n\n\t}\n\n}\n\n\nexport { MeshBVHVisualizer };\n","import { Box3, Vector3 } from 'three';\nimport { TRAVERSAL_COST, TRIANGLE_INTERSECT_COST } from '../core/Constants.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\n\nconst _box1 = /* @__PURE__ */ new Box3();\nconst _box2 = /* @__PURE__ */ new Box3();\nconst _vec = /* @__PURE__ */ new Vector3();\n\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\nfunction getPrimitiveSize( el ) {\n\n\tswitch ( typeof el ) {\n\n\t\tcase 'number':\n\t\t\treturn 8;\n\t\tcase 'string':\n\t\t\treturn el.length * 2;\n\t\tcase 'boolean':\n\t\t\treturn 4;\n\t\tdefault:\n\t\t\treturn 0;\n\n\t}\n\n}\n\nfunction isTypedArray( arr ) {\n\n\tconst regex = /(Uint|Int|Float)(8|16|32)Array/;\n\treturn regex.test( arr.constructor.name );\n\n}\n\nfunction getRootExtremes( bvh, group ) {\n\n\tconst result = {\n\t\tnodeCount: 0,\n\t\tleafNodeCount: 0,\n\n\t\tdepth: {\n\t\t\tmin: Infinity, max: - Infinity\n\t\t},\n\t\ttris: {\n\t\t\tmin: Infinity, max: - Infinity\n\t\t},\n\t\tsplits: [ 0, 0, 0 ],\n\t\tsurfaceAreaScore: 0,\n\t};\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offsetOrSplit, count ) => {\n\n\t\tconst l0 = boundingData[ 0 + 3 ] - boundingData[ 0 ];\n\t\tconst l1 = boundingData[ 1 + 3 ] - boundingData[ 1 ];\n\t\tconst l2 = boundingData[ 2 + 3 ] - boundingData[ 2 ];\n\n\t\tconst surfaceArea = 2 * ( l0 * l1 + l1 * l2 + l2 * l0 );\n\n\t\tresult.nodeCount ++;\n\t\tif ( isLeaf ) {\n\n\t\t\tresult.leafNodeCount ++;\n\n\t\t\tresult.depth.min = Math.min( depth, result.depth.min );\n\t\t\tresult.depth.max = Math.max( depth, result.depth.max );\n\n\t\t\tresult.tris.min = Math.min( count, result.tris.min );\n\t\t\tresult.tris.max = Math.max( count, result.tris.max );\n\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\n\n\t\t} else {\n\n\t\t\tresult.splits[ offsetOrSplit ] ++;\n\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\n\n\t\t}\n\n\t}, group );\n\n\t// If there are no leaf nodes because the tree hasn't finished generating yet.\n\tif ( result.tris.min === Infinity ) {\n\n\t\tresult.tris.min = 0;\n\t\tresult.tris.max = 0;\n\n\t}\n\n\tif ( result.depth.min === Infinity ) {\n\n\t\tresult.depth.min = 0;\n\t\tresult.depth.max = 0;\n\n\t}\n\n\treturn result;\n\n}\n\nfunction getBVHExtremes( bvh ) {\n\n\treturn bvh._roots.map( ( root, i ) => getRootExtremes( bvh, i ) );\n\n}\n\nfunction estimateMemoryInBytes( obj ) {\n\n\tconst traversed = new Set();\n\tconst stack = [ obj ];\n\tlet bytes = 0;\n\n\twhile ( stack.length ) {\n\n\t\tconst curr = stack.pop();\n\t\tif ( traversed.has( curr ) ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\ttraversed.add( curr );\n\n\t\tfor ( let key in curr ) {\n\n\t\t\tif ( ! curr.hasOwnProperty( key ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tbytes += getPrimitiveSize( key );\n\n\t\t\tconst value = curr[ key ];\n\t\t\tif ( value && ( typeof value === 'object' || typeof value === 'function' ) ) {\n\n\t\t\t\tif ( isTypedArray( value ) ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else if ( value instanceof ArrayBuffer ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstack.push( value );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tbytes += getPrimitiveSize( value );\n\n\t\t\t}\n\n\n\t\t}\n\n\t}\n\n\treturn bytes;\n\n}\n\nfunction validateBounds( bvh ) {\n\n\tconst geometry = bvh.geometry;\n\tconst depthStack = [];\n\tconst index = geometry.index;\n\tconst position = geometry.getAttribute( 'position' );\n\tlet passes = true;\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\tconst info = {\n\t\t\tdepth,\n\t\t\tisLeaf,\n\t\t\tboundingData,\n\t\t\toffset,\n\t\t\tcount,\n\t\t};\n\t\tdepthStack[ depth ] = info;\n\n\t\tarrayToBox( 0, boundingData, _box1 );\n\t\tconst parent = depthStack[ depth - 1 ];\n\n\t\tif ( isLeaf ) {\n\n\t\t\t// check triangles\n\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\n\n\t\t\t\tconst i0 = index.getX( i );\n\t\t\t\tconst i1 = index.getX( i + 1 );\n\t\t\t\tconst i2 = index.getX( i + 2 );\n\n\t\t\t\tlet isContained;\n\n\t\t\t\t_vec.fromBufferAttribute( position, i0 );\n\t\t\t\tisContained = _box1.containsPoint( _vec );\n\n\t\t\t\t_vec.fromBufferAttribute( position, i1 );\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\t_vec.fromBufferAttribute( position, i2 );\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\tconsole.assert( isContained, 'Leaf bounds does not fully contain triangle.' );\n\t\t\t\tpasses = passes && isContained;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parent ) {\n\n\t\t\t// check if my bounds fit in my parents\n\t\t\tarrayToBox( 0, boundingData, _box2 );\n\n\t\t\tconst isContained = _box2.containsBox( _box1 );\n\t\t\tconsole.assert( isContained, 'Parent bounds does not fully contain child.' );\n\t\t\tpasses = passes && isContained;\n\n\t\t}\n\n\t} );\n\n\treturn passes;\n\n}\n\n// Returns a simple, human readable object that represents the BVH.\nfunction getJSONStructure( bvh ) {\n\n\tconst depthStack = [];\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\tconst info = {\n\t\t\tbounds: arrayToBox( 0, boundingData, new Box3() ),\n\t\t};\n\n\t\tif ( isLeaf ) {\n\n\t\t\tinfo.count = count;\n\t\t\tinfo.offset = offset;\n\n\t\t} else {\n\n\t\t\tinfo.left = null;\n\t\t\tinfo.right = null;\n\n\t\t}\n\n\t\tdepthStack[ depth ] = info;\n\n\t\t// traversal hits the left then right node\n\t\tconst parent = depthStack[ depth - 1 ];\n\t\tif ( parent ) {\n\n\t\t\tif ( parent.left === null ) {\n\n\t\t\t\tparent.left = info;\n\n\t\t\t} else {\n\n\t\t\t\tparent.right = info;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn depthStack[ 0 ];\n\n}\n\nexport { estimateMemoryInBytes, getBVHExtremes, validateBounds, getJSONStructure };\n","import { Ray, Matrix4, Mesh } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst ray = /* @__PURE__ */ new Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n","import {\n\tDataTexture,\n\tFloatType,\n\tUnsignedIntType,\n\tRGBAFormat,\n\tRGIntegerFormat,\n\tNearestFilter,\n} from 'three';\nimport {\n\tFloatVertexAttributeTexture,\n\tUIntVertexAttributeTexture,\n} from './VertexAttributeTexture.js';\nimport { BYTES_PER_NODE } from '../core/Constants.js';\nimport {\n\tBOUNDING_DATA_INDEX,\n\tCOUNT,\n\tIS_LEAF,\n\tRIGHT_NODE,\n\tOFFSET,\n\tSPLIT_AXIS,\n} from '../core/nodeBufferFunctions.js';\n\nfunction bvhToTextures( bvh, boundsTexture, contentsTexture ) {\n\n\tconst roots = bvh._roots;\n\n\tif ( roots.length !== 1 ) {\n\n\t\tthrow new Error( 'MeshBVHUniformStruct: Multi-root BVHs not supported.' );\n\n\t}\n\n\tconst root = roots[ 0 ];\n\tconst uint16Array = new Uint16Array( root );\n\tconst uint32Array = new Uint32Array( root );\n\tconst float32Array = new Float32Array( root );\n\n\t// Both bounds need two elements per node so compute the height so it's twice as long as\n\t// the width so we can expand the row by two and still have a square texture\n\tconst nodeCount = root.byteLength / BYTES_PER_NODE;\n\tconst boundsDimension = 2 * Math.ceil( Math.sqrt( nodeCount / 2 ) );\n\tconst boundsArray = new Float32Array( 4 * boundsDimension * boundsDimension );\n\n\tconst contentsDimension = Math.ceil( Math.sqrt( nodeCount ) );\n\tconst contentsArray = new Uint32Array( 2 * contentsDimension * contentsDimension );\n\n\tfor ( let i = 0; i < nodeCount; i ++ ) {\n\n\t\tconst nodeIndex32 = i * BYTES_PER_NODE / 4;\n\t\tconst nodeIndex16 = nodeIndex32 * 2;\n\t\tconst boundsIndex = BOUNDING_DATA_INDEX( nodeIndex32 );\n\t\tfor ( let b = 0; b < 3; b ++ ) {\n\n\t\t\tboundsArray[ 8 * i + 0 + b ] = float32Array[ boundsIndex + 0 + b ];\n\t\t\tboundsArray[ 8 * i + 4 + b ] = float32Array[ boundsIndex + 3 + b ];\n\n\t\t}\n\n\t\tif ( IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\n\t\t\tconst mergedLeafCount = 0xffff0000 | count;\n\t\t\tcontentsArray[ i * 2 + 0 ] = mergedLeafCount;\n\t\t\tcontentsArray[ i * 2 + 1 ] = offset;\n\n\t\t} else {\n\n\t\t\tconst rightIndex = 4 * RIGHT_NODE( nodeIndex32, uint32Array ) / BYTES_PER_NODE;\n\t\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\n\t\t\tcontentsArray[ i * 2 + 0 ] = splitAxis;\n\t\t\tcontentsArray[ i * 2 + 1 ] = rightIndex;\n\n\t\t}\n\n\t}\n\n\tboundsTexture.image.data = boundsArray;\n\tboundsTexture.image.width = boundsDimension;\n\tboundsTexture.image.height = boundsDimension;\n\tboundsTexture.format = RGBAFormat;\n\tboundsTexture.type = FloatType;\n\tboundsTexture.internalFormat = 'RGBA32F';\n\tboundsTexture.minFilter = NearestFilter;\n\tboundsTexture.magFilter = NearestFilter;\n\tboundsTexture.generateMipmaps = false;\n\tboundsTexture.needsUpdate = true;\n\tboundsTexture.dispose();\n\n\tcontentsTexture.image.data = contentsArray;\n\tcontentsTexture.image.width = contentsDimension;\n\tcontentsTexture.image.height = contentsDimension;\n\tcontentsTexture.format = RGIntegerFormat;\n\tcontentsTexture.type = UnsignedIntType;\n\tcontentsTexture.internalFormat = 'RG32UI';\n\tcontentsTexture.minFilter = NearestFilter;\n\tcontentsTexture.magFilter = NearestFilter;\n\tcontentsTexture.generateMipmaps = false;\n\tcontentsTexture.needsUpdate = true;\n\tcontentsTexture.dispose();\n\n}\n\nexport class MeshBVHUniformStruct {\n\n\tconstructor() {\n\n\t\tthis.autoDispose = true;\n\t\tthis.index = new UIntVertexAttributeTexture();\n\t\tthis.position = new FloatVertexAttributeTexture();\n\t\tthis.bvhBounds = new DataTexture();\n\t\tthis.bvhContents = new DataTexture();\n\n\t\tthis.index.overrideItemSize = 3;\n\n\t}\n\n\tupdateFrom( bvh ) {\n\n\t\tconst { geometry } = bvh;\n\n\t\tbvhToTextures( bvh, this.bvhBounds, this.bvhContents );\n\n\t\tthis.index.updateFrom( geometry.index );\n\t\tthis.position.updateFrom( geometry.attributes.position );\n\n\t}\n\n\tdispose() {\n\n\t\tconst { index, position, bvhBounds, bvhContents } = this;\n\n\t\tif ( index ) index.dispose();\n\t\tif ( position ) position.dispose();\n\t\tif ( bvhBounds ) bvhBounds.dispose();\n\t\tif ( bvhContents ) bvhContents.dispose();\n\n\t}\n\n}\n","import {\n\tDataTexture,\n\tFloatType,\n\tIntType,\n\tUnsignedIntType,\n\tByteType,\n\tUnsignedByteType,\n\tShortType,\n\tUnsignedShortType,\n\n\tRedFormat,\n\tRGFormat,\n\tRGBAFormat,\n\n\tRedIntegerFormat,\n\tRGIntegerFormat,\n\tRGBAIntegerFormat,\n\n\tNearestFilter,\n} from 'three';\n\nfunction countToStringFormat( count ) {\n\n\tswitch ( count ) {\n\n\t\tcase 1: return 'R';\n\t\tcase 2: return 'RG';\n\t\tcase 3: return 'RGBA';\n\t\tcase 4: return 'RGBA';\n\n\t}\n\n\tthrow new Error();\n\n}\n\nfunction countToFormat( count ) {\n\n\tswitch ( count ) {\n\n\t\tcase 1: return RedFormat;\n\t\tcase 2: return RGFormat;\n\t\tcase 3: return RGBAFormat;\n\t\tcase 4: return RGBAFormat;\n\n\t}\n\n}\n\nfunction countToIntFormat( count ) {\n\n\tswitch ( count ) {\n\n\t\tcase 1: return RedIntegerFormat;\n\t\tcase 2: return RGIntegerFormat;\n\t\tcase 3: return RGBAIntegerFormat;\n\t\tcase 4: return RGBAIntegerFormat;\n\n\t}\n\n}\n\nexport class VertexAttributeTexture extends DataTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.generateMipmaps = false;\n\t\tthis.overrideItemSize = null;\n\t\tthis._forcedType = null;\n\n\t}\n\n\tupdateFrom( attr ) {\n\n\t\tconst overrideItemSize = this.overrideItemSize;\n\t\tconst originalItemSize = attr.itemSize;\n\t\tconst originalCount = attr.count;\n\t\tif ( overrideItemSize !== null ) {\n\n\t\t\tif ( ( originalItemSize * originalCount ) % overrideItemSize !== 0.0 ) {\n\n\t\t\t\tthrow new Error( 'VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.' );\n\n\t\t\t}\n\n\t\t\tattr.itemSize = overrideItemSize;\n\t\t\tattr.count = originalCount * originalItemSize / overrideItemSize;\n\n\t\t}\n\n\t\tconst itemSize = attr.itemSize;\n\t\tconst count = attr.count;\n\t\tconst normalized = attr.normalized;\n\t\tconst originalBufferCons = attr.array.constructor;\n\t\tconst byteCount = originalBufferCons.BYTES_PER_ELEMENT;\n\t\tlet targetType = this._forcedType;\n\t\tlet finalStride = itemSize;\n\n\t\t// derive the type of texture this should be in the shader\n\t\tif ( targetType === null ) {\n\n\t\t\tswitch ( originalBufferCons ) {\n\n\t\t\t\tcase Float32Array:\n\t\t\t\t\ttargetType = FloatType;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Uint8Array:\n\t\t\t\tcase Uint16Array:\n\t\t\t\tcase Uint32Array:\n\t\t\t\t\ttargetType = UnsignedIntType;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Int8Array:\n\t\t\t\tcase Int16Array:\n\t\t\t\tcase Int32Array:\n\t\t\t\t\ttargetType = IntType;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// get the target format to store the texture as\n\t\tlet type, format, normalizeValue, targetBufferCons;\n\t\tlet internalFormat = countToStringFormat( itemSize );\n\t\tswitch ( targetType ) {\n\n\t\t\tcase FloatType:\n\t\t\t\tnormalizeValue = 1.0;\n\t\t\t\tformat = countToFormat( itemSize );\n\n\t\t\t\tif ( normalized && byteCount === 1 ) {\n\n\t\t\t\t\ttargetBufferCons = originalBufferCons;\n\t\t\t\t\tinternalFormat += '8';\n\n\t\t\t\t\tif ( originalBufferCons === Uint8Array ) {\n\n\t\t\t\t\t\ttype = UnsignedByteType;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttype = ByteType;\n\t\t\t\t\t\tinternalFormat += '_SNORM';\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetBufferCons = Float32Array;\n\t\t\t\t\tinternalFormat += '32F';\n\t\t\t\t\ttype = FloatType;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase IntType:\n\t\t\t\tinternalFormat += byteCount * 8 + 'I';\n\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\n\t\t\t\tformat = countToIntFormat( itemSize );\n\n\t\t\t\tif ( byteCount === 1 ) {\n\n\t\t\t\t\ttargetBufferCons = Int8Array;\n\t\t\t\t\ttype = ByteType;\n\n\t\t\t\t} else if ( byteCount === 2 ) {\n\n\t\t\t\t\ttargetBufferCons = Int16Array;\n\t\t\t\t\ttype = ShortType;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetBufferCons = Int32Array;\n\t\t\t\t\ttype = IntType;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase UnsignedIntType:\n\t\t\t\tinternalFormat += byteCount * 8 + 'UI';\n\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\n\t\t\t\tformat = countToIntFormat( itemSize );\n\n\t\t\t\tif ( byteCount === 1 ) {\n\n\t\t\t\t\ttargetBufferCons = Uint8Array;\n\t\t\t\t\ttype = UnsignedByteType;\n\n\t\t\t\t} else if ( byteCount === 2 ) {\n\n\t\t\t\t\ttargetBufferCons = Uint16Array;\n\t\t\t\t\ttype = UnsignedShortType;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetBufferCons = Uint32Array;\n\t\t\t\t\ttype = UnsignedIntType;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// there will be a mismatch between format length and final length because\n\t\t// RGBFormat and RGBIntegerFormat was removed\n\t\tif ( finalStride === 3 && ( format === RGBAFormat || format === RGBAIntegerFormat ) ) {\n\n\t\t\tfinalStride = 4;\n\n\t\t}\n\n\t\t// copy the data over to the new texture array\n\t\tconst dimension = Math.ceil( Math.sqrt( count ) );\n\t\tconst length = finalStride * dimension * dimension;\n\t\tconst dataArray = new targetBufferCons( length );\n\n\t\t// temporarily set the normalized state to false since we have custom normalization logic\n\t\tconst originalNormalized = attr.normalized;\n\t\tattr.normalized = false;\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tconst ii = finalStride * i;\n\t\t\tdataArray[ ii ] = attr.getX( i ) / normalizeValue;\n\n\t\t\tif ( itemSize >= 2 ) {\n\n\t\t\t\tdataArray[ ii + 1 ] = attr.getY( i ) / normalizeValue;\n\n\t\t\t}\n\n\t\t\tif ( itemSize >= 3 ) {\n\n\t\t\t\tdataArray[ ii + 2 ] = attr.getZ( i ) / normalizeValue;\n\n\t\t\t\tif ( finalStride === 4 ) {\n\n\t\t\t\t\tdataArray[ ii + 3 ] = 1.0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( itemSize >= 4 ) {\n\n\t\t\t\tdataArray[ ii + 3 ] = attr.getW( i ) / normalizeValue;\n\n\t\t\t}\n\n\t\t}\n\n\t\tattr.normalized = originalNormalized;\n\n\t\tthis.internalFormat = internalFormat;\n\t\tthis.format = format;\n\t\tthis.type = type;\n\t\tthis.image.width = dimension;\n\t\tthis.image.height = dimension;\n\t\tthis.image.data = dataArray;\n\t\tthis.needsUpdate = true;\n\t\tthis.dispose();\n\n\t\tattr.itemSize = originalItemSize;\n\t\tattr.count = originalCount;\n\n\t}\n\n}\n\nexport class UIntVertexAttributeTexture extends VertexAttributeTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._forcedType = UnsignedIntType;\n\n\t}\n\n}\n\nexport class IntVertexAttributeTexture extends VertexAttributeTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._forcedType = IntType;\n\n\t}\n\n\n}\n\nexport class FloatVertexAttributeTexture extends VertexAttributeTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._forcedType = FloatType;\n\n\t}\n\n}\n","export const shaderStructs = /* glsl */`\n#ifndef TRI_INTERSECT_EPSILON\n#define TRI_INTERSECT_EPSILON 1e-5\n#endif\n\n#ifndef INFINITY\n#define INFINITY 1e20\n#endif\n\nstruct BVH {\n\n\tusampler2D index;\n\tsampler2D position;\n\n\tsampler2D bvhBounds;\n\tusampler2D bvhContents;\n\n};\n\n// Note that a struct cannot be used for the hit record including faceIndices, faceNormal, barycoord,\n// side, and dist because on some mobile GPUS (such as Adreno) numbers are afforded less precision specifically\n// when in a struct leading to inaccurate hit results. See KhronosGroup/WebGL#3351 for more details.\n`;\n\nexport const shaderIntersectFunction = /* glsl */`\n\nuvec4 uTexelFetch1D( usampler2D tex, uint index ) {\n\n\tuint width = uint( textureSize( tex, 0 ).x );\n\tuvec2 uv;\n\tuv.x = index % width;\n\tuv.y = index / width;\n\n\treturn texelFetch( tex, ivec2( uv ), 0 );\n\n}\n\nivec4 iTexelFetch1D( isampler2D tex, uint index ) {\n\n\tuint width = uint( textureSize( tex, 0 ).x );\n\tuvec2 uv;\n\tuv.x = index % width;\n\tuv.y = index / width;\n\n\treturn texelFetch( tex, ivec2( uv ), 0 );\n\n}\n\nvec4 texelFetch1D( sampler2D tex, uint index ) {\n\n\tuint width = uint( textureSize( tex, 0 ).x );\n\tuvec2 uv;\n\tuv.x = index % width;\n\tuv.y = index / width;\n\n\treturn texelFetch( tex, ivec2( uv ), 0 );\n\n}\n\nvec4 textureSampleBarycoord( sampler2D tex, vec3 barycoord, uvec3 faceIndices ) {\n\n\treturn\n\t\tbarycoord.x * texelFetch1D( tex, faceIndices.x ) +\n\t\tbarycoord.y * texelFetch1D( tex, faceIndices.y ) +\n\t\tbarycoord.z * texelFetch1D( tex, faceIndices.z );\n\n}\n\nvoid ndcToCameraRay(\n\tvec2 coord, mat4 cameraWorld, mat4 invProjectionMatrix,\n\tout vec3 rayOrigin, out vec3 rayDirection\n) {\n\n\t// get camera look direction and near plane for camera clipping\n\tvec4 lookDirection = cameraWorld * vec4( 0.0, 0.0, - 1.0, 0.0 );\n\tvec4 nearVector = invProjectionMatrix * vec4( 0.0, 0.0, - 1.0, 1.0 );\n\tfloat near = abs( nearVector.z / nearVector.w );\n\n\t// get the camera direction and position from camera matrices\n\tvec4 origin = cameraWorld * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec4 direction = invProjectionMatrix * vec4( coord, 0.5, 1.0 );\n\tdirection /= direction.w;\n\tdirection = cameraWorld * direction - origin;\n\n\t// slide the origin along the ray until it sits at the near clip plane position\n\torigin.xyz += direction.xyz * near / dot( direction, lookDirection );\n\n\trayOrigin = origin.xyz;\n\trayDirection = direction.xyz;\n\n}\n\nfloat intersectsBounds( vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax ) {\n\n\t// https://www.reddit.com/r/opengl/comments/8ntzz5/fast_glsl_ray_box_intersection/\n\t// https://tavianator.com/2011/ray_box.html\n\tvec3 invDir = 1.0 / rayDirection;\n\n\t// find intersection distances for each plane\n\tvec3 tMinPlane = invDir * ( boundsMin - rayOrigin );\n\tvec3 tMaxPlane = invDir * ( boundsMax - rayOrigin );\n\n\t// get the min and max distances from each intersection\n\tvec3 tMinHit = min( tMaxPlane, tMinPlane );\n\tvec3 tMaxHit = max( tMaxPlane, tMinPlane );\n\n\t// get the furthest hit distance\n\tvec2 t = max( tMinHit.xx, tMinHit.yz );\n\tfloat t0 = max( t.x, t.y );\n\n\t// get the minimum hit distance\n\tt = min( tMaxHit.xx, tMaxHit.yz );\n\tfloat t1 = min( t.x, t.y );\n\n\t// set distance to 0.0 if the ray starts inside the box\n\tfloat dist = max( t0, 0.0 );\n\n\treturn t1 >= dist ? dist : INFINITY;\n\n}\n\nbool intersectsTriangle(\n\tvec3 rayOrigin, vec3 rayDirection, vec3 a, vec3 b, vec3 c,\n\tout vec3 barycoord, out vec3 norm, out float dist, out float side\n) {\n\n\t// https://stackoverflow.com/questions/42740765/intersection-between-line-and-triangle-in-3d\n\tvec3 edge1 = b - a;\n\tvec3 edge2 = c - a;\n\tnorm = cross( edge1, edge2 );\n\n\tfloat det = - dot( rayDirection, norm );\n\tfloat invdet = 1.0 / det;\n\n\tvec3 AO = rayOrigin - a;\n\tvec3 DAO = cross( AO, rayDirection );\n\n\tvec4 uvt;\n\tuvt.x = dot( edge2, DAO ) * invdet;\n\tuvt.y = - dot( edge1, DAO ) * invdet;\n\tuvt.z = dot( AO, norm ) * invdet;\n\tuvt.w = 1.0 - uvt.x - uvt.y;\n\n\t// set the hit information\n\tbarycoord = uvt.wxy; // arranged in A, B, C order\n\tdist = uvt.z;\n\tside = sign( det );\n\tnorm = side * normalize( norm );\n\n\t// add an epsilon to avoid misses between triangles\n\tuvt += vec4( TRI_INTERSECT_EPSILON );\n\n\treturn all( greaterThanEqual( uvt, vec4( 0.0 ) ) );\n\n}\n\nbool intersectTriangles(\n\tBVH bvh, vec3 rayOrigin, vec3 rayDirection, uint offset, uint count,\n\tinout float minDistance,\n\n\t// output variables\n\tout uvec4 faceIndices, out vec3 faceNormal, out vec3 barycoord,\n\tout float side, out float dist\n) {\n\n\tbool found = false;\n\tvec3 localBarycoord, localNormal;\n\tfloat localDist, localSide;\n\tfor ( uint i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\tuvec3 indices = uTexelFetch1D( bvh.index, i ).xyz;\n\t\tvec3 a = texelFetch1D( bvh.position, indices.x ).rgb;\n\t\tvec3 b = texelFetch1D( bvh.position, indices.y ).rgb;\n\t\tvec3 c = texelFetch1D( bvh.position, indices.z ).rgb;\n\n\t\tif (\n\t\t\tintersectsTriangle( rayOrigin, rayDirection, a, b, c, localBarycoord, localNormal, localDist, localSide )\n\t\t\t&& localDist < minDistance\n\t\t) {\n\n\t\t\tfound = true;\n\t\t\tminDistance = localDist;\n\n\t\t\tfaceIndices = uvec4( indices.xyz, i );\n\t\t\tfaceNormal = localNormal;\n\n\t\t\tside = localSide;\n\t\t\tbarycoord = localBarycoord;\n\t\t\tdist = localDist;\n\n\t\t}\n\n\t}\n\n\treturn found;\n\n}\n\nfloat intersectsBVHNodeBounds( vec3 rayOrigin, vec3 rayDirection, BVH bvh, uint currNodeIndex ) {\n\n\tvec3 boundsMin = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 0u ).xyz;\n\tvec3 boundsMax = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 1u ).xyz;\n\treturn intersectsBounds( rayOrigin, rayDirection, boundsMin, boundsMax );\n\n}\n\nbool bvhIntersectFirstHit(\n\tBVH bvh, vec3 rayOrigin, vec3 rayDirection,\n\n\t// output variables\n\tout uvec4 faceIndices, out vec3 faceNormal, out vec3 barycoord,\n\tout float side, out float dist\n) {\n\n\t// stack needs to be twice as long as the deepest tree we expect because\n\t// we push both the left and right child onto the stack every traversal\n\tint ptr = 0;\n\tuint stack[ 60 ];\n\tstack[ 0 ] = 0u;\n\n\tfloat triangleDistance = 1e20;\n\tbool found = false;\n\twhile ( ptr > - 1 && ptr < 60 ) {\n\n\t\tuint currNodeIndex = stack[ ptr ];\n\t\tptr --;\n\n\t\t// check if we intersect the current bounds\n\t\tfloat boundsHitDistance = intersectsBVHNodeBounds( rayOrigin, rayDirection, bvh, currNodeIndex );\n\t\tif ( boundsHitDistance == INFINITY || boundsHitDistance > triangleDistance ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tuvec2 boundsInfo = uTexelFetch1D( bvh.bvhContents, currNodeIndex ).xy;\n\t\tbool isLeaf = bool( boundsInfo.x & 0xffff0000u );\n\n\t\tif ( isLeaf ) {\n\n\t\t\tuint count = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint offset = boundsInfo.y;\n\n\t\t\tfound = intersectTriangles(\n\t\t\t\tbvh, rayOrigin, rayDirection, offset, count, triangleDistance,\n\t\t\t\tfaceIndices, faceNormal, barycoord, side, dist\n\t\t\t) || found;\n\n\t\t} else {\n\n\t\t\tuint leftIndex = currNodeIndex + 1u;\n\t\t\tuint splitAxis = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint rightIndex = boundsInfo.y;\n\n\t\t\tbool leftToRight = rayDirection[ splitAxis ] >= 0.0;\n\t\t\tuint c1 = leftToRight ? leftIndex : rightIndex;\n\t\t\tuint c2 = leftToRight ? rightIndex : leftIndex;\n\n\t\t\t// set c2 in the stack so we traverse it later. We need to keep track of a pointer in\n\t\t\t// the stack while we traverse. The second pointer added is the one that will be\n\t\t\t// traversed first\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c2;\n\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c1;\n\n\t\t}\n\n\t}\n\n\treturn found;\n\n}\n\n`;\n","import { BufferAttribute, BufferGeometry, Vector3, Vector4, Matrix4, Matrix3 } from 'three';\n\nconst _positionVector = /*@__PURE__*/ new Vector3();\nconst _normalVector = /*@__PURE__*/ new Vector3();\nconst _tangentVector = /*@__PURE__*/ new Vector3();\nconst _tangentVector4 = /*@__PURE__*/ new Vector4();\n\nconst _morphVector = /*@__PURE__*/ new Vector3();\nconst _temp = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\nconst _matrix = /*@__PURE__*/ new Matrix4();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\n\n// Confirms that the two provided attributes are compatible\nfunction validateAttributes( attr1, attr2 ) {\n\n\tif ( ! attr1 && ! attr2 ) {\n\n\t\treturn;\n\n\t}\n\n\tconst sameCount = attr1.count === attr2.count;\n\tconst sameNormalized = attr1.normalized === attr2.normalized;\n\tconst sameType = attr1.array.constructor === attr2.array.constructor;\n\tconst sameItemSize = attr1.itemSize === attr2.itemSize;\n\n\tif ( ! sameCount || ! sameNormalized || ! sameType || ! sameItemSize ) {\n\n\t\tthrow new Error();\n\n\t}\n\n}\n\n// Clones the given attribute with a new compatible buffer attribute but no data\nfunction createAttributeClone( attr, countOverride = null ) {\n\n\tconst cons = attr.array.constructor;\n\tconst normalized = attr.normalized;\n\tconst itemSize = attr.itemSize;\n\tconst count = countOverride === null ? attr.count : countOverride;\n\n\treturn new BufferAttribute( new cons( itemSize * count ), itemSize, normalized );\n\n}\n\n// target offset is the number of elements in the target buffer stride to skip before copying the\n// attributes contents in to.\nfunction copyAttributeContents( attr, target, targetOffset = 0 ) {\n\n\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\tconst itemSize = attr.itemSize;\n\t\tfor ( let i = 0, l = attr.count; i < l; i ++ ) {\n\n\t\t\tconst io = i + targetOffset;\n\t\t\ttarget.setX( io, attr.getX( i ) );\n\t\t\tif ( itemSize >= 2 ) target.setY( io, attr.getY( i ) );\n\t\t\tif ( itemSize >= 3 ) target.setZ( io, attr.getZ( i ) );\n\t\t\tif ( itemSize >= 4 ) target.setW( io, attr.getW( i ) );\n\n\t\t}\n\n\t} else {\n\n\t\tconst array = target.array;\n\t\tconst cons = array.constructor;\n\t\tconst byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\n\t\tconst temp = new cons( array.buffer, byteOffset, attr.array.length );\n\t\ttemp.set( attr.array );\n\n\t}\n\n}\n\n// Adds the \"matrix\" multiplied by \"scale\" to \"target\"\nfunction addScaledMatrix( target, matrix, scale ) {\n\n\tconst targetArray = target.elements;\n\tconst matrixArray = matrix.elements;\n\tfor ( let i = 0, l = matrixArray.length; i < l; i ++ ) {\n\n\t\ttargetArray[ i ] += matrixArray[ i ] * scale;\n\n\t}\n\n}\n\n// A version of \"SkinnedMesh.boneTransform\" for normals\nfunction boneNormalTransform( mesh, index, target ) {\n\n\tconst skeleton = mesh.skeleton;\n\tconst geometry = mesh.geometry;\n\tconst bones = skeleton.bones;\n\tconst boneInverses = skeleton.boneInverses;\n\n\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t_matrix.elements.fill( 0 );\n\n\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\tif ( weight !== 0 ) {\n\n\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\t\t\t_boneMatrix.multiplyMatrices( bones[ boneIndex ].matrixWorld, boneInverses[ boneIndex ] );\n\n\t\t\taddScaledMatrix( _matrix, _boneMatrix, weight );\n\n\t\t}\n\n\t}\n\n\t_matrix.multiply( mesh.bindMatrix ).premultiply( mesh.bindMatrixInverse );\n\ttarget.transformDirection( _matrix );\n\n\treturn target;\n\n}\n\n// Applies the morph target data to the target vector\nfunction applyMorphTarget( morphData, morphInfluences, morphTargetsRelative, i, target ) {\n\n\t_morphVector.set( 0, 0, 0 );\n\tfor ( let j = 0, jl = morphData.length; j < jl; j ++ ) {\n\n\t\tconst influence = morphInfluences[ j ];\n\t\tconst morphAttribute = morphData[ j ];\n\n\t\tif ( influence === 0 ) continue;\n\n\t\t_temp.fromBufferAttribute( morphAttribute, i );\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\t_morphVector.addScaledVector( _temp, influence );\n\n\t\t} else {\n\n\t\t\t_morphVector.addScaledVector( _temp.sub( target ), influence );\n\n\t\t}\n\n\t}\n\n\ttarget.add( _morphVector );\n\n}\n\n// Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in plac\nfunction mergeBufferGeometries( geometries, options = { useGroups: false, updateIndex: false }, targetGeometry = new BufferGeometry() ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\tconst { useGroups, updateIndex } = options;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst attributes = {};\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) {\n\n\t\t\t\tattributes[ name ] = [];\n\n\t\t\t}\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tthrow new Error( 'StaticGeometryGenerator: Make sure all geometries have the same number of attributes.' );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: The geometry must have either an index or a position attribute' );\n\n\t\t\t}\n\n\t\t\ttargetGeometry.addGroup( offset, count, i );\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\tif ( isIndexed ) {\n\n\t\tlet forceUpateIndex = false;\n\t\tif ( ! targetGeometry.index ) {\n\n\t\t\tlet indexCount = 0;\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tindexCount += geometries[ i ].index.count;\n\n\t\t\t}\n\n\t\t\ttargetGeometry.setIndex( new BufferAttribute( new Uint32Array( indexCount ), 1, false ) );\n\t\t\tforceUpateIndex = true;\n\n\t\t}\n\n\t\tif ( updateIndex || forceUpateIndex ) {\n\n\t\t\tconst targetIndex = targetGeometry.index;\n\t\t\tlet targetOffset = 0;\n\t\t\tlet indexOffset = 0;\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tconst geometry = geometries[ i ];\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\ttargetIndex.setX( targetOffset, index.getX( j ) + indexOffset );\n\t\t\t\t\ttargetOffset ++;\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometry.attributes.position.count;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// merge attributes\n\tfor ( const name in attributes ) {\n\n\t\tconst attrList = attributes[ name ];\n\t\tif ( ! ( name in targetGeometry.attributes ) ) {\n\n\t\t\tlet count = 0;\n\t\t\tfor ( const key in attrList ) {\n\n\t\t\t\tcount += attrList[ key ].count;\n\n\t\t\t}\n\n\t\t\ttargetGeometry.setAttribute( name, createAttributeClone( attributes[ name ][ 0 ], count ) );\n\n\t\t}\n\n\t\tconst targetAttribute = targetGeometry.attributes[ name ];\n\t\tlet offset = 0;\n\t\tfor ( const key in attrList ) {\n\n\t\t\tconst attr = attrList[ key ];\n\t\t\tcopyAttributeContents( attr, targetAttribute, offset );\n\t\t\toffset += attr.count;\n\n\t\t}\n\n\t}\n\n\treturn targetGeometry;\n\n}\n\nexport class StaticGeometryGenerator {\n\n\tconstructor( meshes ) {\n\n\t\tif ( ! Array.isArray( meshes ) ) {\n\n\t\t\tmeshes = [ meshes ];\n\n\t\t}\n\n\t\tconst finalMeshes = [];\n\t\tmeshes.forEach( object => {\n\n\t\t\tobject.traverse( c => {\n\n\t\t\t\tif ( c.isMesh ) {\n\n\t\t\t\t\tfinalMeshes.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t\tthis.meshes = finalMeshes;\n\t\tthis.useGroups = true;\n\t\tthis.applyWorldTransforms = true;\n\t\tthis.attributes = [ 'position', 'normal', 'tangent', 'uv', 'uv2' ];\n\t\tthis._intermediateGeometry = new Array( finalMeshes.length ).fill().map( () => new BufferGeometry() );\n\n\t}\n\n\tgetMaterials() {\n\n\t\tconst materials = [];\n\t\tthis.meshes.forEach( mesh => {\n\n\t\t\tif ( Array.isArray( mesh.material ) ) {\n\n\t\t\t\tmaterials.push( ...mesh.material );\n\n\t\t\t} else {\n\n\t\t\t\tmaterials.push( mesh.material );\n\n\t\t\t}\n\n\t\t} );\n\t\treturn materials;\n\n\t}\n\n\tgenerate( targetGeometry = new BufferGeometry() ) {\n\n\t\tconst { meshes, useGroups, _intermediateGeometry } = this;\n\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\tconst mesh = meshes[ i ];\n\t\t\tconst geom = _intermediateGeometry[ i ];\n\t\t\tthis._convertToStaticGeometry( mesh, geom );\n\n\t\t}\n\n\t\tmergeBufferGeometries( _intermediateGeometry, { useGroups }, targetGeometry );\n\t\tfor ( const key in targetGeometry.attributes ) {\n\n\t\t\ttargetGeometry.attributes[ key ].needsUpdate = true;\n\n\t\t}\n\n\t\treturn targetGeometry;\n\n\t}\n\n\t_convertToStaticGeometry( mesh, targetGeometry = new BufferGeometry() ) {\n\n\t\tconst geometry = mesh.geometry;\n\t\tconst applyWorldTransforms = this.applyWorldTransforms;\n\t\tconst includeNormal = this.attributes.includes( 'normal' );\n\t\tconst includeTangent = this.attributes.includes( 'tangent' );\n\t\tconst attributes = geometry.attributes;\n\t\tconst targetAttributes = targetGeometry.attributes;\n\n\t\t// initialize the attributes if they don't exist\n\t\tif ( ! targetGeometry.index ) {\n\n\t\t\ttargetGeometry.index = geometry.index;\n\n\t\t}\n\n\t\tif ( ! targetAttributes.position ) {\n\n\t\t\ttargetGeometry.setAttribute( 'position', createAttributeClone( attributes.position ) );\n\n\t\t}\n\n\t\tif ( includeNormal && ! targetAttributes.normal && attributes.normal ) {\n\n\t\t\ttargetGeometry.setAttribute( 'normal', createAttributeClone( attributes.normal ) );\n\n\t\t}\n\n\t\tif ( includeTangent && ! targetAttributes.tangent && attributes.tangent ) {\n\n\t\t\ttargetGeometry.setAttribute( 'tangent', createAttributeClone( attributes.tangent ) );\n\n\t\t}\n\n\t\t// ensure the attributes are consistent\n\t\tvalidateAttributes( geometry.index, targetGeometry.index );\n\t\tvalidateAttributes( attributes.position, targetAttributes.position );\n\n\t\tif ( includeNormal ) {\n\n\t\t\tvalidateAttributes( attributes.normal, targetAttributes.normal );\n\n\t\t}\n\n\t\tif ( includeTangent ) {\n\n\t\t\tvalidateAttributes( attributes.tangent, targetAttributes.tangent );\n\n\t\t}\n\n\t\t// generate transformed vertex attribute data\n\t\tconst position = attributes.position;\n\t\tconst normal = includeNormal ? attributes.normal : null;\n\t\tconst tangent = includeTangent ? attributes.tangent : null;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphNormal = geometry.morphAttributes.normal;\n\t\tconst morphTangent = geometry.morphAttributes.tangent;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\tconst morphInfluences = mesh.morphTargetInfluences;\n\t\tconst normalMatrix = new Matrix3();\n\t\tnormalMatrix.getNormalMatrix( mesh.matrixWorld );\n\n\t\tfor ( let i = 0, l = attributes.position.count; i < l; i ++ ) {\n\n\t\t\t_positionVector.fromBufferAttribute( position, i );\n\t\t\tif ( normal ) {\n\n\t\t\t\t_normalVector.fromBufferAttribute( normal, i );\n\n\t\t\t}\n\n\t\t\tif ( tangent ) {\n\n\t\t\t\t_tangentVector4.fromBufferAttribute( tangent, i );\n\t\t\t\t_tangentVector.fromBufferAttribute( tangent, i );\n\n\t\t\t}\n\n\t\t\t// apply morph target transform\n\t\t\tif ( morphInfluences ) {\n\n\t\t\t\tif ( morphPosition ) {\n\n\t\t\t\t\tapplyMorphTarget( morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector );\n\n\t\t\t\t}\n\n\t\t\t\tif ( morphNormal ) {\n\n\t\t\t\t\tapplyMorphTarget( morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector );\n\n\t\t\t\t}\n\n\t\t\t\tif ( morphTangent ) {\n\n\t\t\t\t\tapplyMorphTarget( morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// apply bone transform\n\t\t\tif ( mesh.isSkinnedMesh ) {\n\n\t\t\t\tmesh.boneTransform( i, _positionVector );\n\t\t\t\tif ( normal ) {\n\n\t\t\t\t\tboneNormalTransform( mesh, i, _normalVector );\n\n\t\t\t\t}\n\n\t\t\t\tif ( tangent ) {\n\n\t\t\t\t\tboneNormalTransform( mesh, i, _tangentVector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the vectors of the attributes\n\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t_positionVector.applyMatrix4( mesh.matrixWorld );\n\n\t\t\t}\n\n\t\t\ttargetAttributes.position.setXYZ( i, _positionVector.x, _positionVector.y, _positionVector.z );\n\n\t\t\tif ( normal ) {\n\n\t\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t\t_normalVector.applyNormalMatrix( normalMatrix );\n\n\t\t\t\t}\n\n\t\t\t\ttargetAttributes.normal.setXYZ( i, _normalVector.x, _normalVector.y, _normalVector.z );\n\n\t\t\t}\n\n\t\t\tif ( tangent ) {\n\n\t\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t\t_tangentVector.transformDirection( mesh.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\ttargetAttributes.tangent.setXYZW( i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// copy other attributes over\n\t\tfor ( const i in this.attributes ) {\n\n\t\t\tconst key = this.attributes[ i ];\n\t\t\tif ( key === 'position' || key === 'tangent' || key === 'normal' || ! ( key in attributes ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( ! targetAttributes[ key ] ) {\n\n\t\t\t\ttargetGeometry.setAttribute( key, createAttributeClone( attributes[ key ] ) );\n\n\t\t\t}\n\n\t\t\tvalidateAttributes( attributes[ key ], targetAttributes[ key ] );\n\t\t\tcopyAttributeContents( attributes[ key ], targetAttributes[ key ] );\n\n\t\t}\n\n\t\treturn targetGeometry;\n\n\t}\n\n}\n"],"names":["$d5b33d7c30034067$export$3545e07a80636437","$d5b33d7c30034067$export$7177b3e430c2d7ca","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","$d5b33d7c30034067$export$d46bd3ead7cc759b","DOLLY_PAN","DOLLY_ROTATE","$d5b33d7c30034067$export$a47c4b43a1be34f0","$d5b33d7c30034067$export$2ede184fc2998901","$d5b33d7c30034067$export$d9f0486e75b5ace","$d5b33d7c30034067$export$3b296b6f144d5b03","$d5b33d7c30034067$export$eda4864c68df1fa2","$d5b33d7c30034067$export$20183a0484ce21a0","$d5b33d7c30034067$export$8805bad65e24940e","$d5b33d7c30034067$export$a60d398fc7b7590e","$d5b33d7c30034067$export$c5e2c52991f30937","$d5b33d7c30034067$export$a0d98fe6d7e4af64","$d5b33d7c30034067$export$8759762a6477f2c4","$d5b33d7c30034067$export$dc59f8aed047f61d","$d5b33d7c30034067$export$d64030b316d3b087","$d5b33d7c30034067$export$ee99d97d46898098","$d5b33d7c30034067$export$dbf3e70ff37af79","$d5b33d7c30034067$export$533346c8e8dac0f5","$d5b33d7c30034067$export$9d9334239a5a5e06","$d5b33d7c30034067$export$c7e7c00b14f51a4f","$d5b33d7c30034067$export$727aa5ec3fe39bf0","$d5b33d7c30034067$export$d129e38cf6feaa8c","$d5b33d7c30034067$export$d2327c1afe5bfdf2","$d5b33d7c30034067$export$8a72f490b25c56c8","$d5b33d7c30034067$export$19a719f377145a13","$d5b33d7c30034067$export$5d8599b6a933fb1b","$d5b33d7c30034067$export$2e8ce08d3f6f5e10","$d5b33d7c30034067$export$545fce0311a9796a","$d5b33d7c30034067$export$88572337f312435f","$d5b33d7c30034067$export$c63dc51868b06a9d","$d5b33d7c30034067$export$5c612977753abe2","$d5b33d7c30034067$export$c3c7fc4518ebba96","$d5b33d7c30034067$export$f6d331659b644596","$d5b33d7c30034067$export$2697304443f382bc","$d5b33d7c30034067$export$6c8ea339bfab1301","$d5b33d7c30034067$export$3f8bb04b555a363c","$d5b33d7c30034067$export$c1b6b5136be58045","$d5b33d7c30034067$export$1e113ac2d0905829","$d5b33d7c30034067$export$4e041a7967d15c4b","$d5b33d7c30034067$export$aa92e870a709d190","$d5b33d7c30034067$export$6cdf0b461c7ce8a0","$d5b33d7c30034067$export$1ba1c45f9f77d4d7","$d5b33d7c30034067$export$c200e7d26f592f21","$d5b33d7c30034067$export$21d1799c6d552fc0","$d5b33d7c30034067$export$afa304c3e981b668","$d5b33d7c30034067$export$d2a1a68024a3e56c","$d5b33d7c30034067$export$9a79c424327dacf9","$d5b33d7c30034067$export$995b32462a65e855","$d5b33d7c30034067$export$30fac1aace31cf4d","$d5b33d7c30034067$export$198b11ff4c72bb30","$d5b33d7c30034067$export$7f795934b84ab523","$d5b33d7c30034067$export$24a4ccb5099273b5","$d5b33d7c30034067$export$8e8c3ecdcd8e1fee","$d5b33d7c30034067$export$bcfbbdcf8de7f8cd","$d5b33d7c30034067$export$4c28c87c2dc84758","$d5b33d7c30034067$export$b23a071aa286eb29","$d5b33d7c30034067$export$f0d8293634f88842","$d5b33d7c30034067$export$7207336e4151a112","$d5b33d7c30034067$export$f32388edbb32674","$d5b33d7c30034067$export$2852a58ebdac27b8","$d5b33d7c30034067$export$561f394b24edfcaa","$d5b33d7c30034067$export$42429b3acfb233a4","$d5b33d7c30034067$export$69433f11f42d5527","$d5b33d7c30034067$export$9f542ae4b5baca34","$d5b33d7c30034067$export$9c2c08927385dcc4","$d5b33d7c30034067$export$7c74ea00fa1315e6","$d5b33d7c30034067$export$6f3fb2d2440f2b76","$d5b33d7c30034067$export$763e8360f4d7f77d","$d5b33d7c30034067$export$8505d14ac8546ca","$d5b33d7c30034067$export$f63012db5506e7dd","$d5b33d7c30034067$export$ca1dce8b5e1de74d","$d5b33d7c30034067$export$ec8b666c5fe2c75a","addEventListener","type","listener","undefined","this","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","event","target","array","slice","i","l","length","call","$d5b33d7c30034067$var$_lut","$d5b33d7c30034067$var$_seed","$d5b33d7c30034067$var$DEG2RAD","Math","PI","$d5b33d7c30034067$var$RAD2DEG","$d5b33d7c30034067$var$generateUUID","d0","random","d1","d2","d3","toLowerCase","$d5b33d7c30034067$var$clamp","value","min","max","$d5b33d7c30034067$var$euclideanModulo","n","m","$d5b33d7c30034067$var$lerp","x","y","t","$d5b33d7c30034067$var$isPowerOfTwo","$d5b33d7c30034067$var$ceilPowerOfTwo","pow","ceil","log","LN2","$d5b33d7c30034067$var$floorPowerOfTwo","floor","$d5b33d7c30034067$var$denormalize","constructor","Float32Array","Uint16Array","Uint8Array","Int16Array","Int8Array","Error","$d5b33d7c30034067$var$normalize","round","$d5b33d7c30034067$export$6a7ef315a0d1ef07","Object","freeze","__proto__","DEG2RAD","RAD2DEG","generateUUID","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","inverseLerp","lerp","damp","lambda","dt","exp","pingpong","abs","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","s","imul","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","normalize","denormalize","$d5b33d7c30034067$export$c977b3e384af9ae1","prototype","isVector2","width","height","setScalar","scalar","setX","setY","setComponent","getComponent","clone","copy","v","add","addScalar","addVectors","addScaledVector","sub","subScalar","subVectors","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Symbol","iterator","$d5b33d7c30034067$export$8ff26dafa08918","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","f","g","h","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","theta","translate","matrix","$d5b33d7c30034067$var$arrayNeedsUint32","Uint8ClampedArray","Int32Array","Uint32Array","Float64Array","$d5b33d7c30034067$var$createElementNS","name","document","createElementNS","$d5b33d7c30034067$var$SRGBToLinear","$d5b33d7c30034067$var$LinearToSRGB","$d5b33d7c30034067$var$FN","$d5b33d7c30034067$export$5e6fd513f44698c","legacyMode","workingColorSpace","colorSpace","convert","color","sourceColorSpace","targetColorSpace","fn","fromWorkingColorSpace","toWorkingColorSpace","$d5b33d7c30034067$var$_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","$d5b33d7c30034067$var$_rgb","$d5b33d7c30034067$var$_hslA","$d5b33d7c30034067$var$_hslB","$d5b33d7c30034067$var$hue2rgb","p","$d5b33d7c30034067$var$toComponents","source","$d5b33d7c30034067$export$892596cec99bc70e","isColor","setRGB","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","size","charAt","setColorName","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","toString","getHSL","hue","saturation","lightness","delta","getRGB","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","getZ","toJSON","$d5b33d7c30034067$var$_canvas","NAMES","$d5b33d7c30034067$export$698882cf06df44aa","image","test","src","HTMLCanvasElement","canvas","context","getContext","ImageData","putImageData","drawImage","toDataURL","HTMLImageElement","ImageBitmap","imageData","getImageData","data","$d5b33d7c30034067$export$1d2df86270c81ecb","isSource","uuid","version","needsUpdate","meta","isRootObject","images","output","url","Array","isArray","isDataTexture","$d5b33d7c30034067$var$serializeImage","getDataURL","from","$d5b33d7c30034067$var$textureId","$d5b33d7c30034067$export$5431306cf43de24a","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","super","isTexture","defineProperty","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","userData","onUpdate","isRenderTargetTexture","needsPMREMUpdate","updateMatrix","JSON","parse","stringify","textures","metadata","generator","wrap","dispose","transformUv","uv","$d5b33d7c30034067$export$fa7daccca11cdbe3","z","w","isVector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getW","$d5b33d7c30034067$export$3c052beb2e51e23f","options","isWebGLRenderTarget","depth","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","samples","setSize","assign","$d5b33d7c30034067$export$dfac6c8e811406a3","isDataArrayTexture","wrapR","$d5b33d7c30034067$export$d7a3086320f856db","isData3DTexture","$d5b33d7c30034067$export$23d6a54f0bbc85a3","isQuaternion","_x","_y","_z","_w","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","Number","EPSILON","len","tDir","_onChangeCallback","quaternion","setFromEuler","euler","update","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","slerp","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","slerpQuaternions","qa","u1","sqrt1u1","sqrtu1","u2","u3","_onChange","callback","$d5b33d7c30034067$export$64b5c384219d3699","isVector3","multiplyVectors","applyEuler","applyQuaternion","$d5b33d7c30034067$var$_quaternion$4","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","$d5b33d7c30034067$var$_vector$c","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","randomDirection","u","$d5b33d7c30034067$export$6f7d5a9418ab2aa3","Infinity","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","count","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","halfSize","$d5b33d7c30034067$var$_vector$b","setFromObject","object","precise","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","geometry","attributes","position","boundingBox","computeBoundingBox","$d5b33d7c30034067$var$_box$3","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","$d5b33d7c30034067$var$_center","$d5b33d7c30034067$var$_extents","$d5b33d7c30034067$var$_v0$2","$d5b33d7c30034067$var$_v1$7","$d5b33d7c30034067$var$_v2$3","$d5b33d7c30034067$var$_f0","$d5b33d7c30034067$var$_f1","$d5b33d7c30034067$var$_f2","axes","$d5b33d7c30034067$var$satForAxes","$d5b33d7c30034067$var$_triangleNormal","distanceToPoint","getBoundingSphere","intersect","$d5b33d7c30034067$var$_points","$d5b33d7c30034067$var$_testAxis","v0","extents","j","p0","p1","p2","$d5b33d7c30034067$var$_box$2","$d5b33d7c30034067$var$_v1$6","$d5b33d7c30034067$var$_toFarthestPoint","$d5b33d7c30034067$var$_toPoint","$d5b33d7c30034067$export$805e8b72413ccaba","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","missingRadiusHalf","$d5b33d7c30034067$var$_vector$a","$d5b33d7c30034067$var$_segCenter","$d5b33d7c30034067$var$_segDir","$d5b33d7c30034067$var$_diff","$d5b33d7c30034067$var$_edge1","$d5b33d7c30034067$var$_edge2","$d5b33d7c30034067$var$_normal$1","$d5b33d7c30034067$export$a186db52eed6d40e","origin","direction","ray","at","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","sign","DdN","DdQxE2","DdE1xQ","QdN","$d5b33d7c30034067$export$2ae72fc923e5eb5","isMatrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","setFromMatrix3","makeBasis","extractRotation","scaleX","$d5b33d7c30034067$var$_v1$5","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","$d5b33d7c30034067$var$_zero","$d5b33d7c30034067$var$_one","eye","up","$d5b33d7c30034067$var$_z","$d5b33d7c30034067$var$_x","$d5b33d7c30034067$var$_y","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","yx","zx","zy","x2","y2","z2","wx","wy","wz","decompose","$d5b33d7c30034067$var$_m1$2","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","$d5b33d7c30034067$var$_matrix$1","$d5b33d7c30034067$var$_quaternion$3","$d5b33d7c30034067$export$d93cc409a0768c5f","DefaultOrder","isEuler","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","error","RotationOrders","$d5b33d7c30034067$export$89312ce47c0ca777","mask","channel","enable","enableAll","toggle","disable","disableAll","layers","isEnabled","$d5b33d7c30034067$var$_object3DId","$d5b33d7c30034067$var$_v1$4","$d5b33d7c30034067$var$_q1","$d5b33d7c30034067$var$_m1$1","$d5b33d7c30034067$var$_target","$d5b33d7c30034067$var$_position$3","$d5b33d7c30034067$var$_scale$2","$d5b33d7c30034067$var$_quaternion$2","$d5b33d7c30034067$var$_xAxis","$d5b33d7c30034067$var$_yAxis","$d5b33d7c30034067$var$_zAxis","$d5b33d7c30034067$var$_addedEvent","$d5b33d7c30034067$var$_removedEvent","$d5b33d7c30034067$export$e4dd07dff30cc924","isObject3D","parent","DefaultUp","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","matrixWorldAutoUpdate","DefaultMatrixWorldAutoUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","arguments","remove","removeFromParent","clear","attach","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","child","updateParents","updateChildren","geometries","materials","shapes","skeletons","nodes","serialize","library","element","isInstancedMesh","instanceMatrix","instanceColor","isScene","background","environment","isMesh","isLine","isPoints","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","animation","extractFromCache","cache","values","key","recursive","$d5b33d7c30034067$var$_v0$1","$d5b33d7c30034067$var$_v1$3","$d5b33d7c30034067$var$_v2$2","$d5b33d7c30034067$var$_v3$1","$d5b33d7c30034067$var$_vab","$d5b33d7c30034067$var$_vac","$d5b33d7c30034067$var$_vbc","$d5b33d7c30034067$var$_vap","$d5b33d7c30034067$var$_vbp","$d5b33d7c30034067$var$_vcp","$d5b33d7c30034067$export$5a465592bfe74b48","targetLengthSq","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getBarycoord","p3","uv1","uv2","uv3","setFromPointsAndIndices","i0","i1","i2","setFromAttributeAndIndices","getArea","getMidpoint","getNormal","getPlane","setFromCoplanarPoints","getUV","isFrontFacing","d4","vc","d5","d6","vb","va","$d5b33d7c30034067$var$materialId","$d5b33d7c30034067$export$a2d8b23205c25948","isMaterial","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","toneMapped","_alphaTest","alphaTest","onBuild","onBeforeCompile","customProgramCacheKey","setValues","newValue","currentValue","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","iridescence","iridescenceIOR","iridescenceThicknessRange","iridescenceMap","iridescenceThicknessMap","map","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","flatShading","fog","srcPlanes","dstPlanes","$d5b33d7c30034067$export$55cbcc9b622fe1f5","isMeshBasicMaterial","$d5b33d7c30034067$var$_vector$9","$d5b33d7c30034067$var$_vector2$1","$d5b33d7c30034067$export$8dea267bd6bde117","itemSize","normalized","TypeError","isBufferAttribute","usage","updateRange","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","setXY","l1","setXYZ","setXYZW","onUpload","copyColorsArray","copyVector2sArray","copyVector3sArray","copyVector4sArray","$d5b33d7c30034067$export$cacc90cf35d11cdd","$d5b33d7c30034067$export$640a853f68025f2e","$d5b33d7c30034067$export$7eb8c9fa25cd5bd6","$d5b33d7c30034067$export$cbe7a62641830ebd","$d5b33d7c30034067$var$_id$1","$d5b33d7c30034067$var$_m1","$d5b33d7c30034067$var$_obj","$d5b33d7c30034067$var$_offset","$d5b33d7c30034067$var$_box$1","$d5b33d7c30034067$var$_boxMorphTargets","$d5b33d7c30034067$var$_vector$8","$d5b33d7c30034067$export$b7be63a67df8959","isBufferGeometry","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","start","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","computeBoundingSphere","morphAttributesPosition","isGLBufferAttribute","morphAttribute","isNaN","il1","il2","jl","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","handleTriangle","isFinite","group","tmp2","n2","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","cb","ab","normalizeNormals","merge","toNonIndexed","convertBufferAttribute","array2","isInterleavedBufferAttribute","stride","geometry2","newAttribute","name1","morphArray","keys","hasMorphAttributes","key1","attributeArray","$d5b33d7c30034067$var$_inverseMatrix$2","$d5b33d7c30034067$var$_ray$2","$d5b33d7c30034067$var$_sphere$3","$d5b33d7c30034067$var$_vA$1","$d5b33d7c30034067$var$_vB$1","$d5b33d7c30034067$var$_vC$1","$d5b33d7c30034067$var$_tempA","$d5b33d7c30034067$var$_tempB","$d5b33d7c30034067$var$_tempC","$d5b33d7c30034067$var$_morphA","$d5b33d7c30034067$var$_morphB","$d5b33d7c30034067$var$_morphC","$d5b33d7c30034067$var$_uvA$1","$d5b33d7c30034067$var$_uvB$1","$d5b33d7c30034067$var$_uvC$1","$d5b33d7c30034067$var$_intersectionPoint","$d5b33d7c30034067$var$_intersectionPointWorld","$d5b33d7c30034067$export$e176487c05830cc5","updateMorphTargets","morphTargetInfluences","morphTargetDictionary","ml","String","raycaster","intersects","intersection","morphPosition","groupMaterial","$d5b33d7c30034067$var$checkBufferGeometryIntersection","faceIndex","face","morphInfluences","influence","boneTransform","$d5b33d7c30034067$var$checkIntersection","$d5b33d7c30034067$export$33e43285f7406bd5","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy1","$d5b33d7c30034067$var$cloneUniforms","property","$d5b33d7c30034067$var$mergeUniforms","uniforms","merged","$d5b33d7c30034067$export$d8ecdf8615bfea69","$d5b33d7c30034067$export$83c7d75d550a8b0d","isShaderMaterial","defines","uniformsGroups","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","$d5b33d7c30034067$var$cloneUniformsGroups","$d5b33d7c30034067$export$79f141de891a5fed","$d5b33d7c30034067$export$74e4ae24825f68d7","fov","aspect","isPerspectiveCamera","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","skew","$d5b33d7c30034067$var$fov","$d5b33d7c30034067$export$d0cdd0bd804995de","renderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderer","scene","currentRenderTarget","getRenderTarget","currentToneMapping","toneMapping","currentXrEnabled","xr","setRenderTarget","render","$d5b33d7c30034067$export$ee2e5a18258a4049","isCubeTexture","$d5b33d7c30034067$export$ac386671d651941e","isWebGLCubeRenderTarget","fromEquirectangularTexture","shader","tEquirect","mesh","currentMinFilter","stencil","$d5b33d7c30034067$var$_vector1","$d5b33d7c30034067$var$_vector2","isPlane","setComponents","setFromNormalAndCoplanarPoint","inverseNormalLength","intersectLine","line","startSign","endSign","end","optionalNormalMatrix","$d5b33d7c30034067$var$_normalMatrix","referencePoint","coplanarPoint","$d5b33d7c30034067$export$7ff5ac152ef991b0","p4","p5","planes","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","$d5b33d7c30034067$var$_sphere$2","intersectsSprite","sprite","negRadius","$d5b33d7c30034067$var$_vector$7","$d5b33d7c30034067$var$WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","time","frame","requestAnimationFrame","cancelAnimationFrame","setContext","$d5b33d7c30034067$var$WebGLAttributes","gl","capabilities","isWebGL2","WeakMap","buffers","get","deleteBuffer","buffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","bufferData","isFloat16BufferAttribute","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","width_half","height_half","segment_width","segment_height","static","$d5b33d7c30034067$export$967d831af31f69ce","$d5b33d7c30034067$export$955f9f2e84c43c8b","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","alphatest_pars_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","iridescence_fragment","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_fragment","lights_lambert_pars_fragment","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphcolor_vertex","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normal_pars_fragment","normal_pars_vertex","normal_vertex","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","iridescence_pars_fragment","output_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","background_vert","background_frag","meshphysical_frag","meshtoon_vert","shadow_vert","shadow_frag","$d5b33d7c30034067$export$6643083551874bf5","uvTransform","uv2Transform","flipEnvMap","ior","fogFar","fogColor","properties","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotLightMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","diffuse","$d5b33d7c30034067$export$bee4a7d47f8f5014","specularmap","envmap","aomap","lightmap","meshbasic_vert","meshbasic_frag","emissivemap","bumpmap","normalmap","displacementmap","meshlambert_vert","meshlambert_frag","meshphong_vert","meshphong_frag","roughnessmap","metalnessmap","meshphysical_vert","gradientmap","meshtoon_frag","meshmatcap_vert","meshmatcap_frag","points_vert","points_frag","totalSize","linedashed_vert","linedashed_frag","depth_vert","depth_frag","meshnormal_vert","meshnormal_frag","sprite_vert","sprite_frag","cube_vert","cube_frag","equirect_vert","equirect_frag","distanceRGBA","referencePosition","nearDistance","farDistance","distanceRGBA_vert","distanceRGBA_frag","cubemaps","state","objects","setClear","clearColor","clearAlpha","setClearAlpha","session","getSession","environmentBlendMode","forceClear","autoClear","autoClearColor","autoClearDepth","autoClearStencil","boxMesh","cube","currentBackground","currentBackgroundVersion","currentTonemapping","renderList","unshift","planeMesh","t2D","maxVertexAttributes","extension","vaoAvailable","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","enabledAttributes","attributeDivisors","newAttributes","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","vertexAttribIPointer","reset","resetDefaultState","forceUpdate","program","setup","updateBuffers","programMap","bindingStates","stateMap","createVertexArray","createVertexArrayOES","getBindingState","getAttributes","programAttributes","location","cachedAttribute","cachedAttributes","geometryAttribute","geometryAttributes","attributesNum","saveCache","isInstancedBufferGeometry","isInstancedInterleavedBuffer","programAttribute","locationSize","_maxInstanceCount","vertexAttribPointer","isInstancedBufferAttribute","materialDefaultAttributeValues","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","disableUnusedAttributes","$d5b33d7c30034067$var$WebGLBufferRenderer","info","setMode","mode","renderInstances","primcount","methodName","$d5b33d7c30034067$var$WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","has","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","globalState","numPlanes","numIntersection","skipTransform","dstArray","nPlanes","viewMatrix","flatSize","i4","init","enableLocalClipping","projectPlanes","useCache","nGlobal","lGlobal","materialProperties","clippingState","mapTextureMapping","onTextureDispose","cubemap","physical","standard","iridescenceThicknessMinimum","iridescenceThicknessMaximum","sheenColorMap","sheenRoughnessMap","transmissionSamplerSize","transmissionSamplerMap","isOrthographicCamera","scaleW","scaleH","$d5b33d7c30034067$export$9ebf355ee4ed261b","$d5b33d7c30034067$var$PHI","$d5b33d7c30034067$var$INV_PHI","$d5b33d7c30034067$export$6add42717753e221","_renderer","_pingPongRenderTarget","_sizeLods","_sigmas","_blurMaterial","_cubemapMaterial","_setSize","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","sigma","_blur","_applyPMREM","_cleanup","equirectangular","_fromTexture","fromCubemap","$d5b33d7c30034067$var$_getCubemapMaterial","_compileMaterial","_equirectMaterial","$d5b33d7c30034067$var$_getEquirectMaterial","_dispose","cubeSize","_lodMax","log2","_cubeSize","_lodPlanes","outputTarget","$d5b33d7c30034067$var$_oldTarget","$d5b33d7c30034067$var$_setViewport","_textureToCubeUV","params","$d5b33d7c30034067$var$_createRenderTarget","sizeLods","lodPlanes","sigmas","lodMax","$d5b33d7c30034067$var$EXTRA_LOD_SIGMA","totalLods","lod","sizeLod","texelSize","positionSize","cubeFaces","uvSize","faceIndexSize","coordinates","fill","$d5b33d7c30034067$var$_createPlanes","weights","$d5b33d7c30034067$var$MAX_SAMPLES","poleAxis","CUBEUV_TEXEL_WIDTH","CUBEUV_TEXEL_HEIGHT","CUBEUV_MAX_MIP","latitudinal","dTheta","$d5b33d7c30034067$var$_getCommonVertexShader","$d5b33d7c30034067$var$_getBlurShader","tmpMesh","compile","$d5b33d7c30034067$var$_flatCamera","forwardSign","originalAutoClear","getClearColor","$d5b33d7c30034067$var$_clearColor","backgroundMaterial","backgroundBox","useSolidColor","col","cubeCamera","upSign","$d5b33d7c30034067$var$_axisDirections","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","sum","weight","outputSize","cubeUVmaps","pmremGenerator","cubemapUV","isEquirectMap","isCubeMap","fromEquirectangular","isCubeTextureComplete","$d5b33d7c30034067$var$WebGLExtensions","getExtension","$d5b33d7c30034067$var$WebGLGeometries","wireframeAttributes","onGeometryDispose","geometryIndex","previousAttribute","updateWireframeAttribute","programs","calls","triangles","lines","instanceCount","$d5b33d7c30034067$var$numericalSort","$d5b33d7c30034067$var$absNumericalSort","$d5b33d7c30034067$var$WebGLMorphtargets","vertexDataStride","vertexDataCount","morphTargetsCount","morphTarget","morphTargets","morphNormal","morphNormals","morphColor","morphColors","hasMorphPosition","morph","hasMorphNormals","hasMorphColors","entry","morphTextures","disposeTexture","morphInfluencesSum","objectInfluences","morphBaseInfluence","getUniforms","setValue","influences","influencesList","sort","workInfluences","MAX_SAFE_INTEGER","$d5b33d7c30034067$var$WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","$d5b33d7c30034067$var$emptyTexture","$d5b33d7c30034067$var$empty3dTexture","$d5b33d7c30034067$var$emptyCubeTexture","$d5b33d7c30034067$var$arrayCacheF32","$d5b33d7c30034067$var$arrayCacheI32","$d5b33d7c30034067$var$mat4array","$d5b33d7c30034067$var$mat3array","$d5b33d7c30034067$var$mat2array","$d5b33d7c30034067$var$flatten","nBlocks","blockSize","firstElem","$d5b33d7c30034067$var$arraysEqual","$d5b33d7c30034067$var$copyArray","$d5b33d7c30034067$var$allocTexUnits","allocateTextureUnit","$d5b33d7c30034067$var$setValueV1f","uniform1f","addr","$d5b33d7c30034067$var$setValueV2f","uniform2f","uniform2fv","$d5b33d7c30034067$var$setValueV3f","uniform3f","uniform3fv","$d5b33d7c30034067$var$setValueV4f","uniform4f","uniform4fv","$d5b33d7c30034067$var$setValueM2","uniformMatrix2fv","$d5b33d7c30034067$var$setValueM3","uniformMatrix3fv","$d5b33d7c30034067$var$setValueM4","uniformMatrix4fv","$d5b33d7c30034067$var$setValueV1i","$d5b33d7c30034067$var$setValueV2i","uniform2iv","$d5b33d7c30034067$var$setValueV3i","uniform3iv","$d5b33d7c30034067$var$setValueV4i","uniform4iv","$d5b33d7c30034067$var$setValueV1ui","uniform1ui","$d5b33d7c30034067$var$setValueV2ui","$d5b33d7c30034067$var$setValueV3ui","uniform3uiv","$d5b33d7c30034067$var$setValueV4ui","uniform4uiv","$d5b33d7c30034067$var$setValueT1","unit","uniform1i","setTexture2D","$d5b33d7c30034067$var$setValueT3D1","setTexture3D","$d5b33d7c30034067$var$setValueT6","setTextureCube","$d5b33d7c30034067$var$setValueT2DArray1","setTexture2DArray","$d5b33d7c30034067$var$emptyArrayTexture","$d5b33d7c30034067$var$setValueV1fArray","$d5b33d7c30034067$var$setValueV2fArray","$d5b33d7c30034067$var$setValueV3fArray","$d5b33d7c30034067$var$setValueV4fArray","$d5b33d7c30034067$var$setValueM2Array","$d5b33d7c30034067$var$setValueM3Array","$d5b33d7c30034067$var$setValueM4Array","$d5b33d7c30034067$var$setValueV1iArray","$d5b33d7c30034067$var$setValueV1uiArray","uniform1uiv","$d5b33d7c30034067$var$setValueV2uiArray","$d5b33d7c30034067$var$setValueV3uiArray","$d5b33d7c30034067$var$setValueV4uiArray","$d5b33d7c30034067$var$setValueT1Array","units","uniform1iv","$d5b33d7c30034067$var$setValueT3DArray","$d5b33d7c30034067$var$setValueT2DArrayArray","activeInfo","$d5b33d7c30034067$var$getSingularSetter","$d5b33d7c30034067$var$PureArrayUniform","$d5b33d7c30034067$var$setValueV2iArray","$d5b33d7c30034067$var$setValueV3iArray","$d5b33d7c30034067$var$setValueV4iArray","$d5b33d7c30034067$var$setValueT6Array","$d5b33d7c30034067$var$getPureArraySetter","$d5b33d7c30034067$var$StructuredUniform","seq","$d5b33d7c30034067$var$addUniform","container","uniformObject","$d5b33d7c30034067$var$parseUniform","path","pathLength","$d5b33d7c30034067$var$RePathPart","lastIndex","match","matchEnd","idIsIndex","subscript","$d5b33d7c30034067$var$SingleUniform","next","getProgramParameter","getActiveUniform","getUniformLocation","$d5b33d7c30034067$var$WebGLShader","createShader","$d5b33d7c30034067$var$getShaderErrors","status","getShaderParameter","errors","getShaderInfoLog","trim","errorMatches","errorLine","toUpperCase","split","to","lines2","join","$d5b33d7c30034067$var$handleSource","getShaderSource","$d5b33d7c30034067$var$getTexelEncodingFunction","functionName","$d5b33d7c30034067$var$getEncodingComponents","toneMappingName","numSpotLightShadows","numSpotLightMaps","numSpotLightShadowsWithMaps","replace","numDirLights","numSpotLights","numSpotLightCoords","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numPointLightShadows","numClippingPlanes","numClipIntersection","$d5b33d7c30034067$var$includePattern","$d5b33d7c30034067$var$includeReplacer","include","$d5b33d7c30034067$var$unrollLoopPattern","$d5b33d7c30034067$var$loopReplacer","snippet","precisionstring","cacheKey","shadowMapTypeDefine","shadowMapType","$d5b33d7c30034067$var$generateShadowMapTypeDefine","envMapMode","envMapTypeDefine","$d5b33d7c30034067$var$generateEnvMapTypeDefine","envMapModeDefine","$d5b33d7c30034067$var$generateEnvMapModeDefine","envMapBlendingDefine","$d5b33d7c30034067$var$generateEnvMapBlendingDefine","envMapCubeUVHeight","imageHeight","maxMip","texelHeight","$d5b33d7c30034067$var$generateCubeUVSize","extensionDerivatives","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","$d5b33d7c30034067$var$filterEmptyLine","$d5b33d7c30034067$var$generateExtensions","$d5b33d7c30034067$var$generateDefines","createProgram","prefixFragment","isRawShaderMaterial","prefixVertex","customDefines","customExtensions","$d5b33d7c30034067$var$generatePrecision","shaderName","instancing","instancingColor","supportsVertexTextures","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","skinning","morphTextureStride","doubleSided","flipSided","shadowMapEnabled","envMapCubeUVSize","texelWidth","decodeVideoTexture","physicallyCorrectLights","$d5b33d7c30034067$var$getToneMappingFunction","opaque","outputEncoding","useDepthPacking","depthPacking","$d5b33d7c30034067$var$resolveIncludes","$d5b33d7c30034067$var$replaceLightNums","$d5b33d7c30034067$var$replaceClippingPlaneNums","$d5b33d7c30034067$var$unrollLoops","versionString","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","cachedUniforms","$d5b33d7c30034067$var$WebGLUniforms","getActiveAttrib","getAttribLocation","$d5b33d7c30034067$var$fetchAttributeLocations","$d5b33d7c30034067$var$programIdCount","shaderCache","Map","materialCache","vertexShaderStage","_getShaderStage","fragmentShaderStage","materialShaders","_getShaderCacheForMaterial","usedTimes","shaderStage","code","Set","stage","$d5b33d7c30034067$var$WebGLShaderStage","$d5b33d7c30034067$var$_id","$d5b33d7c30034067$var$WebGLPrograms","cubeuvmaps","_customShaders","$d5b33d7c30034067$var$WebGLShaderCache","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","shadows","isMeshStandardMaterial","customVertexShaderID","customFragmentShaderID","getVertexShaderID","getFragmentShaderID","useAlphaTest","useClearcoat","useIridescence","isXRRenderTarget","isVideoTexture","isFogExp2","directional","spot","spotLightMap","rectArea","hemi","directionalShadowMap","pointShadowMap","shadowMap","morphAttributeCount","getProgramCacheKeyParameters","_programLayers","getProgramCacheKeyBooleans","pl","preexistingProgram","$d5b33d7c30034067$var$WebGLProgram","groupOrder","getNextRenderItem","renderItem","renderItems","renderItemsIndex","transmissive","finish","customOpaqueSort","customTransparentSort","$d5b33d7c30034067$var$painterSortStable","$d5b33d7c30034067$var$reversePainterSortStable","renderCallDepth","listArray","lists","list","$d5b33d7c30034067$var$WebGLRenderList","light","halfWidth","halfHeight","lightA","lightB","$d5b33d7c30034067$var$UniformsCache","$d5b33d7c30034067$var$ShadowUniformsCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","numSpotMaps","probe","spotShadow","$d5b33d7c30034067$var$shadowCastingAndTexturingLightsFirst","intensity","shadow","isAmbientLight","scaleFactor","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","shadowCache","bias","normalBias","mapSize","directionalShadow","isSpotLight","penumbra","updateMatrices","numSpotShadowsWithMaps","isRectAreaLight","isPointLight","pointShadow","isHemisphereLight","rectAreaLTC1","LTC_FLOAT_1","rectAreaLTC2","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","ambient","hash","$d5b33d7c30034067$var$nextVersion","vector3","matrix42","$d5b33d7c30034067$var$WebGLLights","lightsArray","shadowsArray","setupView","shadowLight","renderStates","renderState","renderStateArray","$d5b33d7c30034067$var$WebGLRenderState","isMeshDepthMaterial","isMeshDistanceMaterial","$d5b33d7c30034067$var$WebGLShadowMap","_objects","_capabilities","$d5b33d7c30034067$export$35efe6f4c85463d2","_viewportSize","_viewport","_depthMaterial","$d5b33d7c30034067$export$2698c22ec13825db","$d5b33d7c30034067$export$33e187ed002f2a19","_materialCache","resolution","shadowMaterialHorizontal","shadowMaterialVertical","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSM_SAMPLES","blurSamples","mapPass","_shadowMapSize","shadow_pass","renderBufferDirect","customDistanceMaterial","customDepthMaterial","_distanceMaterial","result","keyB","materialsForVariant","keyA","cachedMaterial","shadowCamera","_frustum","intersectsObject","k","kl","depthMaterial","getDepthMaterial","renderObject","activeCubeFace","getActiveCubeFace","getActiveMipmapLevel","setBlending","_state","setTest","setScissorTest","autoUpdate","shadowFrameExtents","getFrameExtents","_maxTextureSize","pars","getViewportCount","vp","viewportCount","getViewport","getFrustum","isPointLightShadow","VSMPass","activeMipmapLevel","$d5b33d7c30034067$var$WebGLState","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","glVersion","lineWidthAvailable","currentTextureSlot","currentBoundTextures","scissorParam","currentViewport","viewportParam","createTexture","texImage2D","emptyTextures","enabledCapabilities","equationToGL","MIN_EXT","MAX_EXT","factorToGL","currentBlendingEnabled","currentBlendEquation","currentBlendEquationAlpha","blendEquationSeparate","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","blendFuncSeparate","currentBlending","currentPremultipledAlpha","blendFunc","setFlipSided","currentFlipSided","frontFace","setCullFace","cullFace","currentCullFace","setPolygonOffset","factor","currentPolygonOffsetFactor","currentPolygonOffsetUnits","colorBuffer","framebuffer","currentBoundFramebuffers","bindFramebuffer","defaultDrawbuffers","currentDrawbuffers","isWebGLMultipleRenderTargets","drawBuffersWEBGL","currentProgram","frontFaceCW","setLineWidth","currentLineWidth","lineWidth","webglSlot","activeTexture","webglType","webglTexture","boundTexture","bindTexture","compressedTexImage2D","apply","texImage3D","updateUBOMapping","uniformsGroup","uboProgamMap","blockIndex","getUniformBlockIndex","uniformBlockBinding","uboBindings","__bindingPointIndex","texStorage2D","texStorage3D","texSubImage2D","texSubImage3D","compressedTexSubImage2D","currentScissor","useProgram","$d5b33d7c30034067$var$WebGLTextures","_gl","utils","maxSamples","multisampledRTTExt","supportsInvalidateFramebuffer","navigator","userAgent","_videoTextures","_canvas","_sources","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","needsPowerOfTwo","needsNewCanvas","maxSize","isPowerOfTwo$1","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","getInternalFormat","internalFormatName","glFormat","glType","forceLinearEncoding","isFramebufferTexture","isCompressedTexture","filterFallback","__webglInit","webglTextures","textureProperties","__cacheKey","deleteTexture","deallocateTexture","onRenderTargetDispose","renderTargetProperties","__webglTexture","memory","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","slot","updateVideoTexture","__version","complete","textureType","texParameteri","wrappingToGL","filterToGL","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","initTexture","forceUpload","textureCacheKey","getTextureCacheKey","sourceProperties","pixelStorei","textureNeedsPowerOfTwo","resizeImage","mipmap","glInternalFormat","useTexStorage","allocateMemory","levels","getMipLevels","isDepthTexture","setupFrameBufferTexture","attachment","textureTarget","__hasExternalTextures","useMultisampledRTT","framebufferTexture2DMultisampleEXT","getRenderTargetSamples","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","renderbufferStorageMultisampleEXT","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","isCube","__autoAllocateDepthBuffer","webglDepthTexture","setupDepthTexture","createRenderbuffer","__useRenderToTexture","verifyColorSpace","sRGBToLinear","textureUnits","textureUnit","resetTextureUnits","isCompressed","cubeImage","mipmapImage","colorTexture","setupDepthRenderbuffer","createFramebuffer","isMultipleRenderTargets","setTextureParameters","unbindTexture","glTextureType","isWebGL3DRenderTarget","isWebGLArrayRenderTarget","invalidationArray","depthStyle","ignoreDepthValues","__ignoreDepthValues","invalidateFramebuffer","blitFramebuffer","$d5b33d7c30034067$export$ddaebcad857649a8","HALF_FLOAT_OES","SRGB_ALPHA_EXT","COMPRESSED_SRGB_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","UNSIGNED_INT_24_8_WEBGL","isArrayCamera","cameras","isGroup","_targetRay","_grip","_hand","$d5b33d7c30034067$export$eb2fcfdbd7ba97d4","joints","inputState","pinching","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","inputjoint","jointPose","getJointPose","jointName","joint","transform","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","getPose","targetRaySpace","$d5b33d7c30034067$var$_moveEvent","getContextAttributes","cameraL","cameraR","$d5b33d7c30034067$export$56b937d9e5581166","_currentDepthNear","_currentDepthFar","onSessionEvent","onSessionEnd","onInputSourcesChange","controllers","controllerInputSources","disconnect","initialRenderTarget","glBaseLayer","glProjLayer","glBinding","newRenderTarget","stop","isPresenting","removed","added","controllerIndex","controller","$d5b33d7c30034067$var$WebXRController","getTargetRaySpace","getGripSpace","getHandSpace","setFramebufferScaleFactor","framebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","customReferenceSpace","setReferenceSpace","space","getFrame","xrFrame","setSession","async","xrCompatible","makeXRCompatible","layerInit","antialias","XRWebGLLayer","updateRenderState","baseLayer","framebufferWidth","framebufferHeight","depthFormat","depthType","glDepthFormat","projectionlayerInit","colorFormat","XRWebGLBinding","createProjectionLayer","textureWidth","textureHeight","$d5b33d7c30034067$export$fc830aa069cc8c2f","setFoveation","requestReferenceSpace","referenceSpaceType","cameraLPos","cameraRPos","updateCamera","cameraVR","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","getCamera","getFoveation","fixedFoveation","foveation","onAnimationFrameCallback","setAnimationLoop","pose","getViewerPose","views","setRenderTargetFramebuffer","cameraVRNeedsUpdate","glSubImage","getViewSubImage","setRenderTargetTextures","depthStencilTexture","$d5b33d7c30034067$var$WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshFogUniforms","isFog","fogNear","fogDensity","density","refreshMaterialUniforms","pixelRatio","transmissionRenderTarget","isMeshLambertMaterial","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","refreshUniformsStandard","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDistance","isMeshNormalMaterial","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","$d5b33d7c30034067$var$WebGLUniformsGroups","updateList","allocatedBindingPoints","maxBindingPoints","hasUniformChanged","cachedObject","getUniformSize","storage","boundary","onUniformsGroupsDispose","bind","webglProgram","chunkSize","chunkOffset","__data","__offset","remainingSizeInChunk","__size","__cache","prepareUniformsGroup","bindingPointIndex","allocateBindingPointIndex","bindBufferBase","updateBufferData","$d5b33d7c30034067$export$f6cc00ef28d7cf97","isWebGLRenderer","display","$d5b33d7c30034067$var$createCanvasElement","_context","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","_alpha","currentRenderList","currentRenderState","renderListStack","renderStateStack","domElement","sortObjects","toneMappingExposure","_this","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_height","_pixelRatio","_opaqueSort","_transparentSort","_width","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_projScreenMatrix","_vector2","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","onContextCreationError","isWebGL1Renderer","shift","rangeMin","rangeMax","message","initGLContext","$d5b33d7c30034067$var$WebGLInfo","$d5b33d7c30034067$var$WebGLProperties","$d5b33d7c30034067$var$WebGLCubeMaps","$d5b33d7c30034067$var$WebGLCubeUVMaps","$d5b33d7c30034067$var$WebGLBindingStates","$d5b33d7c30034067$var$WebGLClipping","$d5b33d7c30034067$var$WebGLRenderLists","$d5b33d7c30034067$var$WebGLRenderStates","$d5b33d7c30034067$var$WebGLBackground","$d5b33d7c30034067$var$WebGLIndexedBufferRenderer","$d5b33d7c30034067$var$WebXRManager","preventDefault","infoAutoReset","autoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","statusMessage","onMaterialDispose","forEach","releaseProgram","releaseShaderCache","releaseMaterialProgramReferences","deallocateMaterial","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","updateStyle","setViewport","getCurrentViewport","getScissor","setScissor","boolean","method","setClearColor","getClearAlpha","bits","onXRSessionStart","onXRSessionEnd","setState","needsProgramChange","needsLights","lightsStateVersion","getProgram","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","setOptional","floatVertexTextures","boneTexture","computeBoneTexture","boneTextureSize","isMeshGouraudMaterial","ambientLightColor","lightProbe","directionalLights","directionalLightShadows","upload","uniformsList","setProgram","setMaterial","getWireframeAttribute","rangeFactor","rangeStart","dataCount","rangeCount","drawEnd","drawStart","drawCount","isLineSegments","isLineLoop","isSprite","prepare","pushLight","pushShadow","setupLights","pop","projectObject","isLOD","setupLightsView","opaqueObjects","getDrawingBufferSize","updateMultisampleRenderTarget","updateRenderTargetMipmap","renderTransmissionPass","renderObjects","transmissiveObjects","transparentObjects","getParameters","programCacheKey","getProgramCacheKey","updateCommonMaterialProperties","acquireProgram","materialNeedsLights","ltc_1","ltc_2","progUniforms","seqWithValue","self","cameraAutoUpdate","setFromProjectionMatrix","beginShadows","endShadows","camera2","renderScene","defaultFramebuffer","__useDefaultFramebuffer","useDefaultFramebuffer","setupRenderTarget","rebindTextures","isRenderTarget3D","layer","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","halfFloatSupportedByExt","readPixels","copyFramebufferToTexture","level","levelScale","copyTexSubImage2D","copyTextureToTexture","srcTexture","dstTexture","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","unpackImageHeight","unpackSkipPixels","unpackSkipRows","compressedTexSubImage3D","unpackSkipImages","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","$d5b33d7c30034067$export$3c890837b09508d4","isInterleavedBuffer","arrayBuffers","_uuid","ib","interleavedBuffer","$d5b33d7c30034067$var$_vector$6","interleavedBuffers","$d5b33d7c30034067$export$920b6d07334599c7","$d5b33d7c30034067$var$_basePosition","$d5b33d7c30034067$var$_skinIndex","bindMatrixInverse","calculateInverses","skinWeight","skinIndex","$d5b33d7c30034067$var$_skinWeight","boneIndex","$d5b33d7c30034067$var$_matrix","bones","boneInverses","$d5b33d7c30034067$var$_vector$5","isBone","boneMatrices","inverse","bone","$d5b33d7c30034067$var$_identityMatrix","$d5b33d7c30034067$var$_offsetMatrix","$d5b33d7c30034067$export$8f31e4c4a37b8e9c","$d5b33d7c30034067$export$b691f601014eabe1","json","$d5b33d7c30034067$export$b127726e56765aa4","boneInverse","$d5b33d7c30034067$export$32ea87a8b54d744a","raycastTimes","$d5b33d7c30034067$var$_mesh","instanceId","getMatrixAt","$d5b33d7c30034067$var$_instanceLocalMatrix","$d5b33d7c30034067$var$_instanceWorldMatrix","$d5b33d7c30034067$var$_instanceIntersects","setMatrixAt","linecap","linejoin","$d5b33d7c30034067$var$_start$1","$d5b33d7c30034067$var$_end$1","$d5b33d7c30034067$var$_inverseMatrix$1","$d5b33d7c30034067$var$_ray$1","$d5b33d7c30034067$var$_sphere$1","$d5b33d7c30034067$export$fbaaa33907730a0c","lineDistances","Line","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","$d5b33d7c30034067$var$_start","$d5b33d7c30034067$export$17d680238e50603e","$d5b33d7c30034067$var$_end","$d5b33d7c30034067$var$_inverseMatrix","$d5b33d7c30034067$var$_ray","$d5b33d7c30034067$var$_sphere","$d5b33d7c30034067$var$_position$2","$d5b33d7c30034067$export$a178c45366ce5d6b","Points","$d5b33d7c30034067$var$testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","radiusTop","radiusBottom","radialSegments","openEnded","thetaStart","thetaLength","indexArray","vertex","centerIndexEnd","cosTheta","sinTheta","centerIndexStart","indexRow","slope","generateCap","$d5b33d7c30034067$export$68f745719dbe5198","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","centroid","azi","correctUVs","correctSeam","$d5b33d7c30034067$export$60e57a7d3f20ff65","details","$d5b33d7c30034067$var$_v0","$d5b33d7c30034067$var$_v1$1","$d5b33d7c30034067$var$_normal","thresholdAngle","precisionPoints","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","$d5b33d7c30034067$var$_triangle","jNext","vecHash0","vecHash1","reverseHash","index0","$d5b33d7c30034067$export$9567cc828c9535da","$d5b33d7c30034067$export$1954e2b809fe361e","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","segment","j1","thetaSegmentLevel","$d5b33d7c30034067$export$68cb731f50f614af","phiStart","phiLength","thetaEnd","grid","verticesRow","uOffset","$d5b33d7c30034067$export$1b417fc3b307a251","tube","tubularSegments","arc","$d5b33d7c30034067$export$a2312a2a1fa56495","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","$d5b33d7c30034067$export$77e9bfadfb9ab8c8","STANDARD","$d5b33d7c30034067$export$f2980790215acccd","PHYSICAL","_sheen","_clearcoat","_iridescence","_transmission","MATCAP","$d5b33d7c30034067$var$convertArray","forceClone","$d5b33d7c30034067$var$isTypedArray","ArrayBuffer","isView","DataView","$d5b33d7c30034067$var$getKeyframeOrder","times","nValues","srcOffset","jsonKeys","valuePropertyName","$d5b33d7c30034067$export$b558baee9c0f72d3","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","pp","validate_interval","seek","forward_scan","giveUpAt","copySampleValue_","linear_scan","t1global","mid","intervalChanged_","getSettings_","settings","DefaultSettings_","interpolate_","_weightPrev","_offsetPrev","_weightNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","_offsetNext","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","track","trackType","getInterpolation","InterpolantFactoryMethodDiscrete","$d5b33d7c30034067$export$fb9758ef7ef8d5cc","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","$d5b33d7c30034067$export$3646682e7a3959","factoryMethod","ValueTypeName","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","$d5b33d7c30034067$var$arraySlice","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","$d5b33d7c30034067$export$b0e479f45b7006d6","$d5b33d7c30034067$export$d45f0d1a4d9a9314","slerpFlat","$d5b33d7c30034067$export$b8043f12b5aafbd7","$d5b33d7c30034067$export$2db1cfb7923d931e","$d5b33d7c30034067$export$6ce41d4f3a8df9cd","$d5b33d7c30034067$export$5ce2dcb4cc9f2bff","duration","tracks","blendMode","resetDuration","jsonTracks","frameTime","fps","$d5b33d7c30034067$var$parseKeyframeTrack","clip","clipTracks","morphTargetSequence","noLoop","numMorphTargets","$d5b33d7c30034067$var$sortedArray","objectOrClipArray","clipArray","o","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","CreateFromMorphTargetSequence","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","$d5b33d7c30034067$var$flattenJSON","clipName","hierarchy","hierarchyTracks","morphTargetNames","morphTargetName","animationKey","boneName","validate","optimize","typeName","$d5b33d7c30034067$export$83444c5d885347d8","$d5b33d7c30034067$export$d3a344b98cf0b775","$d5b33d7c30034067$var$getTrackTypeForValueTypeName","file","onError","urlModifier","handlers","onLoad","onProgress","onStart","itemsLoaded","itemsTotal","resolveURL","setURLModifier","regex","loader","removeHandler","getHandler","global","$d5b33d7c30034067$export$b033c3f9a95c6a16","$d5b33d7c30034067$export$99cc795e99919eed","$d5b33d7c30034067$export$3b0d6d7590275603","manager","crossOrigin","withCredentials","resourcePath","requestHeader","loadAsync","Promise","resolve","reject","load","setPath","setRequestHeader","response","$d5b33d7c30034067$export$94affb487e701bf2","itemStart","itemEnd","$d5b33d7c30034067$var$loading","Request","Headers","mimeType","responseType","then","ReadableStream","body","getReader","callbacks","reader","contentLength","headers","total","lengthComputable","loaded","readData","read","done","close","byteLength","ProgressEvent","enqueue","Response","stream","$d5b33d7c30034067$var$HttpError","statusText","arrayBuffer","blob","text","DOMParser","parseFromString","label","decoder","TextDecoder","decode","itemError","finally","setTimeout","onImageLoad","removeEventListeners","onImageError","$d5b33d7c30034067$export$792d8a18f2c55855","$d5b33d7c30034067$export$98435a25b5cf7b2b","setResponseType","setWithCredentials","texData","mipmapCount","$d5b33d7c30034067$export$fd1bfc71f64c538c","$d5b33d7c30034067$export$8905ce1c7a2464a1","setCrossOrigin","$d5b33d7c30034067$export$6ecadb6ed240d696","$d5b33d7c30034067$var$LightShadow","_frameExtents","_viewportCount","_viewports","shadowMatrix","$d5b33d7c30034067$var$_lightPositionWorld$1","$d5b33d7c30034067$var$_lookTarget$1","$d5b33d7c30034067$var$_projScreenMatrix$1","viewportIndex","isSpotLightShadow","$d5b33d7c30034067$var$SpotLightShadow","power","$d5b33d7c30034067$var$_projScreenMatrix","$d5b33d7c30034067$var$_lightPositionWorld","_cubeDirections","_cubeUps","$d5b33d7c30034067$var$_lookTarget","$d5b33d7c30034067$export$4c9c1cb3f0b6f455","$d5b33d7c30034067$var$PointLightShadow","isDirectionalLightShadow","$d5b33d7c30034067$export$3fea33cc9972c868","$d5b33d7c30034067$var$DirectionalLightShadow","fromCharCode","decodeURIComponent","escape","lastIndexOf","isImageBitmapLoader","createImageBitmap","fetch","fetchOptions","credentials","res","colorSpaceConversion","imageBitmap","catch","autoStart","oldTime","elapsedTime","running","$d5b33d7c30034067$var$now","getElapsedTime","getDelta","diff","newTime","performance","Date","now","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accuIndex","currentWeight","mix","_mixBufferRegion","_addIndex","_setIdentity","_mixBufferRegionAdditive","weightAdditive","originalValueOffset","_origIndex","saveOriginalState","getValue","startIndex","endIndex","targetIndex","workOffset","multiplyQuaternionsFlat","$d5b33d7c30034067$var$_RESERVED_CHARS_RE","$d5b33d7c30034067$var$_reservedRe","RegExp","$d5b33d7c30034067$var$_wordChar","$d5b33d7c30034067$var$_wordCharOrDot","$d5b33d7c30034067$var$_supportedObjectNames","parsedPath","$d5b33d7c30034067$export$7bf70fcf9f891893","parseTrackName","findNode","rootNode","nodeName","_getValue_unbound","_setValue_unbound","root","isAnimationObjectGroup","Composite","$d5b33d7c30034067$var$_trackRe","matches","lastDot","objectName","results","substring","getBoneByName","searchNodeSubtree","childNode","subTreeNode","targetObject","resolvedProperty","propertyIndex","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","dest","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setMatrixWorldNeedsUpdate","objectIndex","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","BindingType","Direct","bindingType","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","targetGroup","optionalParsedPath","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","_getValue_direct","_getValue_array","_getValue_arrayElement","_getValue_toArray","_setValue_direct","_setValue_arrayElement_setNeedsUpdate","_setValue_fromArray_setNeedsUpdate","mixer","localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_effectiveTimeScale","_effectiveWeight","repetitions","paused","_mixer","_activateAction","_deactivateAction","stopFading","stopWarping","_startTime","_isActiveAction","loop","_scheduleFading","fadeOutAction","warp","fadeOut","fadeInDuration","_clip","fadeOutDuration","startEndRatio","endStartRatio","crossFadeFrom","_weightInterpolant","_takeBackControlInterpolant","weightInterpolant","action","endTimeScale","_timeScaleInterpolant","_lendControlInterpolant","startTimeScale","timeScaleInterpolant","_localRoot","_root","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","_interpolants","propertyMixers","_propertyBindings","evaluate","accumulateAdditive","m1","accumulate","interpolantValue","loopCount","_loopCount","pingPong","_setEndings","handle_stop","clampWhenFinished","loopDelta","pending","atStart","atEnd","zeroSlopeAtStart","zeroSlopeAtEnd","weightNow","weightThen","$d5b33d7c30034067$var$_controlInterpolantsResultBuffer","_initMemoryManager","_accuIndex","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_cacheIndex","_addInactiveBinding","$d5b33d7c30034067$export$dfe0af1ca1acb78a","create","clipUuid","actionsForClip","_actionsByClip","_bindAction","knownActions","_addInactiveAction","_lendBinding","_lendAction","restoreOriginalState","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","stats","actions","inUse","controlInterpolants","actionsByClip","actionByRoot","_byClipCacheIndex","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","lastActiveIndex","firstInactiveAction","prevIndex","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","$d5b33d7c30034067$export$a8e6009059f51e1a","__cacheIndex","lastActiveInterpolant","optionalRoot","clipObject","$d5b33d7c30034067$export$d942c706bf23829c","findByName","existingAction","newAction","$d5b33d7c30034067$var$AnimationAction","nActions","_update","nBindings","timeInSeconds","actionsToRemove","uncacheRoot","_removeInactiveAction","Mesh","LOD","Sprite","setFromCamera","coords","intersectObject","$d5b33d7c30034067$var$intersectObject","$d5b33d7c30034067$var$ascSort","intersectObjects","$d5b33d7c30034067$export$d712cd887b4a00f7","other","makeSafe","EPS","setFromCartesianCoords","$d5b33d7c30034067$var$_startP","$d5b33d7c30034067$export$ff1ed10fedfdd604","$d5b33d7c30034067$var$getBoneList","colors","isSkeletonHelper","$d5b33d7c30034067$var$_matrixWorldInv","$d5b33d7c30034067$var$_boneMatrix","$d5b33d7c30034067$var$_vector$2","boneList","divisions","$d5b33d7c30034067$var$_box","$d5b33d7c30034067$var$_tables","$d5b33d7c30034067$var$_generateTables","floatView","baseTable","shiftTable","exponentTable","offsetTable","mantissaTable","i3","i5","uint32View","val","$b18ea3b4dfb4ebb9$var$SKIP_GENERATION","$b18ea3b4dfb4ebb9$var$aabb","$ilwiq","Box3","$b18ea3b4dfb4ebb9$var$aabb2","$b18ea3b4dfb4ebb9$var$tempMatrix","Matrix4","$b18ea3b4dfb4ebb9$var$obb","$4ytBV","OrientedBox","$b18ea3b4dfb4ebb9$var$obb2","$b18ea3b4dfb4ebb9$var$temp","Vector3","$b18ea3b4dfb4ebb9$var$temp1","$b18ea3b4dfb4ebb9$var$temp2","$b18ea3b4dfb4ebb9$var$temp3","$b18ea3b4dfb4ebb9$var$temp4","$b18ea3b4dfb4ebb9$var$tempBox","$b18ea3b4dfb4ebb9$var$trianglePool","$299oE","PrimitivePool","$g90Dw","ExtendedTriangle","$b18ea3b4dfb4ebb9$export$9d614b3bc2c4eacf","bvh","cloneBuffers","rootData","_roots","indexAttribute","roots","deserialize","newIndex","BufferAttribute","strategy","$Mleu6","CENTER","maxDepth","maxLeafTris","verbose","useSharedArrayBuffer","setBoundingBox","SharedArrayBuffer","$jFUiI","buildPackedTree","refit","nodeIndices","posAttr","uint32Array","uint16Array","float32Array","byteOffset","_traverse","node32Index","node16Index","IS_LEAFNODE_FLAG","minx","miny","minz","maxx","maxy","maxz","offsetLeft","offsetRight","forceChildren","includesLeft","includesRight","traverseRight","leftChange","rightChange","didChange","lefti","righti","minLeftValue","maxLeftValue","minRightValue","maxRightValue","rootIndex","isLeaf","BYTES_PER_NODE","splitAxis","materialOrSide","FrontSide","isArrayMaterial","materialSide","startCount","$8H6fR","setBuffer","clearBuffer","raycastFirst","closestResult","intersectsGeometry","otherGeometry","geomToMesh","shapecast","_intersectsTriangleFunc","_orderNodesFunc","Function","originalTriangleFunc","tri","contained","boundsTraverseOrder","intersectsBounds","intersectsRange","getPrimitive","originalIntersectsRange","nodeIndex","$2GwQ0","iterateOverTriangles","releasePrimitive","bvhcast","otherBvh","matrixToLocal","intersectsRanges","intersectsTriangles","otherIndexAttr","otherPositionAttr","triangle2","iterateOverDoubleTriangles","count1","offset2","count2","depth1","depth2","l2","setTriangle","originalIntersectsRanges","nodeIndex1","nodeIndex2","boxToMesh","closestPointToGeometry","geometryToBvh","target1","target2","minThreshold","maxThreshold","pos","otherPos","otherIndex","tempTarget1","tempTargetDest1","tempTarget2","tempTargetDest2","closestDistance","closestDistanceTriIndex","closestDistanceOtherTriIndex","distanceToBox","score","boundsTree","otherOffset","otherCount","dist","distanceToTriangle","minThresholdSq","maxThresholdSq","closestDistanceSq","triIndex","distSq","$aw71y","arrayToBox","$0914f42a72aa7e13$export$91c2158bc24c63d4","$0914f42a72aa7e13$export$d3bfe4097a2a8542","$0914f42a72aa7e13$export$2b2cc3fb4f03d723","$0914f42a72aa7e13$export$34b5498ca69d033","$0914f42a72aa7e13$export$a26e00882057cd76","$0914f42a72aa7e13$export$82ad94f0a038b67a","$0914f42a72aa7e13$export$22e1995328fd3cd9","$0914f42a72aa7e13$export$f4b101accf1b23d1","$0914f42a72aa7e13$export$a08e7d18fbc53be5","$0914f42a72aa7e13$export$661fddb62bfe0e42","$0914f42a72aa7e13$export$859129fb5c8f4dc1","$e52d84d076610c40$var$getBounds","triangleBounds","centroidTarget","cminx","cminy","cminz","cmaxx","cmaxy","cmaxz","includeCentroid","hx","lx","rx","hy","ly","ry","cz","hz","lz","rz","$e52d84d076610c40$var$BIN_COUNT","$e52d84d076610c40$var$binsSort","candidate","$e52d84d076610c40$var$sahBins","bounds","rightCacheBounds","leftCacheBounds","$e52d84d076610c40$var$leftBounds","$e52d84d076610c40$export$9896244d8c99a4d0","geo","triggerProgress","trianglesProcessed","totalTriangles","splitNode","node","centroidBoundingData","reachedMaxDepth","nodeBoundingData","getLongestEdgeIndex","AVERAGE","avg","$e52d84d076610c40$var$getAverage","SAH","rootSurfaceArea","computeSurfaceArea","bestCost","TRIANGLE_INTERSECT_COST","cStart","cEnd","axisLeft","binWidth","truncatedBins","bin","expandByTriangleBounds","splitCount","bi","bi1","leftCount","rightCount","leftBounds","rightBounds","leftProb","rightProb","cost","TRAVERSAL_COST","binIndex","lastBin","copyBounds","nextBin","unionBounds","binCount","$e52d84d076610c40$var$getOptimalSplit","boundingData","splitOffset","axisOffset","t2","$e52d84d076610c40$var$partition","$43QJu","MeshBVHNode","lstart","lcount","cacheCentroidBoundingData","rstart","rcount","vertexCount","BufferConstructor","$e52d84d076610c40$var$ensureIndex","fullBounds","triCount","posArr","bufferOffset","getters","tri3","tri6","ai","ci","el","halfExtents","el2","FLOAT32_EPSILON","$e52d84d076610c40$var$computeTriangleBounds","ranges","rangeBoundaries","sortedBoundaries","$e52d84d076610c40$var$getRootIndexRanges","$e52d84d076610c40$var$getCentroidBounds","$e52d84d076610c40$export$e63bca57f220b8e3","packedRoots","nodeCount","countNodes","populateBuffer","stride4Offset","stride2Offset","nextUnusedPointer","$2f5058de141a77f6$export$6f473cc5f89b0a1c","$7a82575c26570b10$export$40b9a5e446bf11e0","nodeIndex32","$7a82575c26570b10$export$dcdc414399b99746","splitDimIdx","splitDist","$7a82575c26570b10$export$14b050a767b4a3a7","$7a82575c26570b10$export$a8a7063dce01a911","aVal","bVal","$7a82575c26570b10$export$c989e53c4b24c2f5","tCenter","tHalf","tMin","tMax","$7a82575c26570b10$export$dbf4320364dc239e","$654730f3fe318a6c$var$boundingBox","$654730f3fe318a6c$var$boxIntersection","$654730f3fe318a6c$var$xyzFields","$654730f3fe318a6c$export$630e89aab3ddc1d6","nodeIndex16","$654730f3fe318a6c$var$_float32Array","$654730f3fe318a6c$var$_uint16Array","$654730f3fe318a6c$var$_uint32Array","$fGKVo","IS_LEAF","OFFSET","COUNT","$b4YKL","intersectTris","leftIndex","LEFT_NODE","$654730f3fe318a6c$var$intersectRay","rightIndex","RIGHT_NODE","$654730f3fe318a6c$export$1fa457bc72ef1a2a","intersectClosestTri","SPLIT_AXIS","xyzAxis","leftToRight","c1Result","c2Result","$654730f3fe318a6c$export$963c78622ed2c172","_box1","_box2","boxStack","boxPool","shapecastTraverse","intersectsBoundsFunc","intersectsRangeFunc","nodeScoreFunc","nodeIndexByteOffset","getLeftOffset","getRightEndOffset","BOUNDING_DATA_INDEX","score1","score2","box1","box2","temp","c1Intersection","c1StopTraversal","CONTAINED","c2Intersection","c2StopTraversal","args","$654730f3fe318a6c$export$b2f96b0abaf94e0a","invertedMat","obb","obb2","cachedObb","thisGeometry","thisIndex","thisPos","$654730f3fe318a6c$var$bufferStack","$654730f3fe318a6c$var$_prevBuffer","$654730f3fe318a6c$export$8e35cea4592af4e6","$654730f3fe318a6c$export$abb0b37bc9255c0e","$35114e71c81906a5$export$4ccecd8ac6ee0e58","isOrientedBox","invMatrix","satAxes","satBounds","$9wcBV","SeparatingAxisBounds","alignedSatBounds","minVec","sb","pi","setFromPointsField","aabbBounds","isSeparated","setFromBox","saTri","pointsArr","cachedSatBounds","cachedSatBounds2","cachedAxis","isExtendedTriangle","sa","triSatBounds","triSatAxes","sa1","sa2","xyzFields","segments1","Line3","segments2","point1","point2","threshold2","nextIndex","nextIndex2","f1","f2","f3","line2","$iGy84","closestPointsSegmentToSegment","$6ee0e2757da7a06c$export$f758e41ecdcd8e69","field","boxMin","boxMax","cacheSatBounds","$bc0dfaf879705f7c$var$isNearZero","$bc0dfaf879705f7c$export$a37f7ec1c23dfacf","Triangle","Sphere","Plane","sphereIntersectTriangle","axis0","sab0","axis1","sab1","axis2","sab2","axis3","sab3","closestPointToSegment","edge","nexti","saTri2","arr1","arr2","dir1","dir2","tempDir","edge1","edge2","plane1","plane2","satBounds1","satAxes1","satBounds2","satAxes2","points1","found1","pNext","targetPoint","startIntersects","points2","found2","e1","e2","separated1","separated2","cornerFields","line1","lineTarget","otherVec","thisVec","f11","f12","f21","f22","$d9a69f955803ded5$export$479eef7c8f1b846c","v02","v10","v32","d0232","d3210","d3232","d0210","$d9a69f955803ded5$export$b09f296caca7547a","paramResult","Vector2","temp1","temp2","closestPoint","closestPoint2","$d9a69f955803ded5$export$eed3a6606b3adc41","closestPointTemp","projectedPointTemp","planeTemp","lineTemp","projectPoint","$810f31c6ff4f494e$export$6f0a8fc5d2775a51","intersections","$aZnKr","intersectTri","$810f31c6ff4f494e$export$4331f2604b0bca4","$810f31c6ff4f494e$export$adb106eed99e8cd8","hit","$800205c7888e1262$var$vA","$800205c7888e1262$var$vB","$800205c7888e1262$var$vC","$800205c7888e1262$var$uvA","$800205c7888e1262$var$uvB","$800205c7888e1262$var$uvC","$800205c7888e1262$var$intersectionPoint","$800205c7888e1262$var$checkBufferGeometryIntersection","BackSide","DoubleSide","$800205c7888e1262$var$checkIntersection","$800205c7888e1262$export$1a557053019a130b","triOffset","$1f48f9e5928534a0$export$32f7fa781964ae30","ta","tb","tc","$1f48f9e5928534a0$export$be1391b7aa79c0f6","intersectsTriangleFunc","$1903b603ca48f64a$export$bf300c504651112a","getNewPrimitive","_getNewPrimitive","_primitives","primitives","primitive","$b6bf2d8af63f639e$export$bc7cbaf27fbe938e","n16","$b6bf2d8af63f639e$export$3231e969238304f3","$b6bf2d8af63f639e$export$d61684373eacdf61","$b6bf2d8af63f639e$export$7a68bc00425859d","$b6bf2d8af63f639e$export$4f44f52d9f75fa31","$b6bf2d8af63f639e$export$b43717b3ca95505","$b6bf2d8af63f639e$export$b5b7e27a1440579d","$00600b273bc2cae9$var$boundingBox","$00600b273bc2cae9$var$MeshBVHRootVisualizer","Object3D","displayEdges","BufferGeometry","displayParents","_group","targetDepth","boundsCount","posIndex","positionArray","terminate","xVal","yVal","zVal","indexLength","posOffset","indexOffset","$00600b273bc2cae9$export$5ead38ed5c75a1c8","Group","edgeMaterial","meshMaterial","totalRoots","$249fb1d4ac2bb894$var$getPrimitiveSize","$249fb1d4ac2bb894$export$de5f6c317656a6ce","leafNodeCount","tris","splits","surfaceAreaScore","offsetOrSplit","l0","surfaceArea","$249fb1d4ac2bb894$var$getRootExtremes","$249fb1d4ac2bb894$export$d677314be3f8df27","obj","traversed","stack","bytes","curr","hasOwnProperty","$31ccd9a92979d6bb$var$ray","Ray","$31ccd9a92979d6bb$var$tmpInverseMatrix","$31ccd9a92979d6bb$var$origMeshRaycastFunc","$31ccd9a92979d6bb$export$a0dc2935489c814a","firstHitOnly","convertRaycastIntersect","hits","$31ccd9a92979d6bb$export$749bba8a65fa6d70","$ff8ed","MeshBVH","$31ccd9a92979d6bb$export$e0a981a7a32ddba4","$84be0288c3863b1d$export$4dc20da53fccce35","autoDispose","$5LGag","UIntVertexAttributeTexture","FloatVertexAttributeTexture","bvhBounds","DataTexture","bvhContents","overrideItemSize","updateFrom","boundsTexture","contentsTexture","boundsDimension","boundsArray","contentsDimension","contentsArray","boundsIndex","mergedLeafCount","RGBAFormat","FloatType","NearestFilter","RGIntegerFormat","UnsignedIntType","$84be0288c3863b1d$var$bvhToTextures","$43320c8ca317ae89$var$countToIntFormat","RedIntegerFormat","RGBAIntegerFormat","$43320c8ca317ae89$export$2ba8de89bc26b001","_forcedType","attr","originalItemSize","originalCount","originalBufferCons","byteCount","normalizeValue","targetBufferCons","targetType","finalStride","IntType","$43320c8ca317ae89$var$countToStringFormat","RedFormat","RGFormat","$43320c8ca317ae89$var$countToFormat","UnsignedByteType","ByteType","ShortType","UnsignedShortType","dimension","dataArray","originalNormalized","ii","$43320c8ca317ae89$export$de036370a093ef","$43320c8ca317ae89$export$5444fd0f1815741f","$b9bb6458ba1c2702$export$1b1b39b9861ca334","$e43c17f117a819fb$var$_positionVector","$e43c17f117a819fb$var$_normalVector","$e43c17f117a819fb$var$_tangentVector","$e43c17f117a819fb$var$_tangentVector4","Vector4","$e43c17f117a819fb$var$_morphVector","$e43c17f117a819fb$var$_temp","$e43c17f117a819fb$var$_skinIndex","$e43c17f117a819fb$var$_skinWeight","$e43c17f117a819fb$var$_matrix","$e43c17f117a819fb$var$_boneMatrix","$e43c17f117a819fb$var$validateAttributes","attr1","attr2","sameCount","sameNormalized","sameType","sameItemSize","$e43c17f117a819fb$var$createAttributeClone","countOverride","cons","$e43c17f117a819fb$var$copyAttributeContents","targetOffset","io","$e43c17f117a819fb$var$addScaledMatrix","targetArray","matrixArray","$e43c17f117a819fb$var$boneNormalTransform","$e43c17f117a819fb$var$applyMorphTarget","morphData","$e43c17f117a819fb$export$3516980c1ea07296","meshes","finalMeshes","useGroups","applyWorldTransforms","_intermediateGeometry","getMaterials","generate","targetGeometry","geom","_convertToStaticGeometry","updateIndex","isIndexed","attributesUsed","attributesCount","forceUpateIndex","attrList","targetAttribute","$e43c17f117a819fb$var$mergeBufferGeometries","includeNormal","includes","includeTangent","targetAttributes","morphTangent","Matrix3"],"version":3,"file":"asyncGenerate.24234c67.js.map"}